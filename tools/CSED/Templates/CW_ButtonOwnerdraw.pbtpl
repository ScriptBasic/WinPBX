2
PBWIN
.bas
CWindow: Button (ownerdraw)
' ########################################################################################
' Microsoft Windows
' File: CW_ButtonOwnerdraw.pbtpl
' Contents: Template - CWindow with a ownerdraw button
' Compilers: PBWIN 10+, PBCC 6+
' Headers: Windows API headers III
' Copyright (c) 2014 José Roca. Freeware. Use at your own risk.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################
#COMPILE EXE
#DIM ALL
%UNICODE = 1

' // Include files for external files
#INCLUDE ONCE "CWindow.inc"      ' // CWindow class

%IDC_BUTTON = 100

' ========================================================================================
' Main
' ========================================================================================
FUNCTION WinMain (BYVAL hInstance AS DWORD, BYVAL hPrevInstance AS DWORD, BYVAL lpszCmdLine AS WSTRINGZ PTR, BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   AfxSetProcessDPIAware

   ' // Create an instance of the class
   LOCAL pWindow AS IWindow
   pWindow = CLASS "CWindow"
   IF ISNOTHING(pWindow) THEN EXIT FUNCTION

   ' // Create the main window
   ' // Note: CW_USEDEFAULT is used as the default value When passing 0's as the width and height
   pWindow.CreateWindow(%NULL, "CWindow with ownerdraw button", 0, 0, 0, 0, 0, 0, CODEPTR(WindowProc))
   ' // Set the client size
   pWindow.SetClientSize 500, 320
   ' // Center the window
   pWindow.CenterWindow

   ' // Add a button
   LOCAL hButton AS DWORD
   hButton = pWindow.AddButton(pWindow.hwnd, %IDC_BUTTON, "&Ownerdraw button", 300, 250, 150, 23, %BS_OWNERDRAW)
   SetFocus hButton

   |

   ' // Default message pump (you can replace it with your own)
   FUNCTION = pWindow.DoEvents(nCmdShow)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Main callback function.
' ========================================================================================
FUNCTION WindowProc (BYVAL hwnd AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG) AS LONG

   STATIC pWindow AS IWindow        ' // Reference to the IWindow interface

   ' // Process window mesages
   SELECT CASE uMsg

      CASE %WM_CREATE
         ' // Get a reference to the IWindow interface from the CREATESTRUCT structure
         pWindow = CWindow_GetObjectFromCreateStruct(lParam)
         EXIT FUNCTION

      CASE %WM_COMMAND
         SELECT CASE LO(WORD, wParam)
            CASE %IDCANCEL
               ' // If the Escape key has been pressed...
               IF HI(WORD, wParam) = %BN_CLICKED THEN
                  ' // ... close the application by sending a WM_CLOSE message
                  SendMessage hwnd, %WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF
         END SELECT

      CASE %WM_DRAWITEM

         LOCAL pDis AS DRAWITEMSTRUCT PTR
         LOCAL hPen AS DWORD, hBrush AS DWORD
         LOCAL hOldFont AS DWORD, hNewFont AS DWORD, rc AS RECT

         pDis = lParam
         IF @pDis.CtlId <> %IDC_BUTTON THEN EXIT FUNCTION
         ' // Get the rectangle that defines the boundaries of the button to be drawn.
         rc = @pDis.rcItem
         ' // Create a new font
         hNewFont = pWindow.CreateFont(IIF$(AfxGetWindowsVersion => 6, "Segoe UI", "Tahoma"), _
                    IIF&(AfxGetWindowsVersion => 6, 9, 8), %FW_NORMAL, %FALSE, %FALSE, %FALSE, %DEFAULT_CHARSET)
         ' // Select the font in the button's device context
         hOldFont = SelectObject(@pDis.hDC, hNewFont)
         ' // Draw the button
         IF (@pDis.itemState AND %ODS_FOCUS) THEN
            hPen = SelectObject(@pDis.hDC, CreatePen(%PS_SOLID, 3, RGB(255,0,0)))
            hBrush = SelectObject(@pDis.hDC, GetSysColorBrush(%COLOR_BTNFACE))
            Rectangle @pDis.hDC, rc.Left, rc.Top, rc.Right, rc.Bottom
            SelectObject @pDis.hDC, hBrush
            DeleteObject SelectObject(@pDis.hDC, hPen)
         ELSE
            FillRect @pDis.hDC, rc, GetSysColorBrush(%COLOR_BTNFACE)
         END IF
         ' // Draw the button's edge
         rc.Left += 3: rc.Top += 3 : rc.Bottom -= 3: rc.Right -= 3
         IF (@pDis.itemState AND %ODS_SELECTED) THEN
            DrawEdge @pDis.hDC, rc, %BDR_SUNKEN, %BF_RECT OR %BF_MIDDLE OR %BF_SOFT
            rc.Left += 2 : rc.Top += 2
         ELSE
            DrawEdge @pDis.hDC, rc, %BDR_RAISED, %BF_RECT OR %BF_MIDDLE OR %BF_SOFT
         END IF
         ' // Draw the button's caption
         SetBkMode @pDis.hDC, %TRANSPARENT
         SetTextColor @pDis.hDC, IIF&((@pDis.itemState AND %ODS_DISABLED), GetSysColor(%COLOR_GRAYTEXT), GetSysColor(%COLOR_BTNTEXT))
         DrawText @pDis.hDC, AfxGetWindowText(@pDis.hWndItem), -1, rc, %DT_CENTER OR %DT_VCENTER ' or %DT_SINGLELINE
         SelectObject @pDis.hDC, hOldFont
         DeleteObject(hNewFont)

         FUNCTION = %TRUE
         EXIT FUNCTION

      CASE %WM_DESTROY
         ' // End the application
         PostQuitMessage 0
         EXIT FUNCTION

   END SELECT

   ' // Pass unprocessed messages to Windows
   FUNCTION = DefWindowProc(hwnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================
