2
PBWIN
.bas
CWindow: Buffered Animation
' ########################################################################################
' Microsoft Windows
' File: CW_BufferedAnimation.pbtpl
' Contents: Template - Demonstrates the use of BeginBufferedAnimation.
' Click the left mouse button of the mouse to start the animation.
' Minimum operating systems: Windows Vista, Windows 7
' Compilers: PBWIN 10+, PBCC 6+
' Headers: Windows API headers III
' Copyright (c) 2014 José Roca. Freeware. Use at your own risk.
' Portions Copyright (c) Microsoft Corporation. All Rights Reserved.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

#COMPILE EXE
#DIM ALL
%UNICODE = 1

' // Header files for imported files
#INCLUDE ONCE "CWindow.inc"   ' // CWindow class
#INCLUDE ONCE "uxtheme.inc"

%ANIMATION_DURATION = 500

' ========================================================================================
' Paints the icon
' ========================================================================================
SUB PaintIt (BYVAL hwnd AS DWORD, BYVAL hdc AS DWORD, BYVAL nState AS LONG)

   LOCAL rc AS RECT
   GetClientRect(hwnd, rc)
   FillRect(hdc, rc, GetStockObject(%WHITE_BRUSH))
   LoadIcon (%NULL, BYVAL %IDI_APPLICATION)
   LOCAL IconId AS LONG
   IconId = IIF&(nState = 1, %IDI_APPLICATION, %IDI_ERROR)
   LOCAL hIcon AS DWORD
   hIcon = LoadIcon(%NULL, BYVAL IconId)
   IF hIcon THEN
      DrawIcon(hdc, 10, 10, hIcon)
      DestroyIcon(hIcon)
   END IF

END SUB
' ========================================================================================

' ########################################################################################
' Main
' ########################################################################################
FUNCTION WinMain (BYVAL hInstance AS DWORD, BYVAL hPrevInstance AS DWORD, BYVAL lpszCmdLine AS WSTRINGZ PTR, BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   AfxSetProcessDPIAware

   ' // Required: Initialize buffered painting for the current thread.
   IF FAILED(BufferedPaintInit) THEN EXIT FUNCTION

   ' // Create an instance of the class
   LOCAL pWindow AS IWindow
   pWindow = CLASS "CWindow"
   IF ISNOTHING(pWindow) THEN EXIT FUNCTION

   ' // Create the main window
   pWindow.CreateWindow(%NULL, "BufferedPaintSample_WndClass", 0, 0, 0, 0, -1, -1, CODEPTR(WindowProc))
   ' // Set the client size
   pWindow.SetClientSize 400, 250
   ' // Center the window
   pWindow.CenterWindow

   ' // Default message pump (you can replace it with your own)
   FUNCTION = pWindow.DoEvents(nCmdShow)

   ' // Required: Closes down buffered painting for the current thread.
   BufferedPaintUnInit

END FUNCTION
' ########################################################################################

' ========================================================================================
' Main callback function.
' ========================================================================================
FUNCTION WindowProc (BYVAL hwnd AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG) AS LONG

   LOCAL hdc AS DWORD                            ' // Device context handle
   LOCAL ps AS PAINTSTRUCT                       ' // PAINTSTRUCT structure
   LOCAL animParams AS BP_ANIMATIONPARAMS        ' // Animation parameters
   LOCAL hbpAnimation AS DWORD                   ' // Handle to the buffered paint animation
   LOCAL hdcFrom AS DWORD                        ' // Handle of the DC where the application should paint the initial state of the animation
   LOCAL hdcTo AS DWORD                          ' // Handle of the DC where the application should paint the final state of the animation
   LOCAL rc AS RECT                              ' // Coordinates of the window's client area
   STATIC fCurrentState AS LONG                  ' // Boolean flag
   STATIC fNewState AS LONG                      ' // Boolean flag

   SELECT CASE uMsg

      CASE %WM_CREATE
         fCurrentState = %TRUE
         fNewState = %TRUE

      CASE %WM_COMMAND
         SELECT CASE LO(WORD, wParam)
            CASE %IDCANCEL
               IF HI(WORD, wParam) = %BN_CLICKED THEN
                  SendMessage hwnd, %WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF
         END SELECT

      CASE %WM_LBUTTONDOWN
         ' // Start animation
         fNewState = NOT fCurrentState
         InvalidateRect(hwnd, BYVAL %NULL, %TRUE)
         EXIT FUNCTION

      CASE %WM_PAINT
         hdc = BeginPaint(hwnd, ps)
         IF hdc THEN
            ' // See if this paint was generated by a soft-fade animation
            IF ISFALSE BufferedPaintRenderAnimation(hwnd, hdc) THEN
               animParams.cbSize = SIZEOF(BP_ANIMATIONPARAMS)
               animParams.style = %BPAS_LINEAR
               ' // Check if animation is needed. If not set dwDuration to 0
               animParams.dwDuration = IIF&(fCurrentState <> fNewState, %ANIMATION_DURATION, 0)
               GetClientRect(hwnd, rc)
               hbpAnimation = BeginBufferedAnimation(hwnd, hdc, rc, _
                  %BPBF_COMPATIBLEBITMAP, BYVAL %NULL, animParams, hdcFrom, hdcTo)
               IF hbpAnimation THEN
                  IF hdcFrom THEN
                     PaintIt(hwnd, hdcFrom, fCurrentState)
                  END IF
                  IF hdcTo THEN
                     PaintIt(hwnd, hdcTo, fNewState)
                  END IF
                  fCurrentState = fNewState
                  EndBufferedAnimation(hbpAnimation, %TRUE)
               ELSE
                  PaintIt(hwnd, hdc, fCurrentState)
               END IF
            END IF
            EndPaint hwnd, ps
         END IF
         EXIT FUNCTION

      CASE %WM_SIZE
         BufferedPaintStopAllAnimations hwnd
         EXIT FUNCTION

      CASE %WM_DESTROY
         ' // Close the main window
         PostQuitMessage 0
         EXIT FUNCTION

   END SELECT

   FUNCTION = DefWindowProc(hwnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================
