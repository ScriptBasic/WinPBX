' ########################################################################################
' Microsoft Windows
' File: Tapi.inc
' Contents: Telephony API
' Copyright (c) 2011 José Roca
' Portions Copyright (c) Microsoft Corporation.
' All Rights Reserved.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

#INCLUDE THIS ONCE
%TAPI_INC = 1

'The  Telephony  API  is jointly copyrighted by Intel and Microsoft.  You are
'granted  a royalty free worldwide, unlimited license to make copies, and use
'the   API/SPI  for  making  applications/drivers  that  interface  with  the
'specification provided that this paragraph and the Intel/Microsoft copyright
'statement is maintained as is in the text and source code files.

'Copyright (c) Microsoft Corporation, All rights reserved.
'Portions copyright 1992, 1993 Intel/Microsoft, all rights reserved.

'Module Name:

'    tapi.h

'Notes:

'    Additions to the Telephony Application Programming Interface (TAPI) since
'    version 1.0 are noted by version number (e.g. "TAPI v1.4").

'--*/

'' //
'' //  -- TAPI VERSION INFO -- TAPI VERSION INFO -- TAPI VERSION INFO --
'' //
'' // To build  a TAPI 1.4 application put a define as below in your source
'' // file before you include TAPI.H:
'' //
'' // #define TAPI_CURRENT_VERSION &H00010004
'' //
'' //

#IF NOT %DEF(%TAPI_CURRENT_VERSION)
%TAPI_CURRENT_VERSION = &H00020002
#ENDIF

#INCLUDE ONCE "windows.inc"
#INCLUDE ONCE "basetsd.inc"

#IF %TAPI_CURRENT_VERSION >= &H00020002
#INCLUDE ONCE "oaidl.inc"
#ENDIF

'#pragma pack(1)
'' // Type definitions of the data types used in tapi

'' //
'' // TAPI type definitions
'' //

'#define DECLARE_OPAQUE32(name)  typedef DWORD name

'DECLARE_OPAQUE32(HCALL) AS DWORD
'typedef HCALL FAR * LPHCALL AS DWORD

'#IF %TAPI_CURRENT_VERSION >= &H00030000)
'DECLARE_OPAQUE32(HCALLHUB) AS DWORD                                     ' // TAPI v3.0
'typedef HCALLHUB FAR * LPHCALLHUB AS DWORD                              ' // TAPI v3.0
'#ENDIF

'DECLARE_OPAQUE32(HLINE) AS DWORD
'typedef HLINE FAR * LPHLINE AS DWORD

'DECLARE_OPAQUE32(HPHONE) AS DWORD
'typedef HPHONE FAR * LPHPHONE AS DWORD

'DECLARE_OPAQUE32(HLINEAPP) AS DWORD
'typedef HLINEAPP FAR * LPHLINEAPP AS DWORD

'DECLARE_OPAQUE32(HPHONEAPP) AS DWORD
'typedef HPHONEAPP FAR * LPHPHONEAPP AS DWORD

'#IF %TAPI_CURRENT_VERSION >= &H00020002)
'DECLARE_OPAQUE32(HAGENTSESSION) AS DWORD                                ' // TAPI v2.2
'typedef HAGENTSESSION FAR * LPHAGENTSESSION AS DWORD                    ' // TAPI v2.2

'DECLARE_OPAQUE32(HAGENT) AS DWORD                                       ' // TAPI v2.2
'typedef HAGENT FAR * LPHAGENT AS DWORD                                  ' // TAPI v2.2
'#ENDIF

'#IF %TAPI_CURRENT_VERSION >= &H00030000)
'DECLARE_OPAQUE32(HPRIVATECHANNEL) AS DWORD                              ' // TAPI v3.0
'typedef HPRIVATECHANNEL FAR * LPHPRIVATECHANNEL AS DWORD                ' // TAPI v3.0
'#ENDIF

'typedef HICON FAR * LPHICON AS DWORD

'SUB LINECALLBACK ( _
'   BYVAL hDevice AS DWORD _                 ' DWORD
' , BYVAL dwMessage AS DWORD _               ' DWORD
' , BYVAL dwInstance AS DWORD _              ' DWORD_PTR
' , BYVAL dwParam1 AS DWORD _                ' DWORD_PTR
' , BYVAL dwParam2 AS DWORD _                ' DWORD_PTR
' , BYVAL dwParam3 AS DWORD _                ' DWORD_PTR
' )                                          ' void

'END SUB

'SUB PHONECALLBACK ( _
'   BYVAL hDevice AS DWORD _                 ' DWORD
' , BYVAL dwMessage AS DWORD _               ' DWORD
' , BYVAL dwInstance AS DWORD _              ' DWORD_PTR
' , BYVAL dwParam1 AS DWORD _                ' DWORD_PTR
' , BYVAL dwParam2 AS DWORD _                ' DWORD_PTR
' , BYVAL dwParam3 AS DWORD _                ' DWORD_PTR
' )                                          ' void

'END SUB


'' // Messages for Phones and Lines

%LINE_ADDRESSSTATE                      = 0&
%LINE_CALLINFO                          = 1&
%LINE_CALLSTATE                         = 2&
%LINE_CLOSE                             = 3&
%LINE_DEVSPECIFIC                       = 4&
%LINE_DEVSPECIFICFEATURE                = 5&
%LINE_GATHERDIGITS                      = 6&
%LINE_GENERATE                          = 7&
%LINE_LINEDEVSTATE                      = 8&
%LINE_MONITORDIGITS                     = 9&
%LINE_MONITORMEDIA                      = 10&
%LINE_MONITORTONE                       = 11&
%LINE_REPLY                             = 12&
%LINE_REQUEST                           = 13&
%PHONE_BUTTON                           = 14&
%PHONE_CLOSE                            = 15&
%PHONE_DEVSPECIFIC                      = 16&
%PHONE_REPLY                            = 17&
%PHONE_STATE                            = 18&
%LINE_CREATE                            = 19&             ' // TAPI v1.4
%PHONE_CREATE                           = 20&             ' // TAPI v1.4

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINE_AGENTSPECIFIC                     = 21&             ' // TAPI v2.0
%LINE_AGENTSTATUS                       = 22&             ' // TAPI v2.0
%LINE_APPNEWCALL                        = 23&             ' // TAPI v2.0
%LINE_PROXYREQUEST                      = 24&             ' // TAPI v2.0
%LINE_REMOVE                            = 25&             ' // TAPI v2.0
%PHONE_REMOVE                           = 26&             ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINE_AGENTSESSIONSTATUS                = 27&             ' // TAPI v2.2
%LINE_QUEUESTATUS                       = 28&             ' // TAPI v2.2
%LINE_AGENTSTATUSEX                     = 29&             ' // TAPI v2.2
%LINE_GROUPSTATUS                       = 30&             ' // TAPI v2.2
%LINE_PROXYSTATUS                       = 31&             ' // TAPI v2.2
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINE_APPNEWCALLHUB                     = 32&             ' // TAPI v3.0
%LINE_CALLHUBCLOSE                      = 33&             ' // TAPI v3.0
%LINE_DEVSPECIFICEX                     = 34&             ' // TAPI v3.0
#ENDIF

%INITIALIZE_NEGOTIATION                  = &HFFFFFFFF???

%LINEADDRCAPFLAGS_FWDNUMRINGS            = &H00000001???
%LINEADDRCAPFLAGS_PICKUPGROUPID          = &H00000002???
%LINEADDRCAPFLAGS_SECURE                 = &H00000004???
%LINEADDRCAPFLAGS_BLOCKIDDEFAULT         = &H00000008???
%LINEADDRCAPFLAGS_BLOCKIDOVERRIDE        = &H00000010???
%LINEADDRCAPFLAGS_DIALED                 = &H00000020???
%LINEADDRCAPFLAGS_ORIGOFFHOOK            = &H00000040???
%LINEADDRCAPFLAGS_DESTOFFHOOK            = &H00000080???
%LINEADDRCAPFLAGS_FWDCONSULT             = &H00000100???
%LINEADDRCAPFLAGS_SETUPCONFNULL          = &H00000200???
%LINEADDRCAPFLAGS_AUTORECONNECT          = &H00000400???
%LINEADDRCAPFLAGS_COMPLETIONID           = &H00000800???
%LINEADDRCAPFLAGS_TRANSFERHELD           = &H00001000???
%LINEADDRCAPFLAGS_TRANSFERMAKE           = &H00002000???
%LINEADDRCAPFLAGS_CONFERENCEHELD         = &H00004000???
%LINEADDRCAPFLAGS_CONFERENCEMAKE         = &H00008000???
%LINEADDRCAPFLAGS_PARTIALDIAL            = &H00010000???
%LINEADDRCAPFLAGS_FWDSTATUSVALID         = &H00020000???
%LINEADDRCAPFLAGS_FWDINTEXTADDR          = &H00040000???
%LINEADDRCAPFLAGS_FWDBUSYNAADDR          = &H00080000???
%LINEADDRCAPFLAGS_ACCEPTTOALERT          = &H00100000???
%LINEADDRCAPFLAGS_CONFDROP               = &H00200000???
%LINEADDRCAPFLAGS_PICKUPCALLWAIT         = &H00400000???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEADDRCAPFLAGS_PREDICTIVEDIALER       = &H00800000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_QUEUE                  = &H01000000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_ROUTEPOINT             = &H02000000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_HOLDMAKESNEW           = &H04000000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_NOINTERNALCALLS        = &H08000000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_NOEXTERNALCALLS        = &H10000000???      ' // TAPI v2.0
%LINEADDRCAPFLAGS_SETCALLINGID           = &H20000000???      ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINEADDRCAPFLAGS_ACDGROUP               = &H40000000???      ' // TAPI v2.2
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = &H80000000???    ' // TAPI v3.0
#ENDIF

%LINEADDRESSMODE_ADDRESSID               = &H00000001???
%LINEADDRESSMODE_DIALABLEADDR            = &H00000002???

%LINEADDRESSSHARING_PRIVATE              = &H00000001???
%LINEADDRESSSHARING_BRIDGEDEXCL          = &H00000002???
%LINEADDRESSSHARING_BRIDGEDNEW           = &H00000004???
%LINEADDRESSSHARING_BRIDGEDSHARED        = &H00000008???
%LINEADDRESSSHARING_MONITORED            = &H00000010???

%LINEADDRESSSTATE_OTHER                  = &H00000001???
%LINEADDRESSSTATE_DEVSPECIFIC            = &H00000002???
%LINEADDRESSSTATE_INUSEZERO              = &H00000004???
%LINEADDRESSSTATE_INUSEONE               = &H00000008???
%LINEADDRESSSTATE_INUSEMANY              = &H00000010???
%LINEADDRESSSTATE_NUMCALLS               = &H00000020???
%LINEADDRESSSTATE_FORWARD                = &H00000040???
%LINEADDRESSSTATE_TERMINALS              = &H00000080???
%LINEADDRESSSTATE_CAPSCHANGE             = &H00000100???      ' // TAPI v1.4

#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINEADDRESSTYPE_PHONENUMBER             = &H00000001???
%LINEADDRESSTYPE_SDP                     = &H00000002???
%LINEADDRESSTYPE_EMAILNAME               = &H00000004???
%LINEADDRESSTYPE_DOMAINNAME              = &H00000008???
%LINEADDRESSTYPE_IPADDRESS               = &H00000010???
#ENDIF

%LINEADDRFEATURE_FORWARD                 = &H00000001???
%LINEADDRFEATURE_MAKECALL                = &H00000002???
%LINEADDRFEATURE_PICKUP                  = &H00000004???
%LINEADDRFEATURE_SETMEDIACONTROL         = &H00000008???
%LINEADDRFEATURE_SETTERMINAL             = &H00000010???
%LINEADDRFEATURE_SETUPCONF               = &H00000020???
%LINEADDRFEATURE_UNCOMPLETECALL          = &H00000040???
%LINEADDRFEATURE_UNPARK                  = &H00000080???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEADDRFEATURE_PICKUPHELD              = &H00000100???      ' // TAPI v2.0
%LINEADDRFEATURE_PICKUPGROUP             = &H00000200???      ' // TAPI v2.0
%LINEADDRFEATURE_PICKUPDIRECT            = &H00000400???      ' // TAPI v2.0
%LINEADDRFEATURE_PICKUPWAITING           = &H00000800???      ' // TAPI v2.0
%LINEADDRFEATURE_FORWARDFWD              = &H00001000???      ' // TAPI v2.0
%LINEADDRFEATURE_FORWARDDND              = &H00002000???      ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEAGENTFEATURE_SETAGENTGROUP          = &H00000001???      ' // TAPI v2.0
%LINEAGENTFEATURE_SETAGENTSTATE          = &H00000002???      ' // TAPI v2.0
%LINEAGENTFEATURE_SETAGENTACTIVITY       = &H00000004???      ' // TAPI v2.0
%LINEAGENTFEATURE_AGENTSPECIFIC          = &H00000008???      ' // TAPI v2.0
%LINEAGENTFEATURE_GETAGENTACTIVITYLIST   = &H00000010???      ' // TAPI v2.0
%LINEAGENTFEATURE_GETAGENTGROUP          = &H00000020???      ' // TAPI v2.0

%LINEAGENTSTATE_LOGGEDOFF                = &H00000001???      ' // TAPI v2.0
%LINEAGENTSTATE_NOTREADY                 = &H00000002???      ' // TAPI v2.0
%LINEAGENTSTATE_READY                    = &H00000004???      ' // TAPI v2.0
%LINEAGENTSTATE_BUSYACD                  = &H00000008???      ' // TAPI v2.0
%LINEAGENTSTATE_BUSYINCOMING             = &H00000010???      ' // TAPI v2.0
%LINEAGENTSTATE_BUSYOUTBOUND             = &H00000020???      ' // TAPI v2.0
%LINEAGENTSTATE_BUSYOTHER                = &H00000040???      ' // TAPI v2.0
%LINEAGENTSTATE_WORKINGAFTERCALL         = &H00000080???      ' // TAPI v2.0
%LINEAGENTSTATE_UNKNOWN                  = &H00000100???      ' // TAPI v2.0
%LINEAGENTSTATE_UNAVAIL                  = &H00000200???      ' // TAPI v2.0

%LINEAGENTSTATUS_GROUP                   = &H00000001???      ' // TAPI v2.0
%LINEAGENTSTATUS_STATE                   = &H00000002???      ' // TAPI v2.0
%LINEAGENTSTATUS_NEXTSTATE               = &H00000004???      ' // TAPI v2.0
%LINEAGENTSTATUS_ACTIVITY                = &H00000008???      ' // TAPI v2.0
%LINEAGENTSTATUS_ACTIVITYLIST            = &H00000010???      ' // TAPI v2.0
%LINEAGENTSTATUS_GROUPLIST               = &H00000020???      ' // TAPI v2.0
%LINEAGENTSTATUS_CAPSCHANGE              = &H00000040???      ' // TAPI v2.0
%LINEAGENTSTATUS_VALIDSTATES             = &H00000080???      ' // TAPI v2.0
%LINEAGENTSTATUS_VALIDNEXTSTATES         = &H00000100???      ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINEAGENTSTATEEX_NOTREADY               = &H00000001???      ' // TAPI v2.2
%LINEAGENTSTATEEX_READY                  = &H00000002???      ' // TAPI v2.2
%LINEAGENTSTATEEX_BUSYACD                = &H00000004???      ' // TAPI v2.2
%LINEAGENTSTATEEX_BUSYINCOMING           = &H00000008???      ' // TAPI v2.2
%LINEAGENTSTATEEX_BUSYOUTGOING           = &H00000010???      ' // TAPI v2.2
%LINEAGENTSTATEEX_UNKNOWN                = &H00000020???      ' // TAPI v2.2
%LINEAGENTSTATEEX_RELEASED               = &H00000040???      ' // TAPI v2.2

%LINEAGENTSTATUSEX_NEWAGENT              = &H00000001???      ' // TAPI v2.2
%LINEAGENTSTATUSEX_STATE                 = &H00000002???      ' // TAPI v2.2
%LINEAGENTSTATUSEX_UPDATEINFO            = &H00000004???      ' // TAPI v2.2
' ' //%LINEAGENTSTATUSEX_DESTROYED             = &H00000004???      ' // TAPI v2.2

%LINEAGENTSESSIONSTATE_NOTREADY          = &H00000001???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATE_READY             = &H00000002???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATE_BUSYONCALL        = &H00000004???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATE_BUSYWRAPUP        = &H00000008???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATE_ENDED             = &H00000010???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATE_RELEASED          = &H00000020???      ' // TAPI v2.2

%LINEAGENTSESSIONSTATUS_NEWSESSION       = &H00000001???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATUS_STATE            = &H00000002???      ' // TAPI v2.2
%LINEAGENTSESSIONSTATUS_UPDATEINFO       = &H00000004???      ' // TAPI v2.2
' //%LINEAGENTSESSIONSTATUS_DESTROYED        = &H00000008???      ' // TAPI v2.2

%LINEQUEUESTATUS_UPDATEINFO              = &H00000001???      ' // TAPI v2.2
%LINEQUEUESTATUS_NEWQUEUE                = &H00000002???      ' // TAPI v2.2
%LINEQUEUESTATUS_QUEUEREMOVED            = &H00000004???      ' // TAPI v2.2

%LINEGROUPSTATUS_NEWGROUP                = &H00000001???      ' // TAPI v2.2
%LINEGROUPSTATUS_GROUPREMOVED            = &H00000002???      ' // TAPI v2.2

%LINEPROXYSTATUS_OPEN                    = &H00000001???      ' // TAPI v2.2
%LINEPROXYSTATUS_CLOSE                   = &H00000002???      ' // TAPI v2.2
%LINEPROXYSTATUS_ALLOPENFORACD           = &H00000004???      ' // TAPI v2.2
#ENDIF

%LINEANSWERMODE_NONE                     = &H00000001???
%LINEANSWERMODE_DROP                     = &H00000002???
%LINEANSWERMODE_HOLD                     = &H00000004???

%LINEBEARERMODE_VOICE                    = &H00000001???
%LINEBEARERMODE_SPEECH                   = &H00000002???
%LINEBEARERMODE_MULTIUSE                 = &H00000004???
%LINEBEARERMODE_DATA                     = &H00000008???
%LINEBEARERMODE_ALTSPEECHDATA            = &H00000010???
%LINEBEARERMODE_NONCALLSIGNALING         = &H00000020???
%LINEBEARERMODE_PASSTHROUGH              = &H00000040???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEBEARERMODE_RESTRICTEDDATA           = &H00000080???      ' // TAPI v2.0
#ENDIF

%LINEBUSYMODE_STATION                    = &H00000001???
%LINEBUSYMODE_TRUNK                      = &H00000002???
%LINEBUSYMODE_UNKNOWN                    = &H00000004???
%LINEBUSYMODE_UNAVAIL                    = &H00000008???

%LINECALLCOMPLCOND_BUSY                  = &H00000001???
%LINECALLCOMPLCOND_NOANSWER              = &H00000002???

%LINECALLCOMPLMODE_CAMPON                = &H00000001???
%LINECALLCOMPLMODE_CALLBACK              = &H00000002???
%LINECALLCOMPLMODE_INTRUDE               = &H00000004???
%LINECALLCOMPLMODE_MESSAGE               = &H00000008???

%LINECALLFEATURE_ACCEPT                  = &H00000001???
%LINECALLFEATURE_ADDTOCONF               = &H00000002???
%LINECALLFEATURE_ANSWER                  = &H00000004???
%LINECALLFEATURE_BLINDTRANSFER           = &H00000008???
%LINECALLFEATURE_COMPLETECALL            = &H00000010???
%LINECALLFEATURE_COMPLETETRANSF          = &H00000020???
%LINECALLFEATURE_DIAL                    = &H00000040???
%LINECALLFEATURE_DROP                    = &H00000080???
%LINECALLFEATURE_GATHERDIGITS            = &H00000100???
%LINECALLFEATURE_GENERATEDIGITS          = &H00000200???
%LINECALLFEATURE_GENERATETONE            = &H00000400???
%LINECALLFEATURE_HOLD                    = &H00000800???
%LINECALLFEATURE_MONITORDIGITS           = &H00001000???
%LINECALLFEATURE_MONITORMEDIA            = &H00002000???
%LINECALLFEATURE_MONITORTONES            = &H00004000???
%LINECALLFEATURE_PARK                    = &H00008000???
%LINECALLFEATURE_PREPAREADDCONF          = &H00010000???
%LINECALLFEATURE_REDIRECT                = &H00020000???
%LINECALLFEATURE_REMOVEFROMCONF          = &H00040000???
%LINECALLFEATURE_SECURECALL              = &H00080000???
%LINECALLFEATURE_SENDUSERUSER            = &H00100000???
%LINECALLFEATURE_SETCALLPARAMS           = &H00200000???
%LINECALLFEATURE_SETMEDIACONTROL         = &H00400000???
%LINECALLFEATURE_SETTERMINAL             = &H00800000???
%LINECALLFEATURE_SETUPCONF               = &H01000000???
%LINECALLFEATURE_SETUPTRANSFER           = &H02000000???
%LINECALLFEATURE_SWAPHOLD                = &H04000000???
%LINECALLFEATURE_UNHOLD                  = &H08000000???
%LINECALLFEATURE_RELEASEUSERUSERINFO     = &H10000000???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLFEATURE_SETTREATMENT            = &H20000000???      ' // TAPI v2.0
%LINECALLFEATURE_SETQOS                  = &H40000000???      ' // TAPI v2.0
%LINECALLFEATURE_SETCALLDATA             = &H80000000???      ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLFEATURE2_NOHOLDCONFERENCE       = &H00000001???      ' // TAPI v2.0
%LINECALLFEATURE2_ONESTEPTRANSFER        = &H00000002???      ' // TAPI v2.0
%LINECALLFEATURE2_COMPLCAMPON            = &H00000004???      ' // TAPI v2.0
%LINECALLFEATURE2_COMPLCALLBACK          = &H00000008???      ' // TAPI v2.0
%LINECALLFEATURE2_COMPLINTRUDE           = &H00000010???      ' // TAPI v2.0
%LINECALLFEATURE2_COMPLMESSAGE           = &H00000020???      ' // TAPI v2.0
%LINECALLFEATURE2_TRANSFERNORM           = &H00000040???      ' // TAPI v2.0
%LINECALLFEATURE2_TRANSFERCONF           = &H00000080???      ' // TAPI v2.0
%LINECALLFEATURE2_PARKDIRECT             = &H00000100???      ' // TAPI v2.0
%LINECALLFEATURE2_PARKNONDIRECT          = &H00000200???      ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINECALLHUBTRACKING_NONE                = &H00000000???      ' // TAPI v3.0
%LINECALLHUBTRACKING_PROVIDERLEVEL       = &H00000001???      ' // TAPI v3.0
%LINECALLHUBTRACKING_ALLCALLS            = &H00000002???      ' // TAPI v3.0
#ENDIF

%LINECALLINFOSTATE_OTHER                 = &H00000001???
%LINECALLINFOSTATE_DEVSPECIFIC           = &H00000002???
%LINECALLINFOSTATE_BEARERMODE            = &H00000004???
%LINECALLINFOSTATE_RATE                  = &H00000008???
%LINECALLINFOSTATE_MEDIAMODE             = &H00000010???
%LINECALLINFOSTATE_APPSPECIFIC           = &H00000020???
%LINECALLINFOSTATE_CALLID                = &H00000040???
%LINECALLINFOSTATE_RELATEDCALLID         = &H00000080???
%LINECALLINFOSTATE_ORIGIN                = &H00000100???
%LINECALLINFOSTATE_REASON                = &H00000200???
%LINECALLINFOSTATE_COMPLETIONID          = &H00000400???
%LINECALLINFOSTATE_NUMOWNERINCR          = &H00000800???
%LINECALLINFOSTATE_NUMOWNERDECR          = &H00001000???
%LINECALLINFOSTATE_NUMMONITORS           = &H00002000???
%LINECALLINFOSTATE_TRUNK                 = &H00004000???
%LINECALLINFOSTATE_CALLERID              = &H00008000???
%LINECALLINFOSTATE_CALLEDID              = &H00010000???
%LINECALLINFOSTATE_CONNECTEDID           = &H00020000???
%LINECALLINFOSTATE_REDIRECTIONID         = &H00040000???
%LINECALLINFOSTATE_REDIRECTINGID         = &H00080000???
%LINECALLINFOSTATE_DISPLAY               = &H00100000???
%LINECALLINFOSTATE_USERUSERINFO          = &H00200000???
%LINECALLINFOSTATE_HIGHLEVELCOMP         = &H00400000???
%LINECALLINFOSTATE_LOWLEVELCOMP          = &H00800000???
%LINECALLINFOSTATE_CHARGINGINFO          = &H01000000???
%LINECALLINFOSTATE_TERMINAL              = &H02000000???
%LINECALLINFOSTATE_DIALPARAMS            = &H04000000???
%LINECALLINFOSTATE_MONITORMODES          = &H08000000???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLINFOSTATE_TREATMENT             = &H10000000???      ' // TAPI v2.0
%LINECALLINFOSTATE_QOS                   = &H20000000???      ' // TAPI v2.0
%LINECALLINFOSTATE_CALLDATA              = &H40000000???      ' // TAPI v2.0
#ENDIF

%LINECALLORIGIN_OUTBOUND                 = &H00000001???
%LINECALLORIGIN_INTERNAL                 = &H00000002???
%LINECALLORIGIN_EXTERNAL                 = &H00000004???
%LINECALLORIGIN_UNKNOWN                  = &H00000010???
%LINECALLORIGIN_UNAVAIL                  = &H00000020???
%LINECALLORIGIN_CONFERENCE               = &H00000040???
%LINECALLORIGIN_INBOUND                  = &H00000080???      ' // TAPI v1.4

%LINECALLPARAMFLAGS_SECURE               = &H00000001???
%LINECALLPARAMFLAGS_IDLE                 = &H00000002???
%LINECALLPARAMFLAGS_BLOCKID              = &H00000004???
%LINECALLPARAMFLAGS_ORIGOFFHOOK          = &H00000008???
%LINECALLPARAMFLAGS_DESTOFFHOOK          = &H00000010???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLPARAMFLAGS_NOHOLDCONFERENCE     = &H00000020???      ' // TAPI v2.0
%LINECALLPARAMFLAGS_PREDICTIVEDIAL       = &H00000040???      ' // TAPI v2.0
%LINECALLPARAMFLAGS_ONESTEPTRANSFER      = &H00000080???      ' // TAPI v2.0
#ENDIF

%LINECALLPARTYID_BLOCKED                 = &H00000001???
%LINECALLPARTYID_OUTOFAREA               = &H00000002???
%LINECALLPARTYID_NAME                    = &H00000004???
%LINECALLPARTYID_ADDRESS                 = &H00000008???
%LINECALLPARTYID_PARTIAL                 = &H00000010???
%LINECALLPARTYID_UNKNOWN                 = &H00000020???
%LINECALLPARTYID_UNAVAIL                 = &H00000040???

%LINECALLPRIVILEGE_NONE                  = &H00000001???
%LINECALLPRIVILEGE_MONITOR               = &H00000002???
%LINECALLPRIVILEGE_OWNER                 = &H00000004???

%LINECALLREASON_DIRECT                   = &H00000001???
%LINECALLREASON_FWDBUSY                  = &H00000002???
%LINECALLREASON_FWDNOANSWER              = &H00000004???
%LINECALLREASON_FWDUNCOND                = &H00000008???
%LINECALLREASON_PICKUP                   = &H00000010???
%LINECALLREASON_UNPARK                   = &H00000020???
%LINECALLREASON_REDIRECT                 = &H00000040???
%LINECALLREASON_CALLCOMPLETION           = &H00000080???
%LINECALLREASON_TRANSFER                 = &H00000100???
%LINECALLREASON_REMINDER                 = &H00000200???
%LINECALLREASON_UNKNOWN                  = &H00000400???
%LINECALLREASON_UNAVAIL                  = &H00000800???
%LINECALLREASON_INTRUDE                  = &H00001000???      ' // TAPI v1.4
%LINECALLREASON_PARKED                   = &H00002000???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLREASON_CAMPEDON                 = &H00004000???      ' // TAPI v2.0
%LINECALLREASON_ROUTEREQUEST             = &H00008000???      ' // TAPI v2.0
#ENDIF

%LINECALLSELECT_LINE                     = &H00000001???
%LINECALLSELECT_ADDRESS                  = &H00000002???
%LINECALLSELECT_CALL                     = &H00000004???
#IF %TAPI_CURRENT_VERSION >= &H00020001
%LINECALLSELECT_DEVICEID                 = &H00000008???      ' // TAPI v2.1
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINECALLSELECT_CALLID                   = &H00000010???      ' // TAPI v3.0
#ENDIF

%LINECALLSTATE_IDLE                      = &H00000001???
%LINECALLSTATE_OFFERING                  = &H00000002???
%LINECALLSTATE_ACCEPTED                  = &H00000004???
%LINECALLSTATE_DIALTONE                  = &H00000008???
%LINECALLSTATE_DIALING                   = &H00000010???
%LINECALLSTATE_RINGBACK                  = &H00000020???
%LINECALLSTATE_BUSY                      = &H00000040???
%LINECALLSTATE_SPECIALINFO               = &H00000080???
%LINECALLSTATE_CONNECTED                 = &H00000100???
%LINECALLSTATE_PROCEEDING                = &H00000200???
%LINECALLSTATE_ONHOLD                    = &H00000400???
%LINECALLSTATE_CONFERENCED               = &H00000800???
%LINECALLSTATE_ONHOLDPENDCONF            = &H00001000???
%LINECALLSTATE_ONHOLDPENDTRANSFER        = &H00002000???
%LINECALLSTATE_DISCONNECTED              = &H00004000???
%LINECALLSTATE_UNKNOWN                   = &H00008000???

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECALLTREATMENT_SILENCE               = &H00000001???      ' // TAPI v2.0
%LINECALLTREATMENT_RINGBACK              = &H00000002???      ' // TAPI v2.0
%LINECALLTREATMENT_BUSY                  = &H00000003???      ' // TAPI v2.0
%LINECALLTREATMENT_MUSIC                 = &H00000004???      ' // TAPI v2.0
#ENDIF

%LINECARDOPTION_PREDEFINED               = &H00000001???      ' // TAPI v1.4
%LINECARDOPTION_HIDDEN                   = &H00000002???      ' // TAPI v1.4

%LINECONNECTEDMODE_ACTIVE                = &H00000001???      ' // TAPI v1.4
%LINECONNECTEDMODE_INACTIVE              = &H00000002???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINECONNECTEDMODE_ACTIVEHELD            = &H00000004???      ' // TAPI v2.0
%LINECONNECTEDMODE_INACTIVEHELD          = &H00000008???      ' // TAPI v2.0
%LINECONNECTEDMODE_CONFIRMED             = &H00000010???      ' // TAPI v2.0
#ENDIF

%LINEDEVCAPFLAGS_CROSSADDRCONF           = &H00000001???
%LINEDEVCAPFLAGS_HIGHLEVCOMP             = &H00000002???
%LINEDEVCAPFLAGS_LOWLEVCOMP              = &H00000004???
%LINEDEVCAPFLAGS_MEDIACONTROL            = &H00000008???
%LINEDEVCAPFLAGS_MULTIPLEADDR            = &H00000010???
%LINEDEVCAPFLAGS_CLOSEDROP               = &H00000020???
%LINEDEVCAPFLAGS_DIALBILLING             = &H00000040???
%LINEDEVCAPFLAGS_DIALQUIET               = &H00000080???
%LINEDEVCAPFLAGS_DIALDIALTONE            = &H00000100???
#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINEDEVCAPFLAGS_MSP                     = &H00000200???      ' // TAPI v3.0
%LINEDEVCAPFLAGS_CALLHUB                 = &H00000400???      ' // TAPI v3.0
%LINEDEVCAPFLAGS_CALLHUBTRACKING         = &H00000800???      ' // TAPI v3.0
%LINEDEVCAPFLAGS_PRIVATEOBJECTS          = &H00001000???      ' // TAPI v3.0
#ENDIF
%LINEDEVCAPFLAGS_LOCAL                   = &H00002000???

%LINEDEVSTATE_OTHER                      = &H00000001???
%LINEDEVSTATE_RINGING                    = &H00000002???
%LINEDEVSTATE_CONNECTED                  = &H00000004???
%LINEDEVSTATE_DISCONNECTED               = &H00000008???
%LINEDEVSTATE_MSGWAITON                  = &H00000010???
%LINEDEVSTATE_MSGWAITOFF                 = &H00000020???
%LINEDEVSTATE_INSERVICE                  = &H00000040???
%LINEDEVSTATE_OUTOFSERVICE               = &H00000080???
%LINEDEVSTATE_MAINTENANCE                = &H00000100???
%LINEDEVSTATE_OPEN                       = &H00000200???
%LINEDEVSTATE_CLOSE                      = &H00000400???
%LINEDEVSTATE_NUMCALLS                   = &H00000800???
%LINEDEVSTATE_NUMCOMPLETIONS             = &H00001000???
%LINEDEVSTATE_TERMINALS                  = &H00002000???
%LINEDEVSTATE_ROAMMODE                   = &H00004000???
%LINEDEVSTATE_BATTERY                    = &H00008000???
%LINEDEVSTATE_SIGNAL                     = &H00010000???
%LINEDEVSTATE_DEVSPECIFIC                = &H00020000???
%LINEDEVSTATE_REINIT                     = &H00040000???
%LINEDEVSTATE_LOCK                       = &H00080000???
%LINEDEVSTATE_CAPSCHANGE                 = &H00100000???      ' // TAPI v1.4
%LINEDEVSTATE_CONFIGCHANGE               = &H00200000???      ' // TAPI v1.4
%LINEDEVSTATE_TRANSLATECHANGE            = &H00400000???      ' // TAPI v1.4
%LINEDEVSTATE_COMPLCANCEL                = &H00800000???      ' // TAPI v1.4
%LINEDEVSTATE_REMOVED                    = &H01000000???      ' // TAPI v1.4

%LINEDEVSTATUSFLAGS_CONNECTED            = &H00000001???
%LINEDEVSTATUSFLAGS_MSGWAIT              = &H00000002???
%LINEDEVSTATUSFLAGS_INSERVICE            = &H00000004???
%LINEDEVSTATUSFLAGS_LOCKED               = &H00000008???

%LINEDIALTONEMODE_NORMAL                 = &H00000001???
%LINEDIALTONEMODE_SPECIAL                = &H00000002???
%LINEDIALTONEMODE_INTERNAL               = &H00000004???
%LINEDIALTONEMODE_EXTERNAL               = &H00000008???
%LINEDIALTONEMODE_UNKNOWN                = &H00000010???
%LINEDIALTONEMODE_UNAVAIL                = &H00000020???

%LINEDIGITMODE_PULSE                     = &H00000001???
%LINEDIGITMODE_DTMF                      = &H00000002???
%LINEDIGITMODE_DTMFEND                   = &H00000004???

%LINEDISCONNECTMODE_NORMAL               = &H00000001???
%LINEDISCONNECTMODE_UNKNOWN              = &H00000002???
%LINEDISCONNECTMODE_REJECT               = &H00000004???
%LINEDISCONNECTMODE_PICKUP               = &H00000008???
%LINEDISCONNECTMODE_FORWARDED            = &H00000010???
%LINEDISCONNECTMODE_BUSY                 = &H00000020???
%LINEDISCONNECTMODE_NOANSWER             = &H00000040???
%LINEDISCONNECTMODE_BADADDRESS           = &H00000080???
%LINEDISCONNECTMODE_UNREACHABLE          = &H00000100???
%LINEDISCONNECTMODE_CONGESTION           = &H00000200???
%LINEDISCONNECTMODE_INCOMPATIBLE         = &H00000400???
%LINEDISCONNECTMODE_UNAVAIL              = &H00000800???
%LINEDISCONNECTMODE_NODIALTONE           = &H00001000???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEDISCONNECTMODE_NUMBERCHANGED        = &H00002000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_OUTOFORDER           = &H00004000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_TEMPFAILURE          = &H00008000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_QOSUNAVAIL           = &H00010000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_BLOCKED              = &H00020000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_DONOTDISTURB         = &H00040000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_CANCELLED            = &H00080000???      ' // TAPI v2.0
%LINEDISCONNECTMODE_DESTINATIONBARRED    = &H00100000???      ' // TAPI v2.0, WINCE 5.1 AKU 3.X
%LINEDISCONNECTMODE_FDNRESTRICT          = &H00200000???      ' // TAPI v2.0, WINCE 5.1 AKU 3.X
#ENDIF

%LINEERR_ALLOCATED                       = &H80000001???
%LINEERR_BADDEVICEID                     = &H80000002???
%LINEERR_BEARERMODEUNAVAIL               = &H80000003???
%LINEERR_CALLUNAVAIL                     = &H80000005???
%LINEERR_COMPLETIONOVERRUN               = &H80000006???
%LINEERR_CONFERENCEFULL                  = &H80000007???
%LINEERR_DIALBILLING                     = &H80000008???
%LINEERR_DIALDIALTONE                    = &H80000009???
%LINEERR_DIALPROMPT                      = &H8000000A???
%LINEERR_DIALQUIET                       = &H8000000B???
%LINEERR_INCOMPATIBLEAPIVERSION          = &H8000000C???
%LINEERR_INCOMPATIBLEEXTVERSION          = &H8000000D???
%LINEERR_INIFILECORRUPT                  = &H8000000E???
%LINEERR_INUSE                           = &H8000000F???
%LINEERR_INVALADDRESS                    = &H80000010???
%LINEERR_INVALADDRESSID                  = &H80000011???
%LINEERR_INVALADDRESSMODE                = &H80000012???
%LINEERR_INVALADDRESSSTATE               = &H80000013???
%LINEERR_INVALAPPHANDLE                  = &H80000014???
%LINEERR_INVALAPPNAME                    = &H80000015???
%LINEERR_INVALBEARERMODE                 = &H80000016???
%LINEERR_INVALCALLCOMPLMODE              = &H80000017???
%LINEERR_INVALCALLHANDLE                 = &H80000018???
%LINEERR_INVALCALLPARAMS                 = &H80000019???
%LINEERR_INVALCALLPRIVILEGE              = &H8000001A???
%LINEERR_INVALCALLSELECT                 = &H8000001B???
%LINEERR_INVALCALLSTATE                  = &H8000001C???
%LINEERR_INVALCALLSTATELIST              = &H8000001D???
%LINEERR_INVALCARD                       = &H8000001E???
%LINEERR_INVALCOMPLETIONID               = &H8000001F???
%LINEERR_INVALCONFCALLHANDLE             = &H80000020???
%LINEERR_INVALCONSULTCALLHANDLE          = &H80000021???
%LINEERR_INVALCOUNTRYCODE                = &H80000022???
%LINEERR_INVALDEVICECLASS                = &H80000023???
%LINEERR_INVALDEVICEHANDLE               = &H80000024???
%LINEERR_INVALDIALPARAMS                 = &H80000025???
%LINEERR_INVALDIGITLIST                  = &H80000026???
%LINEERR_INVALDIGITMODE                  = &H80000027???
%LINEERR_INVALDIGITS                     = &H80000028???
%LINEERR_INVALEXTVERSION                 = &H80000029???
%LINEERR_INVALGROUPID                    = &H8000002A???
%LINEERR_INVALLINEHANDLE                 = &H8000002B???
%LINEERR_INVALLINESTATE                  = &H8000002C???
%LINEERR_INVALLOCATION                   = &H8000002D???
%LINEERR_INVALMEDIALIST                  = &H8000002E???
%LINEERR_INVALMEDIAMODE                  = &H8000002F???
%LINEERR_INVALMESSAGEID                  = &H80000030???
%LINEERR_INVALPARAM                      = &H80000032???
%LINEERR_INVALPARKID                     = &H80000033???
%LINEERR_INVALPARKMODE                   = &H80000034???
%LINEERR_INVALPOINTER                    = &H80000035???
%LINEERR_INVALPRIVSELECT                 = &H80000036???
%LINEERR_INVALRATE                       = &H80000037???
%LINEERR_INVALREQUESTMODE                = &H80000038???
%LINEERR_INVALTERMINALID                 = &H80000039???
%LINEERR_INVALTERMINALMODE               = &H8000003A???
%LINEERR_INVALTIMEOUT                    = &H8000003B???
%LINEERR_INVALTONE                       = &H8000003C???
%LINEERR_INVALTONELIST                   = &H8000003D???
%LINEERR_INVALTONEMODE                   = &H8000003E???
%LINEERR_INVALTRANSFERMODE               = &H8000003F???
%LINEERR_LINEMAPPERFAILED                = &H80000040???
%LINEERR_NOCONFERENCE                    = &H80000041???
%LINEERR_NODEVICE                        = &H80000042???
%LINEERR_NODRIVER                        = &H80000043???
%LINEERR_NOMEM                           = &H80000044???
%LINEERR_NOREQUEST                       = &H80000045???
%LINEERR_NOTOWNER                        = &H80000046???
%LINEERR_NOTREGISTERED                   = &H80000047???
%LINEERR_OPERATIONFAILED                 = &H80000048???
%LINEERR_OPERATIONUNAVAIL                = &H80000049???
%LINEERR_RATEUNAVAIL                     = &H8000004A???
%LINEERR_RESOURCEUNAVAIL                 = &H8000004B???
%LINEERR_REQUESTOVERRUN                  = &H8000004C???
%LINEERR_STRUCTURETOOSMALL               = &H8000004D???
%LINEERR_TARGETNOTFOUND                  = &H8000004E???
%LINEERR_TARGETSELF                      = &H8000004F???
%LINEERR_UNINITIALIZED                   = &H80000050???
%LINEERR_USERUSERINFOTOOBIG              = &H80000051???
%LINEERR_REINIT                          = &H80000052???
%LINEERR_ADDRESSBLOCKED                  = &H80000053???
%LINEERR_BILLINGREJECTED                 = &H80000054???
%LINEERR_INVALFEATURE                    = &H80000055???
%LINEERR_NOMULTIPLEINSTANCE              = &H80000056???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEERR_INVALAGENTID                    = &H80000057???      ' // TAPI v2.0
%LINEERR_INVALAGENTGROUP                 = &H80000058???      ' // TAPI v2.0
%LINEERR_INVALPASSWORD                   = &H80000059???      ' // TAPI v2.0
%LINEERR_INVALAGENTSTATE                 = &H8000005A???      ' // TAPI v2.0
%LINEERR_INVALAGENTACTIVITY              = &H8000005B???      ' // TAPI v2.0
%LINEERR_DIALVOICEDETECT                 = &H8000005C???      ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINEERR_USERCANCELLED                   = &H8000005D???      ' // TAPI v2.2
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINEERR_INVALADDRESSTYPE                = &H8000005E???      ' // TAPI v3.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINEERR_INVALAGENTSESSIONSTATE          = &H8000005F???      ' // TAPI v2.2
%LINEERR_DISCONNECTED                    = &H80000060???
%LINEERR_SERVICE_NOT_RUNNING             = &H80000061???
#ENDIF

%LINEFEATURE_DEVSPECIFIC                 = &H00000001???
%LINEFEATURE_DEVSPECIFICFEAT             = &H00000002???
%LINEFEATURE_FORWARD                     = &H00000004???
%LINEFEATURE_MAKECALL                    = &H00000008???
%LINEFEATURE_SETMEDIACONTROL             = &H00000010???
%LINEFEATURE_SETTERMINAL                 = &H00000020???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEFEATURE_SETDEVSTATUS                = &H00000040???      ' // TAPI v2.0
%LINEFEATURE_FORWARDFWD                  = &H00000080???      ' // TAPI v2.0
%LINEFEATURE_FORWARDDND                  = &H00000100???      ' // TAPI v2.0
#ENDIF

%LINEFORWARDMODE_UNCOND                  = &H00000001???
%LINEFORWARDMODE_UNCONDINTERNAL          = &H00000002???
%LINEFORWARDMODE_UNCONDEXTERNAL          = &H00000004???
%LINEFORWARDMODE_UNCONDSPECIFIC          = &H00000008???
%LINEFORWARDMODE_BUSY                    = &H00000010???
%LINEFORWARDMODE_BUSYINTERNAL            = &H00000020???
%LINEFORWARDMODE_BUSYEXTERNAL            = &H00000040???
%LINEFORWARDMODE_BUSYSPECIFIC            = &H00000080???
%LINEFORWARDMODE_NOANSW                  = &H00000100???
%LINEFORWARDMODE_NOANSWINTERNAL          = &H00000200???
%LINEFORWARDMODE_NOANSWEXTERNAL          = &H00000400???
%LINEFORWARDMODE_NOANSWSPECIFIC          = &H00000800???
%LINEFORWARDMODE_BUSYNA                  = &H00001000???
%LINEFORWARDMODE_BUSYNAINTERNAL          = &H00002000???
%LINEFORWARDMODE_BUSYNAEXTERNAL          = &H00004000???
%LINEFORWARDMODE_BUSYNASPECIFIC          = &H00008000???
%LINEFORWARDMODE_UNKNOWN                 = &H00010000???      ' // TAPI v1.4
%LINEFORWARDMODE_UNAVAIL                 = &H00020000???      ' // TAPI v1.4

%LINEGATHERTERM_BUFFERFULL               = &H00000001???
%LINEGATHERTERM_TERMDIGIT                = &H00000002???
%LINEGATHERTERM_FIRSTTIMEOUT             = &H00000004???
%LINEGATHERTERM_INTERTIMEOUT             = &H00000008???
%LINEGATHERTERM_CANCEL                   = &H00000010???

%LINEGENERATETERM_DONE                   = &H00000001???
%LINEGENERATETERM_CANCEL                 = &H00000002???

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ' //
' ' // These constants are mutually exclusive - there's no way to specify more
' ' // than one at a time (and it doesn't make sense, either) so they're
' ' // ordinal rather than bits.
' ' //
%LINEINITIALIZEEXOPTION_USEHIDDENWINDOW      = &H00000001???  ' // TAPI v2.0
%LINEINITIALIZEEXOPTION_USEEVENT             = &H00000002???  ' // TAPI v2.0
%LINEINITIALIZEEXOPTION_USECOMPLETIONPORT    = &H00000003???  ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINEINITIALIZEEXOPTION_CALLHUBTRACKING      = &H80000000???  ' // TAPI v3.0
#ENDIF

%LINELOCATIONOPTION_PULSEDIAL            = &H00000001???      ' // TAPI v1.4

%LINEMAPPER                              = &HFFFFFFFF???

%LINEMEDIACONTROL_NONE                   = &H00000001???
%LINEMEDIACONTROL_START                  = &H00000002???
%LINEMEDIACONTROL_RESET                  = &H00000004???
%LINEMEDIACONTROL_PAUSE                  = &H00000008???
%LINEMEDIACONTROL_RESUME                 = &H00000010???
%LINEMEDIACONTROL_RATEUP                 = &H00000020???
%LINEMEDIACONTROL_RATEDOWN               = &H00000040???
%LINEMEDIACONTROL_RATENORMAL             = &H00000080???
%LINEMEDIACONTROL_VOLUMEUP               = &H00000100???
%LINEMEDIACONTROL_VOLUMEDOWN             = &H00000200???
%LINEMEDIACONTROL_VOLUMENORMAL           = &H00000400???

%LINEMEDIAMODE_UNKNOWN                   = &H00000002???
%LINEMEDIAMODE_INTERACTIVEVOICE          = &H00000004???
%LINEMEDIAMODE_AUTOMATEDVOICE            = &H00000008???
%LINEMEDIAMODE_DATAMODEM                 = &H00000010???
%LINEMEDIAMODE_G3FAX                     = &H00000020???
%LINEMEDIAMODE_TDD                       = &H00000040???
%LINEMEDIAMODE_G4FAX                     = &H00000080???
%LINEMEDIAMODE_DIGITALDATA               = &H00000100???
%LINEMEDIAMODE_TELETEX                   = &H00000200???
%LINEMEDIAMODE_VIDEOTEX                  = &H00000400???
%LINEMEDIAMODE_TELEX                     = &H00000800???
%LINEMEDIAMODE_MIXED                     = &H00001000???
%LINEMEDIAMODE_ADSI                      = &H00002000???
%LINEMEDIAMODE_VOICEVIEW                 = &H00004000???      ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020001
%LINEMEDIAMODE_VIDEO                     = &H00008000???      ' // TAPI v2.1
#ENDIF
%LAST_LINEMEDIAMODE                      = &H00008000???

%LINEOFFERINGMODE_ACTIVE                 = &H00000001???      ' // TAPI v1.4
%LINEOFFERINGMODE_INACTIVE               = &H00000002???      ' // TAPI v1.4

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEOPENOPTION_SINGLEADDRESS            = &H80000000???      ' // TAPI v2.0
%LINEOPENOPTION_PROXY                    = &H40000000???      ' // TAPI v2.0
#ENDIF

%LINEPARKMODE_DIRECTED                   = &H00000001???
%LINEPARKMODE_NONDIRECTED                = &H00000002???

#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINEPROXYREQUEST_SETAGENTGROUP          = &H00000001???      ' // TAPI v2.0
%LINEPROXYREQUEST_SETAGENTSTATE          = &H00000002???      ' // TAPI v2.0
%LINEPROXYREQUEST_SETAGENTACTIVITY       = &H00000003???      ' // TAPI v2.0
%LINEPROXYREQUEST_GETAGENTCAPS           = &H00000004???      ' // TAPI v2.0
%LINEPROXYREQUEST_GETAGENTSTATUS         = &H00000005???      ' // TAPI v2.0
%LINEPROXYREQUEST_AGENTSPECIFIC          = &H00000006???      ' // TAPI v2.0
%LINEPROXYREQUEST_GETAGENTACTIVITYLIST   = &H00000007???      ' // TAPI v2.0
%LINEPROXYREQUEST_GETAGENTGROUPLIST      = &H00000008???      ' // TAPI v2.0
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020002
%LINEPROXYREQUEST_CREATEAGENT                = &H00000009???  ' // TAPI v2.2
%LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD  = &H0000000A???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETAGENTINFO               = &H0000000B???  ' // TAPI v2.2
%LINEPROXYREQUEST_CREATEAGENTSESSION         = &H0000000C???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETAGENTSESSIONLIST        = &H0000000D???  ' // TAPI v2.2
%LINEPROXYREQUEST_SETAGENTSESSIONSTATE       = &H0000000E???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETAGENTSESSIONINFO        = &H0000000F???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETQUEUELIST               = &H00000010???  ' // TAPI v2.2
%LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD  = &H00000011???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETQUEUEINFO               = &H00000012???  ' // TAPI v2.2
%LINEPROXYREQUEST_GETGROUPLIST               = &H00000013???  ' // TAPI v2.2
%LINEPROXYREQUEST_SETAGENTSTATEEX            = &H00000014???  ' // TAPI v2.2
#ENDIF

%LINEREMOVEFROMCONF_NONE                 = &H00000001???
%LINEREMOVEFROMCONF_LAST                 = &H00000002???
%LINEREMOVEFROMCONF_ANY                  = &H00000003???

%LINEREQUESTMODE_MAKECALL                = &H00000001???
%LINEREQUESTMODE_MEDIACALL               = &H00000002???
%LINEREQUESTMODE_DROP                    = &H00000004???
%LAST_LINEREQUESTMODE                    = %LINEREQUESTMODE_MEDIACALL

%LINEROAMMODE_UNKNOWN                    = &H00000001???
%LINEROAMMODE_UNAVAIL                    = &H00000002???
%LINEROAMMODE_HOME                       = &H00000004???
%LINEROAMMODE_ROAMA                      = &H00000008???
%LINEROAMMODE_ROAMB                      = &H00000010???

%LINESPECIALINFO_NOCIRCUIT               = &H00000001???
%LINESPECIALINFO_CUSTIRREG               = &H00000002???
%LINESPECIALINFO_REORDER                 = &H00000004???
%LINESPECIALINFO_UNKNOWN                 = &H00000008???
%LINESPECIALINFO_UNAVAIL                 = &H00000010???

%LINETERMDEV_PHONE                       = &H00000001???
%LINETERMDEV_HEADSET                     = &H00000002???
%LINETERMDEV_SPEAKER                     = &H00000004???

%LINETERMMODE_BUTTONS                    = &H00000001???
%LINETERMMODE_LAMPS                      = &H00000002???
%LINETERMMODE_DISPLAY                    = &H00000004???
%LINETERMMODE_RINGER                     = &H00000008???
%LINETERMMODE_HOOKSWITCH                 = &H00000010???
%LINETERMMODE_MEDIATOLINE                = &H00000020???
%LINETERMMODE_MEDIAFROMLINE              = &H00000040???
%LINETERMMODE_MEDIABIDIRECT              = &H00000080???

%LINETERMSHARING_PRIVATE                 = &H00000001???
%LINETERMSHARING_SHAREDEXCL              = &H00000002???
%LINETERMSHARING_SHAREDCONF              = &H00000004???

%LINETOLLLISTOPTION_ADD                  = &H00000001???
%LINETOLLLISTOPTION_REMOVE               = &H00000002???

%LINETONEMODE_CUSTOM                     = &H00000001???
%LINETONEMODE_RINGBACK                   = &H00000002???
%LINETONEMODE_BUSY                       = &H00000004???
%LINETONEMODE_BEEP                       = &H00000008???
%LINETONEMODE_BILLING                    = &H00000010???

%LINETRANSFERMODE_TRANSFER               = &H00000001???
%LINETRANSFERMODE_CONFERENCE             = &H00000002???

%LINETRANSLATEOPTION_CARDOVERRIDE        = &H00000001???
%LINETRANSLATEOPTION_CANCELCALLWAITING   = &H00000002???      ' // TAPI v1.4
%LINETRANSLATEOPTION_FORCELOCAL          = &H00000004???      ' // TAPI v1.4
%LINETRANSLATEOPTION_FORCELD             = &H00000008???      ' // TAPI v1.4

%LINETRANSLATERESULT_CANONICAL           = &H00000001???
%LINETRANSLATERESULT_INTERNATIONAL       = &H00000002???
%LINETRANSLATERESULT_LONGDISTANCE        = &H00000004???
%LINETRANSLATERESULT_LOCAL               = &H00000008???
%LINETRANSLATERESULT_INTOLLLIST          = &H00000010???
%LINETRANSLATERESULT_NOTINTOLLLIST       = &H00000020???
%LINETRANSLATERESULT_DIALBILLING         = &H00000040???
%LINETRANSLATERESULT_DIALQUIET           = &H00000080???
%LINETRANSLATERESULT_DIALDIALTONE        = &H00000100???
%LINETRANSLATERESULT_DIALPROMPT          = &H00000200???
#IF %TAPI_CURRENT_VERSION >= &H00020000
%LINETRANSLATERESULT_VOICEDETECT         = &H00000400???      ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
%LINETRANSLATERESULT_NOTRANSLATION       = &H00000800???      ' // TAPI v3.0
#ENDIF

%PHONEBUTTONFUNCTION_UNKNOWN             = &H00000000???
%PHONEBUTTONFUNCTION_CONFERENCE          = &H00000001???
%PHONEBUTTONFUNCTION_TRANSFER            = &H00000002???
%PHONEBUTTONFUNCTION_DROP                = &H00000003???
%PHONEBUTTONFUNCTION_HOLD                = &H00000004???
%PHONEBUTTONFUNCTION_RECALL              = &H00000005???
%PHONEBUTTONFUNCTION_DISCONNECT          = &H00000006???
%PHONEBUTTONFUNCTION_CONNECT             = &H00000007???
%PHONEBUTTONFUNCTION_MSGWAITON           = &H00000008???
%PHONEBUTTONFUNCTION_MSGWAITOFF          = &H00000009???
%PHONEBUTTONFUNCTION_SELECTRING          = &H0000000A???
%PHONEBUTTONFUNCTION_ABBREVDIAL          = &H0000000B???
%PHONEBUTTONFUNCTION_FORWARD             = &H0000000C???
%PHONEBUTTONFUNCTION_PICKUP              = &H0000000D???
%PHONEBUTTONFUNCTION_RINGAGAIN           = &H0000000E???
%PHONEBUTTONFUNCTION_PARK                = &H0000000F???
%PHONEBUTTONFUNCTION_REJECT              = &H00000010???
%PHONEBUTTONFUNCTION_REDIRECT            = &H00000011???
%PHONEBUTTONFUNCTION_MUTE                = &H00000012???
%PHONEBUTTONFUNCTION_VOLUMEUP            = &H00000013???
%PHONEBUTTONFUNCTION_VOLUMEDOWN          = &H00000014???
%PHONEBUTTONFUNCTION_SPEAKERON           = &H00000015???
%PHONEBUTTONFUNCTION_SPEAKEROFF          = &H00000016???
%PHONEBUTTONFUNCTION_FLASH               = &H00000017???
%PHONEBUTTONFUNCTION_DATAON              = &H00000018???
%PHONEBUTTONFUNCTION_DATAOFF             = &H00000019???
%PHONEBUTTONFUNCTION_DONOTDISTURB        = &H0000001A???
%PHONEBUTTONFUNCTION_INTERCOM            = &H0000001B???
%PHONEBUTTONFUNCTION_BRIDGEDAPP          = &H0000001C???
%PHONEBUTTONFUNCTION_BUSY                = &H0000001D???
%PHONEBUTTONFUNCTION_CALLAPP             = &H0000001E???
%PHONEBUTTONFUNCTION_DATETIME            = &H0000001F???
%PHONEBUTTONFUNCTION_DIRECTORY           = &H00000020???
%PHONEBUTTONFUNCTION_COVER               = &H00000021???
%PHONEBUTTONFUNCTION_CALLID              = &H00000022???
%PHONEBUTTONFUNCTION_LASTNUM             = &H00000023???
%PHONEBUTTONFUNCTION_NIGHTSRV            = &H00000024???
%PHONEBUTTONFUNCTION_SENDCALLS           = &H00000025???
%PHONEBUTTONFUNCTION_MSGINDICATOR        = &H00000026???
%PHONEBUTTONFUNCTION_REPDIAL             = &H00000027???
%PHONEBUTTONFUNCTION_SETREPDIAL          = &H00000028???
%PHONEBUTTONFUNCTION_SYSTEMSPEED         = &H00000029???
%PHONEBUTTONFUNCTION_STATIONSPEED        = &H0000002A???
%PHONEBUTTONFUNCTION_CAMPON              = &H0000002B???
%PHONEBUTTONFUNCTION_SAVEREPEAT          = &H0000002C???
%PHONEBUTTONFUNCTION_QUEUECALL           = &H0000002D???
%PHONEBUTTONFUNCTION_NONE                = &H0000002E???
#IF %TAPI_CURRENT_VERSION >= &H00030001
%PHONEBUTTONFUNCTION_SEND                = &H0000002F???      ' // TAPI v3.1
#ENDIF

%PHONEBUTTONMODE_DUMMY                   = &H00000001???
%PHONEBUTTONMODE_CALL                    = &H00000002???
%PHONEBUTTONMODE_FEATURE                 = &H00000004???
%PHONEBUTTONMODE_KEYPAD                  = &H00000008???
%PHONEBUTTONMODE_LOCAL                   = &H00000010???
%PHONEBUTTONMODE_DISPLAY                 = &H00000020???

%PHONEBUTTONSTATE_UP                     = &H00000001???
%PHONEBUTTONSTATE_DOWN                   = &H00000002???
%PHONEBUTTONSTATE_UNKNOWN                = &H00000004???      ' // TAPI v1.4
%PHONEBUTTONSTATE_UNAVAIL                = &H00000008???      ' // TAPI v1.4

%PHONEERR_ALLOCATED                      = &H90000001???
%PHONEERR_BADDEVICEID                    = &H90000002???
%PHONEERR_INCOMPATIBLEAPIVERSION         = &H90000003???
%PHONEERR_INCOMPATIBLEEXTVERSION         = &H90000004???
%PHONEERR_INIFILECORRUPT                 = &H90000005???
%PHONEERR_INUSE                          = &H90000006???
%PHONEERR_INVALAPPHANDLE                 = &H90000007???
%PHONEERR_INVALAPPNAME                   = &H90000008???
%PHONEERR_INVALBUTTONLAMPID              = &H90000009???
%PHONEERR_INVALBUTTONMODE                = &H9000000A???
%PHONEERR_INVALBUTTONSTATE               = &H9000000B???
%PHONEERR_INVALDATAID                    = &H9000000C???
%PHONEERR_INVALDEVICECLASS               = &H9000000D???
%PHONEERR_INVALEXTVERSION                = &H9000000E???
%PHONEERR_INVALHOOKSWITCHDEV             = &H9000000F???
%PHONEERR_INVALHOOKSWITCHMODE            = &H90000010???
%PHONEERR_INVALLAMPMODE                  = &H90000011???
%PHONEERR_INVALPARAM                     = &H90000012???
%PHONEERR_INVALPHONEHANDLE               = &H90000013???
%PHONEERR_INVALPHONESTATE                = &H90000014???
%PHONEERR_INVALPOINTER                   = &H90000015???
%PHONEERR_INVALPRIVILEGE                 = &H90000016???
%PHONEERR_INVALRINGMODE                  = &H90000017???
%PHONEERR_NODEVICE                       = &H90000018???
%PHONEERR_NODRIVER                       = &H90000019???
%PHONEERR_NOMEM                          = &H9000001A???
%PHONEERR_NOTOWNER                       = &H9000001B???
%PHONEERR_OPERATIONFAILED                = &H9000001C???
%PHONEERR_OPERATIONUNAVAIL               = &H9000001D???
%PHONEERR_RESOURCEUNAVAIL                = &H9000001F???
%PHONEERR_REQUESTOVERRUN                 = &H90000020???
%PHONEERR_STRUCTURETOOSMALL              = &H90000021???
%PHONEERR_UNINITIALIZED                  = &H90000022???
%PHONEERR_REINIT                         = &H90000023???
%PHONEERR_DISCONNECTED                   = &H90000024???
%PHONEERR_SERVICE_NOT_RUNNING            = &H90000025???

#IF %TAPI_CURRENT_VERSION >= &H00020000
%PHONEFEATURE_GETBUTTONINFO              = &H00000001???      ' // TAPI v2.0
%PHONEFEATURE_GETDATA                    = &H00000002???      ' // TAPI v2.0
%PHONEFEATURE_GETDISPLAY                 = &H00000004???      ' // TAPI v2.0
%PHONEFEATURE_GETGAINHANDSET             = &H00000008???      ' // TAPI v2.0
%PHONEFEATURE_GETGAINSPEAKER             = &H00000010???      ' // TAPI v2.0
%PHONEFEATURE_GETGAINHEADSET             = &H00000020???      ' // TAPI v2.0
%PHONEFEATURE_GETHOOKSWITCHHANDSET       = &H00000040???      ' // TAPI v2.0
%PHONEFEATURE_GETHOOKSWITCHSPEAKER       = &H00000080???      ' // TAPI v2.0
%PHONEFEATURE_GETHOOKSWITCHHEADSET       = &H00000100???      ' // TAPI v2.0
%PHONEFEATURE_GETLAMP                    = &H00000200???      ' // TAPI v2.0
%PHONEFEATURE_GETRING                    = &H00000400???      ' // TAPI v2.0
%PHONEFEATURE_GETVOLUMEHANDSET           = &H00000800???      ' // TAPI v2.0
%PHONEFEATURE_GETVOLUMESPEAKER           = &H00001000???      ' // TAPI v2.0
%PHONEFEATURE_GETVOLUMEHEADSET           = &H00002000???      ' // TAPI v2.0
%PHONEFEATURE_SETBUTTONINFO              = &H00004000???      ' // TAPI v2.0
%PHONEFEATURE_SETDATA                    = &H00008000???      ' // TAPI v2.0
%PHONEFEATURE_SETDISPLAY                 = &H00010000???      ' // TAPI v2.0
%PHONEFEATURE_SETGAINHANDSET             = &H00020000???      ' // TAPI v2.0
%PHONEFEATURE_SETGAINSPEAKER             = &H00040000???      ' // TAPI v2.0
%PHONEFEATURE_SETGAINHEADSET             = &H00080000???      ' // TAPI v2.0
%PHONEFEATURE_SETHOOKSWITCHHANDSET       = &H00100000???      ' // TAPI v2.0
%PHONEFEATURE_SETHOOKSWITCHSPEAKER       = &H00200000???      ' // TAPI v2.0
%PHONEFEATURE_SETHOOKSWITCHHEADSET       = &H00400000???      ' // TAPI v2.0
%PHONEFEATURE_SETLAMP                    = &H00800000???      ' // TAPI v2.0
%PHONEFEATURE_SETRING                    = &H01000000???      ' // TAPI v2.0
%PHONEFEATURE_SETVOLUMEHANDSET           = &H02000000???      ' // TAPI v2.0
%PHONEFEATURE_SETVOLUMESPEAKER           = &H04000000???      ' // TAPI v2.0
%PHONEFEATURE_SETVOLUMEHEADSET           = &H08000000???      ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030001
%PHONEFEATURE_GENERICPHONE               = &H10000000???      ' // TAPI v3.1
#ENDIF

%PHONEHOOKSWITCHDEV_HANDSET              = &H00000001???
%PHONEHOOKSWITCHDEV_SPEAKER              = &H00000002???
%PHONEHOOKSWITCHDEV_HEADSET              = &H00000004???

%PHONEHOOKSWITCHMODE_ONHOOK              = &H00000001???
%PHONEHOOKSWITCHMODE_MIC                 = &H00000002???
%PHONEHOOKSWITCHMODE_SPEAKER             = &H00000004???
%PHONEHOOKSWITCHMODE_MICSPEAKER          = &H00000008???
%PHONEHOOKSWITCHMODE_UNKNOWN             = &H00000010???

#IF %TAPI_CURRENT_VERSION >= &H00020000
%PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW     = &H00000001???  ' // TAPI v2.0
%PHONEINITIALIZEEXOPTION_USEEVENT            = &H00000002???  ' // TAPI v2.0
%PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT   = &H00000003???  ' // TAPI v2.0
#ENDIF

%PHONELAMPMODE_DUMMY                     = &H00000001???
%PHONELAMPMODE_OFF                       = &H00000002???
%PHONELAMPMODE_STEADY                    = &H00000004???
%PHONELAMPMODE_WINK                      = &H00000008???
%PHONELAMPMODE_FLASH                     = &H00000010???
%PHONELAMPMODE_FLUTTER                   = &H00000020???
%PHONELAMPMODE_BROKENFLUTTER             = &H00000040???
%PHONELAMPMODE_UNKNOWN                   = &H00000080???

%PHONEPRIVILEGE_MONITOR                  = &H00000001???
%PHONEPRIVILEGE_OWNER                    = &H00000002???

%PHONESTATE_OTHER                        = &H00000001???
%PHONESTATE_CONNECTED                    = &H00000002???
%PHONESTATE_DISCONNECTED                 = &H00000004???
%PHONESTATE_OWNER                        = &H00000008???
%PHONESTATE_MONITORS                     = &H00000010???
%PHONESTATE_DISPLAY                      = &H00000020???
%PHONESTATE_LAMP                         = &H00000040???
%PHONESTATE_RINGMODE                     = &H00000080???
%PHONESTATE_RINGVOLUME                   = &H00000100???
%PHONESTATE_HANDSETHOOKSWITCH            = &H00000200???
%PHONESTATE_HANDSETVOLUME                = &H00000400???
%PHONESTATE_HANDSETGAIN                  = &H00000800???
%PHONESTATE_SPEAKERHOOKSWITCH            = &H00001000???
%PHONESTATE_SPEAKERVOLUME                = &H00002000???
%PHONESTATE_SPEAKERGAIN                  = &H00004000???
%PHONESTATE_HEADSETHOOKSWITCH            = &H00008000???
%PHONESTATE_HEADSETVOLUME                = &H00010000???
%PHONESTATE_HEADSETGAIN                  = &H00020000???
%PHONESTATE_SUSPEND                      = &H00040000???
%PHONESTATE_RESUME                       = &H00080000???
%PHONESTATE_DEVSPECIFIC                  = &H00100000???
%PHONESTATE_REINIT                       = &H00200000???
%PHONESTATE_CAPSCHANGE                   = &H00400000???      ' // TAPI v1.4
%PHONESTATE_REMOVED                      = &H00800000???      ' // TAPI v1.4

%PHONESTATUSFLAGS_CONNECTED              = &H00000001???
%PHONESTATUSFLAGS_SUSPENDED              = &H00000002???

%STRINGFORMAT_ASCII                      = &H00000001???
%STRINGFORMAT_DBCS                       = &H00000002???
%STRINGFORMAT_UNICODE                    = &H00000003???
%STRINGFORMAT_BINARY                     = &H00000004???

%TAPI_REPLY                              = %WM_USER + 99

%TAPIERR_CONNECTED                       = 0&
%TAPIERR_DROPPED                         = -1&
%TAPIERR_NOREQUESTRECIPIENT              = -2&
%TAPIERR_REQUESTQUEUEFULL                = -3&
%TAPIERR_INVALDESTADDRESS                = -4&
%TAPIERR_INVALWINDOWHANDLE               = -5&
%TAPIERR_INVALDEVICECLASS                = -6&
%TAPIERR_INVALDEVICEID                   = -7&
%TAPIERR_DEVICECLASSUNAVAIL              = -8&
%TAPIERR_DEVICEIDUNAVAIL                 = -9&
%TAPIERR_DEVICEINUSE                     = -10&
%TAPIERR_DESTBUSY                        = -11&
%TAPIERR_DESTNOANSWER                    = -12&
%TAPIERR_DESTUNAVAIL                     = -13&
%TAPIERR_UNKNOWNWINHANDLE                = -14&
%TAPIERR_UNKNOWNREQUESTID                = -15&
%TAPIERR_REQUESTFAILED                   = -16&
%TAPIERR_REQUESTCANCELLED                = -17&
%TAPIERR_INVALPOINTER                    = -18&
%TAPIERR_NOTADMIN                        = -19&
%TAPIERR_MMCWRITELOCKED                  = -20&
%TAPIERR_PROVIDERALREADYINSTALLED        = -21&
%TAPIERR_SCP_ALREADY_EXISTS              = -22&
%TAPIERR_SCP_DOES_NOT_EXIST              = -23&


%TAPIMAXDESTADDRESSSIZE                  = 80&
%TAPIMAXAPPNAMESIZE                      = 40&
%TAPIMAXCALLEDPARTYSIZE                  = 40&
%TAPIMAXCOMMENTSIZE                      = 80&
%TAPIMAXDEVICECLASSSIZE                  = 40&
%TAPIMAXDEVICEIDSIZE                     = 40&

' ========================================================================================
' The LINEADDRESSCAPS structure describes the capabilities of a specified address. The
' lineGetAddressCaps function and the TSPI_lineGetAddressCaps function return the
' LINEADDRESSCAPS structure.
' ========================================================================================

' // Size = 228 bytes
TYPE LINEADDRESSCAPS DWORD
   dwTotalSize                    AS DWORD
   dwNeededSize                   AS DWORD
   dwUsedSize                     AS DWORD
   dwLineDeviceID                 AS DWORD
   dwAddressSize                  AS DWORD
   dwAddressOffset                AS DWORD
   dwDevSpecificSize              AS DWORD
   dwDevSpecificOffset            AS DWORD
   dwAddressSharing               AS DWORD
   dwAddressStates                AS DWORD
   dwCallInfoStates               AS DWORD
   dwCallerIDFlags                AS DWORD
   dwCalledIDFlags                AS DWORD
   dwConnectedIDFlags             AS DWORD
   dwRedirectionIDFlags           AS DWORD
   dwRedirectingIDFlags           AS DWORD
   dwCallStates                   AS DWORD
   dwDialToneModes                AS DWORD
   dwBusyModes                    AS DWORD
   dwSpecialInfo                  AS DWORD
   dwDisconnectModes              AS DWORD
   dwMaxNumActiveCalls            AS DWORD
   dwMaxNumOnHoldCalls            AS DWORD
   dwMaxNumOnHoldPendingCalls     AS DWORD
   dwMaxNumConference             AS DWORD
   dwMaxNumTransConf              AS DWORD
   dwAddrCapFlags                 AS DWORD
   dwCallFeatures                 AS DWORD
   dwRemoveFromConfCaps           AS DWORD
   dwRemoveFromConfState          AS DWORD
   dwTransferModes                AS DWORD
   dwParkModes                    AS DWORD
   dwForwardModes                 AS DWORD
   dwMaxForwardEntries            AS DWORD
   dwMaxSpecificEntries           AS DWORD
   dwMinFwdNumRings               AS DWORD
   dwMaxFwdNumRings               AS DWORD
   dwMaxCallCompletions           AS DWORD
   dwCallCompletionConds          AS DWORD
   dwCallCompletionModes          AS DWORD
   dwNumCompletionMessages        AS DWORD
   dwCompletionMsgTextEntrySize   AS DWORD
   dwCompletionMsgTextSize        AS DWORD
   dwCompletionMsgTextOffset      AS DWORD
   dwAddressFeatures              AS DWORD   ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwPredictiveAutoTransferStates AS DWORD   ' // TAPI v2.0
   dwNumCallTreatments            AS DWORD   ' // TAPI v2.0
   dwCallTreatmentListSize        AS DWORD   ' // TAPI v2.0
   dwCallTreatmentListOffset      AS DWORD   ' // TAPI v2.0
   dwDeviceClassesSize            AS DWORD   ' // TAPI v2.0
   dwDeviceClassesOffset          AS DWORD   ' // TAPI v2.0
   dwMaxCallDataSize              AS DWORD   ' // TAPI v2.0
   dwCallFeatures2                AS DWORD   ' // TAPI v2.0
   dwMaxNoAnswerTimeout           AS DWORD   ' // TAPI v2.0
   dwConnectedModes               AS DWORD   ' // TAPI v2.0
   dwOfferingModes                AS DWORD   ' // TAPI v2.0
   dwAvailableMediaModes          AS DWORD   ' // TAPI v2.0
#ENDIF
END TYPE

' ========================================================================================
' The LINEADDRESSSTATUS structure describes the current status of an address. The
' lineGetAddressStatus function and the TSPI_lineGetAddressStatus function return the
' LINEADDRESSSTATUS structure.
' ========================================================================================

' // Size = 64 bytes
TYPE LINEADDRESSSTATUS DWORD
   dwTotalSize           AS DWORD
   dwNeededSize          AS DWORD
   dwUsedSize            AS DWORD
   dwNumInUse            AS DWORD
   dwNumActiveCalls      AS DWORD
   dwNumOnHoldCalls      AS DWORD
   dwNumOnHoldPendCalls  AS DWORD
   dwAddressFeatures     AS DWORD
   dwNumRingsNoAnswer    AS DWORD
   dwForwardNumEntries   AS DWORD
   dwForwardSize         AS DWORD
   dwForwardOffset       AS DWORD
   dwTerminalModesSize   AS DWORD
   dwTerminalModesOffset AS DWORD
   dwDevSpecificSize     AS DWORD
   dwDevSpecificOffset   AS DWORD
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The LINEAGENTACTIVITYENTRY structure describes a single ACD agent activity. The
' LINEAGENTACTIVITYLIST structure can contain an array of LINEAGENTACTIVITYENTRY
' structures.
' ========================================================================================

' // Size = 12 bytes
TYPE LINEAGENTACTIVITYENTRY DWORD
   dwID         AS DWORD   ' // TAPI v2.0
   dwNameSize   AS DWORD   ' // TAPI v2.0
   dwNameOffset AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAGENTACTIVITYLIST structure describes a list of ACD agent activities. This
' structure can contain an array of LINEAGENTACTIVITYENTRY structures. The
' lineGetAgentActivityList function returns the LINEAGENTACTIVITYLIST structure.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEAGENTACTIVITYLIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.0
   dwNeededSize AS DWORD   ' // TAPI v2.0
   dwUsedSize   AS DWORD   ' // TAPI v2.0
   dwNumEntries AS DWORD   ' // TAPI v2.0
   dwListSize   AS DWORD   ' // TAPI v2.0
   dwListOffset AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAGENTCAPS structure describes the capabilities of an ACD agent. The
' lineGetAgentCaps function returns the LINEAGENTCAPS structure.
' ========================================================================================

' // Size = 72 bytes
TYPE LINEAGENTCAPS DWORD
   dwTotalSize                  AS DWORD   ' // TAPI v2.0
   dwNeededSize                 AS DWORD   ' // TAPI v2.0
   dwUsedSize                   AS DWORD   ' // TAPI v2.0
   dwAgentHandlerInfoSize       AS DWORD   ' // TAPI v2.0
   dwAgentHandlerInfoOffset     AS DWORD   ' // TAPI v2.0
   dwCapsVersion                AS DWORD   ' // TAPI v2.0
   dwFeatures                   AS DWORD   ' // TAPI v2.0
   dwStates                     AS DWORD   ' // TAPI v2.0
   dwNextStates                 AS DWORD   ' // TAPI v2.0
   dwMaxNumGroupEntries         AS DWORD   ' // TAPI v2.0
   dwAgentStatusMessages        AS DWORD   ' // TAPI v2.0
   dwNumAgentExtensionIDs       AS DWORD   ' // TAPI v2.0
   dwAgentExtensionIDListSize   AS DWORD   ' // TAPI v2.0
   dwAgentExtensionIDListOffset AS DWORD   ' // TAPI v2.0
#IF %TAPI_CURRENT_VERSION >= &H00020002
   ProxyGUID                    AS GUID    ' // TAPI v2.2
#ENDIF
END TYPE

'typedef struct lineagentgroupentry_tag
'{
'    struct
'    {
'         dwGroupID1 AS DWORD                                     ' // TAPI v2.0
'         dwGroupID2 AS DWORD                                     ' // TAPI v2.0
'         dwGroupID3 AS DWORD                                     ' // TAPI v2.0
'         dwGroupID4 AS DWORD                                     ' // TAPI v2.0

'    } GroupID AS DWORD

'         dwNameSize AS DWORD                                     ' // TAPI v2.0
'         dwNameOffset AS DWORD                                   ' // TAPI v2.0

'} LINEAGENTGROUPENTRY, *LPLINEAGENTGROUPENTRY AS DWORD

' // Size = 16 bytes
TYPE GroupID DWORD
   dwGroupID1 AS DWORD   ' // TAPI v2.0
   dwGroupID2 AS DWORD   ' // TAPI v2.0
   dwGroupID3 AS DWORD   ' // TAPI v2.0
   dwGroupID4 AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAGENTGROUPENTRY structure provides information on ACD agent groups. The
' LINEAGENTGROUPLIST structure can contain an array of LINEAGENTGROUPENTRY structures.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEAGENTGROUPENTRY DWORD
   GroupID
   dwNameSize   AS DWORD   ' // TAPI v2.0
   dwNameOffset AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAGENTGROUPLIST structure describes a list of ACD agent groups. This structure
' can contain an array of LINEAGENTGROUPENTRY structures.
' Multiple functions use the LINEAGENTGROUPLIST structure; these include the
' lineGetAgentGroupList, lineGetGroupList and lineSetAgentGroup functions.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEAGENTGROUPLIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.0
   dwNeededSize AS DWORD   ' // TAPI v2.0
   dwUsedSize   AS DWORD   ' // TAPI v2.0
   dwNumEntries AS DWORD   ' // TAPI v2.0
   dwListSize   AS DWORD   ' // TAPI v2.0
   dwListOffset AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAGENTSTATUS structure describes the current status of an ACD agent. The
' lineGetAgentStatus function returns the LINEAGENTSTATUS structure.
' ========================================================================================

' // Size = 56 bytes
TYPE LINEAGENTSTATUS DWORD
   dwTotalSize       AS DWORD   ' // TAPI v2.0
   dwNeededSize      AS DWORD   ' // TAPI v2.0
   dwUsedSize        AS DWORD   ' // TAPI v2.0
   dwNumEntries      AS DWORD   ' // TAPI v2.0
   dwGroupListSize   AS DWORD   ' // TAPI v2.0
   dwGroupListOffset AS DWORD   ' // TAPI v2.0
   dwState           AS DWORD   ' // TAPI v2.0
   dwNextState       AS DWORD   ' // TAPI v2.0
   dwActivityID      AS DWORD   ' // TAPI v2.0
   dwActivitySize    AS DWORD   ' // TAPI v2.0
   dwActivityOffset  AS DWORD   ' // TAPI v2.0
   dwAgentFeatures   AS DWORD   ' // TAPI v2.0
   dwValidStates     AS DWORD   ' // TAPI v2.0
   dwValidNextStates AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The LINEAPPINFO structure contains information about the application that is currently
' running. The LINEDEVSTATUS structure can contain an array of LINEAPPINFO structures.
' ========================================================================================

' // Size = 40 bytes
TYPE LINEAPPINFO DWORD
   dwMachineNameSize      AS DWORD   ' // TAPI v2.0
   dwMachineNameOffset    AS DWORD   ' // TAPI v2.0
   dwUserNameSize         AS DWORD   ' // TAPI v2.0
   dwUserNameOffset       AS DWORD   ' // TAPI v2.0
   dwModuleFilenameSize   AS DWORD   ' // TAPI v2.0
   dwModuleFilenameOffset AS DWORD   ' // TAPI v2.0
   dwFriendlyNameSize     AS DWORD   ' // TAPI v2.0
   dwFriendlyNameOffset   AS DWORD   ' // TAPI v2.0
   dwMediaModes           AS DWORD   ' // TAPI v2.0
   dwAddressID            AS DWORD   ' // TAPI v2.0
END TYPE
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The LINEAGENTENTRY structure describes an individual ACD agent. The LINEAGENTLIST
' structure can contain an array of LINEAGENTENTRY structures.
' ========================================================================================

' // Size = 28 bytes
TYPE LINEAGENTENTRY DWORD
   hAgent       AS DWORD   ' HAGENT ' // TAPI v2.2
   dwNameSize   AS DWORD   ' // TAPI v2.2
   dwNameOffset AS DWORD   ' // TAPI v2.2
   dwIDSize     AS DWORD   ' // TAPI v2.2
   dwIDOffset   AS DWORD   ' // TAPI v2.2
   dwPINSize    AS DWORD   ' // TAPI v2.2
   dwPINOffset  AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEAGENTLIST structure describes a list of ACD agents. This structure can contain
' an array of LINEAGENTENTRY structures.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEAGENTLIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.2
   dwNeededSize AS DWORD   ' // TAPI v2.2
   dwUsedSize   AS DWORD   ' // TAPI v2.2
   dwNumEntries AS DWORD   ' // TAPI v2.2
   dwListSize   AS DWORD   ' // TAPI v2.2
   dwListOffset AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEAGENTINFO structure contains information about an ACD agent. The
' lineGetAgentInfo function returns the LINEAGENTINFO structure.
' ========================================================================================

' // Size = 56 bytes
TYPE LINEAGENTINFO DWORD
   dwTotalSize             AS DWORD   ' // TAPI v2.2
   dwNeededSize            AS DWORD   ' // TAPI v2.2
   dwUsedSize              AS DWORD   ' // TAPI v2.2
   dwAgentState            AS DWORD   ' // TAPI v2.2
   dwNextAgentState        AS DWORD   ' // TAPI v2.2
   dwMeasurementPeriod     AS DWORD   ' // TAPI v2.2
   cyOverallCallRate       AS CUR     ' CURRENCY ' // TAPI v2.2
   dwNumberOfACDCalls      AS DWORD   ' // TAPI v2.2
   dwNumberOfIncomingCalls AS DWORD   ' // TAPI v2.2
   dwNumberOfOutgoingCalls AS DWORD   ' // TAPI v2.2
   dwTotalACDTalkTime      AS DWORD   ' // TAPI v2.2
   dwTotalACDCallTime      AS DWORD   ' // TAPI v2.2
   dwTotalACDWrapUpTime    AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEAGENTSESSIONENTRY structure describes an ACD agent session.
' The LINEAGENTSESSIONLIST structure can contain an array of LINEAGENTSESSIONENTRY structures.
' ========================================================================================

' // Size = 28 bytes
TYPE LINEAGENTSESSIONENTRY DWORD
   hAgentSession      AS DWORD   ' HAGENTSESSION ' // TAPI v2.2
   hAgent             AS DWORD   ' HAGENT ' // TAPI v2.2
   GroupID            AS GUID    ' // TAPI v2.2
   dwWorkingAddressID AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEAGENTSESSIONLIST structure describes a list of ACD agent sessions. This
' structure can contain an array of LINEAGENTSESSIONENTRY structures. The
' lineGetAgentSessionList function returns the LINEAGENTSESSIONLIST structure.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEAGENTSESSIONLIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.2
   dwNeededSize AS DWORD   ' // TAPI v2.2
   dwUsedSize   AS DWORD   ' // TAPI v2.2
   dwNumEntries AS DWORD   ' // TAPI v2.2
   dwListSize   AS DWORD   ' // TAPI v2.2
   dwListOffset AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEAGENTSESSIONINFO structure contains information about the ACD agent session.
' The lineGetAgentSessionInfo function returns the LINEAGENTSESSIONINFO structure.
' ========================================================================================

' // Size = 76 bytes
TYPE LINEAGENTSESSIONINFO DWORD
   dwTotalSize             AS DWORD   ' // TAPI v2.2
   dwNeededSize            AS DWORD   ' // TAPI v2.2
   dwUsedSize              AS DWORD   ' // TAPI v2.2
   dwAgentSessionState     AS DWORD   ' // TAPI v2.2
   dwNextAgentSessionState AS DWORD   ' // TAPI v2.2
   dateSessionStartTime    AS DOUBLE  ' DATE ' // TAPI v2.2
   dwSessionDuration       AS DWORD   ' // TAPI v2.2
   dwNumberOfCalls         AS DWORD   ' // TAPI v2.2
   dwTotalTalkTime         AS DWORD   ' // TAPI v2.2
   dwAverageTalkTime       AS DWORD   ' // TAPI v2.2
   dwTotalCallTime         AS DWORD   ' // TAPI v2.2
   dwAverageCallTime       AS DWORD   ' // TAPI v2.2
   dwTotalWrapUpTime       AS DWORD   ' // TAPI v2.2
   dwAverageWrapUpTime     AS DWORD   ' // TAPI v2.2
   cyACDCallRate           AS CUR     ' CURRENCY ' // TAPI v2.2
   dwLongestTimeToAnswer   AS DWORD   ' // TAPI v2.2
   dwAverageTimeToAnswer   AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEQUEUEENTRY structure provides the information for a single queue entry. The
' LINEQUEUELIST structure can contain an array of LINEQUEUEENTRY structures. This
' structure requires TAPI 3.0 version negotiation.
' ========================================================================================

' // Size = 12 bytes
TYPE LINEQUEUEENTRY DWORD
   dwQueueID    AS DWORD   ' // TAPI v2.2
   dwNameSize   AS DWORD   ' // TAPI v2.2
   dwNameOffset AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEQUEUELIST structure describes a list of queues. This structure can contain an
' array of LINEQUEUEENTRY structures. The lineGetQueueList function returns the
' LINEQUEUELIST structure. LINEQUEUELIST requires TAPI 3.0 version negotiation.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEQUEUELIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.2
   dwNeededSize AS DWORD   ' // TAPI v2.2
   dwUsedSize   AS DWORD   ' // TAPI v2.2
   dwNumEntries AS DWORD   ' // TAPI v2.2
   dwListSize   AS DWORD   ' // TAPI v2.2
   dwListOffset AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEQUEUEINFO structure provides information about a queue on a line device. The
' lineGetQueueInfo function returns the LINEQUEUEINFO structure. This structure requires
' TAPI 3.0 version negotiation.
' ========================================================================================

' // Size = 52 bytes
TYPE LINEQUEUEINFO DWORD
   dwTotalSize              AS DWORD   ' // TAPI v2.2
   dwNeededSize             AS DWORD   ' // TAPI v2.2
   dwUsedSize               AS DWORD   ' // TAPI v2.2
   dwMeasurementPeriod      AS DWORD   ' // TAPI v2.2
   dwTotalCallsQueued       AS DWORD   ' // TAPI v2.2
   dwCurrentCallsQueued     AS DWORD   ' // TAPI v2.2
   dwTotalCallsAbandoned    AS DWORD   ' // TAPI v2.2
   dwTotalCallsFlowedIn     AS DWORD   ' // TAPI v2.2
   dwTotalCallsFlowedOut    AS DWORD   ' // TAPI v2.2
   dwLongestEverWaitTime    AS DWORD   ' // TAPI v2.2
   dwCurrentLongestWaitTime AS DWORD   ' // TAPI v2.2
   dwAverageWaitTime        AS DWORD   ' // TAPI v2.2
   dwFinalDisposition       AS DWORD   ' // TAPI v2.2
END TYPE

' ========================================================================================
' The LINEPROXYREQUESTLIST structure describes a list of proxy requests. The
' lineGetProxyStatus function returns the LINEPROXYREQUESTLIST structure.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEPROXYREQUESTLIST DWORD
   dwTotalSize  AS DWORD   ' // TAPI v2.2
   dwNeededSize AS DWORD   ' // TAPI v2.2
   dwUsedSize   AS DWORD   ' // TAPI v2.2
   dwNumEntries AS DWORD   ' // TAPI v2.2
   dwListSize   AS DWORD   ' // TAPI v2.2
   dwListOffset AS DWORD   ' // TAPI v2.2
END TYPE
#ENDIF

#IF %TAPI_CURRENT_VERSION >= &H00030000
' ========================================================================================
' The LINECALLHUBTRACKINGINFO structure contains information that reports the type of
' tracking available to a call hub. This structure is exposed only to applications that
' negotiate a TAPI version of 2.2 or higher.
' ========================================================================================

' // Size = 20 bytes
TYPE LINECALLHUBTRACKINGINFO DWORD
   dwTotalSize         AS DWORD ' // TAPI v3.0
   dwNeededSize        AS DWORD ' // TAPI v3.0
   dwUsedSize          AS DWORD ' // TAPI v3.0
   dwAvailableTracking AS DWORD ' // TAPI v3.0
   dwCurrentTracking   AS DWORD ' // TAPI v3.0
END TYPE
#ENDIF

' ========================================================================================
' The LINEDIALPARAMS structure specifies a collection of dialing-related fields. Call the
' lineSetCallParams function or the TSPI_lineSetCallParams function to set parameters for
' a call using the LINEDIALPARAMS structure.
' ========================================================================================

' // Size = 16 bytes
TYPE LINEDIALPARAMS DWORD
   dwDialPause       AS DWORD
   dwDialSpeed       AS DWORD
   dwDigitDuration   AS DWORD
   dwWaitForDialtone AS DWORD
END TYPE

' ========================================================================================
' The LINECALLINFO structure contains information about a call. This information remains
' relatively fixed for the duration of the call. Multiple functions use LINECALLINFO. The
' structure is returned by the lineGetCallInfo function and the TSPI_lineGetCallInfo
' function. If a part of the structure does change, then a LINE_CALLINFO message is sent
' to the application indicating which information item has changed.
' Dynamically changing information about a call, such as call progress status, is available
' in the LINECALLSTATUS structure, returned by a call to the lineGetCallStatus function.
' ========================================================================================

' // Size = 324 bytes
TYPE LINECALLINFO DWORD
   dwTotalSize                AS DWORD
   dwNeededSize               AS DWORD
   dwUsedSize                 AS DWORD
   hLine                      AS DWORD   ' HLINE
   dwLineDeviceID             AS DWORD
   dwAddressID                AS DWORD
   dwBearerMode               AS DWORD
   dwRate                     AS DWORD
   dwMediaMode                AS DWORD
   dwAppSpecific              AS DWORD
   dwCallID                   AS DWORD
   dwRelatedCallID            AS DWORD
   dwCallParamFlags           AS DWORD
   dwCallStates               AS DWORD
   dwMonitorDigitModes        AS DWORD
   dwMonitorMediaModes        AS DWORD
   DialParams                 AS LINEDIALPARAMS
   dwOrigin                   AS DWORD
   dwReason                   AS DWORD
   dwCompletionID             AS DWORD
   dwNumOwners                AS DWORD
   dwNumMonitors              AS DWORD
   dwCountryCode              AS DWORD
   dwTrunk                    AS DWORD
   dwCallerIDFlags            AS DWORD
   dwCallerIDSize             AS DWORD
   dwCallerIDOffset           AS DWORD
   dwCallerIDNameSize         AS DWORD
   dwCallerIDNameOffset       AS DWORD
   dwCalledIDFlags            AS DWORD
   dwCalledIDSize             AS DWORD
   dwCalledIDOffset           AS DWORD
   dwCalledIDNameSize         AS DWORD
   dwCalledIDNameOffset       AS DWORD
   dwConnectedIDFlags         AS DWORD
   dwConnectedIDSize          AS DWORD
   dwConnectedIDOffset        AS DWORD
   dwConnectedIDNameSize      AS DWORD
   dwConnectedIDNameOffset    AS DWORD
   dwRedirectionIDFlags       AS DWORD
   dwRedirectionIDSize        AS DWORD
   dwRedirectionIDOffset      AS DWORD
   dwRedirectionIDNameSize    AS DWORD
   dwRedirectionIDNameOffset  AS DWORD
   dwRedirectingIDFlags       AS DWORD
   dwRedirectingIDSize        AS DWORD
   dwRedirectingIDOffset      AS DWORD
   dwRedirectingIDNameSize    AS DWORD
   dwRedirectingIDNameOffset  AS DWORD
   dwAppNameSize              AS DWORD
   dwAppNameOffset            AS DWORD
   dwDisplayableAddressSize   AS DWORD
   dwDisplayableAddressOffset AS DWORD
   dwCalledPartySize          AS DWORD
   dwCalledPartyOffset        AS DWORD
   dwCommentSize              AS DWORD
   dwCommentOffset            AS DWORD
   dwDisplaySize              AS DWORD
   dwDisplayOffset            AS DWORD
   dwUserUserInfoSize         AS DWORD
   dwUserUserInfoOffset       AS DWORD
   dwHighLevelCompSize        AS DWORD
   dwHighLevelCompOffset      AS DWORD
   dwLowLevelCompSize         AS DWORD
   dwLowLevelCompOffset       AS DWORD
   dwChargingInfoSize         AS DWORD
   dwChargingInfoOffset       AS DWORD
   dwTerminalModesSize        AS DWORD
   dwTerminalModesOffset      AS DWORD
   dwDevSpecificSize          AS DWORD
   dwDevSpecificOffset        AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwCallTreatment            AS DWORD   ' // TAPI v2.0
   dwCallDataSize             AS DWORD   ' // TAPI v2.0
   dwCallDataOffset           AS DWORD   ' // TAPI v2.0
   dwSendingFlowspecSize      AS DWORD   ' // TAPI v2.0
   dwSendingFlowspecOffset    AS DWORD   ' // TAPI v2.0
   dwReceivingFlowspecSize    AS DWORD   ' // TAPI v2.0
   dwReceivingFlowspecOffset  AS DWORD   ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
   dwCallerIDAddressType      AS DWORD   ' // TAPI v3.0
   dwCalledIDAddressType      AS DWORD   ' // TAPI v3.0
   dwConnectedIDAddressType   AS DWORD   ' // TAPI v3.0
   dwRedirectionIDAddressType AS DWORD   ' // TAPI v3.0
   dwRedirectingIDAddressType AS DWORD   ' // TAPI v3.0
#ENDIF
END TYPE

' ========================================================================================
' The LINECALLLIST structure describes a list of call handles. A structure of this type is
' returned by the lineGetNewCalls and lineGetConfRelatedCalls functions.
' ========================================================================================

' // Size = 24 bytes
TYPE LINECALLLIST DWORD
   dwTotalSize       AS DWORD
   dwNeededSize      AS DWORD
   dwUsedSize        AS DWORD
   dwCallsNumEntries AS DWORD
   dwCallsSize       AS DWORD
   dwCallsOffset     AS DWORD
END TYPE

' ========================================================================================
' The LINECALLPARAMS structure describes parameters supplied when making calls using the
' lineMakeCall and TSPI_lineMakeCall functions. The LINECALLPARAMS structure is also used
' as a parameter in other operations, such as the lineOpen function.
' The comments to the right of the syntax block indicate the default values used when this
' structure is not provided to lineMakeCall.
' ========================================================================================

' // Size = 176 bytes
TYPE LINECALLPARAMS DWORD
   dwTotalSize                    AS DWORD            ' ' // ---------
   dwBearerMode                   AS DWORD            ' ' // voice
   dwMinRate                      AS DWORD            ' ' // (3.1kHz)
   dwMaxRate                      AS DWORD            ' ' // (3.1kHz)
   dwMediaMode                    AS DWORD            ' ' // interactiveVoice
   dwCallParamFlags               AS DWORD            ' ' // 0
   dwAddressMode                  AS DWORD            ' ' // addressID
   dwAddressID                    AS DWORD            ' ' // (any available)
   DialParams                     AS LINEDIALPARAMS   ' ' // (0, 0, 0, 0)
   dwOrigAddressSize              AS DWORD            ' ' // 0
   dwOrigAddressOffset            AS DWORD
   dwDisplayableAddressSize       AS DWORD
   dwDisplayableAddressOffset     AS DWORD
   dwCalledPartySize              AS DWORD            ' ' // 0
   dwCalledPartyOffset            AS DWORD
   dwCommentSize                  AS DWORD            ' ' // 0
   dwCommentOffset                AS DWORD
   dwUserUserInfoSize             AS DWORD            ' ' // 0
   dwUserUserInfoOffset           AS DWORD
   dwHighLevelCompSize            AS DWORD            ' ' // 0
   dwHighLevelCompOffset          AS DWORD
   dwLowLevelCompSize             AS DWORD            ' ' // 0
   dwLowLevelCompOffset           AS DWORD
   dwDevSpecificSize              AS DWORD            ' ' // 0
   dwDevSpecificOffset            AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwPredictiveAutoTransferStates AS DWORD            ' // TAPI v2.0
   dwTargetAddressSize            AS DWORD            ' // TAPI v2.0
   dwTargetAddressOffset          AS DWORD            ' // TAPI v2.0
   dwSendingFlowspecSize          AS DWORD            ' // TAPI v2.0
   dwSendingFlowspecOffset        AS DWORD            ' // TAPI v2.0
   dwReceivingFlowspecSize        AS DWORD            ' // TAPI v2.0
   dwReceivingFlowspecOffset      AS DWORD            ' // TAPI v2.0
   dwDeviceClassSize              AS DWORD            ' // TAPI v2.0
   dwDeviceClassOffset            AS DWORD            ' // TAPI v2.0
   dwDeviceConfigSize             AS DWORD            ' // TAPI v2.0
   dwDeviceConfigOffset           AS DWORD            ' // TAPI v2.0
   dwCallDataSize                 AS DWORD            ' // TAPI v2.0
   dwCallDataOffset               AS DWORD            ' // TAPI v2.0
   dwNoAnswerTimeout              AS DWORD            ' // TAPI v2.0
   dwCallingPartyIDSize           AS DWORD            ' // TAPI v2.0
   dwCallingPartyIDOffset         AS DWORD            ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
   dwAddressType                  AS DWORD            ' // TAPI v3.0
#ENDIF
END TYPE

' ========================================================================================
' The LINECALLSTATUS structure describes the current status of a call. The information in
' this structure depends on the device capabilities of the address, the ownership of the
' call by the invoking application, and the current state of the call being queried. The
' lineGetCallStatus and TSPI_lineGetCallStatus functions return the LINECALLSTATUS
' structure.
' ========================================================================================

' // Size = 56 bytes
TYPE LINECALLSTATUS DWORD
   dwTotalSize         AS DWORD
   dwNeededSize        AS DWORD
   dwUsedSize          AS DWORD
   dwCallState         AS DWORD
   dwCallStateMode     AS DWORD
   dwCallPrivilege     AS DWORD
   dwCallFeatures      AS DWORD
   dwDevSpecificSize   AS DWORD
   dwDevSpecificOffset AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwCallFeatures2     AS DWORD        ' // TAPI v2.0
   tStateEntryTime     AS SYSTEMTIME   ' SYSTEMTIME // TAPI v2.0
#ENDIF
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The LINECALLTREATMENTENTRY structure provides information on the type of call treatment,
' such as music, recorded announcement, or silence, on the current call. The LINEADDRESSCAPS
' structure can contain an array of LINECALLTREATMENTENTRY structures.
' ========================================================================================

' // Size = 12 bytes
TYPE LINECALLTREATMENTENTRY DWORD
   dwCallTreatmentID         AS DWORD   ' // TAPI v2.0
   dwCallTreatmentNameSize   AS DWORD   ' // TAPI v2.0
   dwCallTreatmentNameOffset AS DWORD   ' // TAPI v2.0
END TYPE

#ENDIF

' ========================================================================================
' The LINECARDENTRY structure describes a calling card. The LINETRANSLATECAPS structure
' can contain an array of LINECARDENTRY structures.
' ========================================================================================

' // Size = 44 bytes
TYPE LINECARDENTRY DWORD
   dwPermanentCardID         AS DWORD
   dwCardNameSize            AS DWORD
   dwCardNameOffset          AS DWORD
   dwCardNumberDigits        AS DWORD   ' // TAPI v1.4
   dwSameAreaRuleSize        AS DWORD   ' // TAPI v1.4
   dwSameAreaRuleOffset      AS DWORD   ' // TAPI v1.4
   dwLongDistanceRuleSize    AS DWORD   ' // TAPI v1.4
   dwLongDistanceRuleOffset  AS DWORD   ' // TAPI v1.4
   dwInternationalRuleSize   AS DWORD   ' // TAPI v1.4
   dwInternationalRuleOffset AS DWORD   ' // TAPI v1.4
   dwOptions                 AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The LINECOUNTRYENTRY structure provides the data for a single country/region entry. An
' array of one or more of these structures is part of the LINECOUNTRYLIST structure
' returned by the lineGetCountry function.
' ========================================================================================

' // Size = 44 bytes
TYPE LINECOUNTRYENTRY DWORD
   dwCountryID               AS DWORD   ' // TAPI v1.4
   dwCountryCode             AS DWORD   ' // TAPI v1.4
   dwNextCountryID           AS DWORD   ' // TAPI v1.4
   dwCountryNameSize         AS DWORD   ' // TAPI v1.4
   dwCountryNameOffset       AS DWORD   ' // TAPI v1.4
   dwSameAreaRuleSize        AS DWORD   ' // TAPI v1.4
   dwSameAreaRuleOffset      AS DWORD   ' // TAPI v1.4
   dwLongDistanceRuleSize    AS DWORD   ' // TAPI v1.4
   dwLongDistanceRuleOffset  AS DWORD   ' // TAPI v1.4
   dwInternationalRuleSize   AS DWORD   ' // TAPI v1.4
   dwInternationalRuleOffset AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The LINECOUNTRYLIST structure describes a list of countries/regions. This structure can
' contain an array of LINECOUNTRYENTRY structures. LINECOUNTRYLIST is returned by the
' lineGetCountry function.
' ========================================================================================

' // Size = 24 bytes
TYPE LINECOUNTRYLIST DWORD
   dwTotalSize         AS DWORD   ' // TAPI v1.4
   dwNeededSize        AS DWORD   ' // TAPI v1.4
   dwUsedSize          AS DWORD   ' // TAPI v1.4
   dwNumCountries      AS DWORD   ' // TAPI v1.4
   dwCountryListSize   AS DWORD   ' // TAPI v1.4
   dwCountryListOffset AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The LINEDEVCAPS structure describes the capabilities of a line device. The lineGetDevCaps
' function and the TSPI_lineGetDevCaps function return the LINEDEVCAPS structure.
' ========================================================================================

' // Size = 268 bytes
TYPE LINEDEVCAPS DWORD
   dwTotalSize                  AS DWORD
   dwNeededSize                 AS DWORD
   dwUsedSize                   AS DWORD
   dwProviderInfoSize           AS DWORD
   dwProviderInfoOffset         AS DWORD
   dwSwitchInfoSize             AS DWORD
   dwSwitchInfoOffset           AS DWORD
   dwPermanentLineID            AS DWORD
   dwLineNameSize               AS DWORD
   dwLineNameOffset             AS DWORD
   dwStringFormat               AS DWORD
   dwAddressModes               AS DWORD
   dwNumAddresses               AS DWORD
   dwBearerModes                AS DWORD
   dwMaxRate                    AS DWORD
   dwMediaModes                 AS DWORD
   dwGenerateToneModes          AS DWORD
   dwGenerateToneMaxNumFreq     AS DWORD
   dwGenerateDigitModes         AS DWORD
   dwMonitorToneMaxNumFreq      AS DWORD
   dwMonitorToneMaxNumEntries   AS DWORD
   dwMonitorDigitModes          AS DWORD
   dwGatherDigitsMinTimeout     AS DWORD
   dwGatherDigitsMaxTimeout     AS DWORD
   dwMedCtlDigitMaxListSize     AS DWORD
   dwMedCtlMediaMaxListSize     AS DWORD
   dwMedCtlToneMaxListSize      AS DWORD
   dwMedCtlCallStateMaxListSize AS DWORD
   dwDevCapFlags                AS DWORD
   dwMaxNumActiveCalls          AS DWORD
   dwAnswerMode                 AS DWORD
   dwRingModes                  AS DWORD
   dwLineStates                 AS DWORD
   dwUUIAcceptSize              AS DWORD
   dwUUIAnswerSize              AS DWORD
   dwUUIMakeCallSize            AS DWORD
   dwUUIDropSize                AS DWORD
   dwUUISendUserUserInfoSize    AS DWORD
   dwUUICallInfoSize            AS DWORD
   MinDialParams                AS LINEDIALPARAMS
   MaxDialParams                AS LINEDIALPARAMS
   DefaultDialParams            AS LINEDIALPARAMS
   dwNumTerminals               AS DWORD
   dwTerminalCapsSize           AS DWORD
   dwTerminalCapsOffset         AS DWORD
   dwTerminalTextEntrySize      AS DWORD
   dwTerminalTextSize           AS DWORD
   dwTerminalTextOffset         AS DWORD
   dwDevSpecificSize            AS DWORD
   dwDevSpecificOffset          AS DWORD
   dwLineFeatures               AS DWORD   ' // TAPI v1.4
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwSettableDevStatus          AS DWORD   ' // TAPI v2.0
   dwDeviceClassesSize          AS DWORD   ' // TAPI v2.0
   dwDeviceClassesOffset        AS DWORD   ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00020002
   PermanentLineGuid            AS GUID    ' // TAPI v2.2
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00030000
   dwAddressTypes               AS DWORD   ' // TAPI v3.0
   ProtocolGuid                 AS GUID    ' // TAPI v3.0
   dwAvailableTracking          AS DWORD   ' // TAPI v3.0
#ENDIF
END TYPE

' ========================================================================================
' The LINEDEVSTATUS structure describes the current status of a line device. The
' lineGetLineDevStatus function and the TSPI_lineGetLineDevStatus function return the
' LINEDEVSTATUS structure.
' ========================================================================================

' // Size = 88 bytes
TYPE LINEDEVSTATUS DWORD
   dwTotalSize           AS DWORD
   dwNeededSize          AS DWORD
   dwUsedSize            AS DWORD
   dwNumOpens            AS DWORD
   dwOpenMediaModes      AS DWORD
   dwNumActiveCalls      AS DWORD
   dwNumOnHoldCalls      AS DWORD
   dwNumOnHoldPendCalls  AS DWORD
   dwLineFeatures        AS DWORD
   dwNumCallCompletions  AS DWORD
   dwRingMode            AS DWORD
   dwSignalLevel         AS DWORD
   dwBatteryLevel        AS DWORD
   dwRoamMode            AS DWORD
   dwDevStatusFlags      AS DWORD
   dwTerminalModesSize   AS DWORD
   dwTerminalModesOffset AS DWORD
   dwDevSpecificSize     AS DWORD
   dwDevSpecificOffset   AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwAvailableMediaModes AS DWORD   ' // TAPI v2.0
   dwAppInfoSize         AS DWORD   ' // TAPI v2.0
   dwAppInfoOffset       AS DWORD   ' // TAPI v2.0
#ENDIF
END TYPE

' ========================================================================================
' The LINEEXTENSIONID structure describes an extension identifier. Extension identifiers
' are used to identify service provider-specific extensions for line devices. Multiple
' functions use this structure, including the lineNegotiateAPIVersion function and the
' TSPI_lineGetExtensionID function.
' ========================================================================================

' // Size = 16 bytes
TYPE LINEEXTENSIONID DWORD
   dwExtensionID0 AS DWORD
   dwExtensionID1 AS DWORD
   dwExtensionID2 AS DWORD
   dwExtensionID3 AS DWORD
END TYPE

' ========================================================================================
' The LINEFORWARD structure describes an entry of the forwarding instructions. The
' LINEFORWARDLIST and the LINEADDRESSSTATUS structures can contain an array of LINEFORWARD
' structures.
' ========================================================================================

' // Size = 24 bytes
TYPE tagLINEFORWARD DWORD
   dwForwardMode         AS DWORD
   dwCallerAddressSize   AS DWORD
   dwCallerAddressOffset AS DWORD
   dwDestCountryCode     AS DWORD
   dwDestAddressSize     AS DWORD
   dwDestAddressOffset   AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00030001
   dwCallerAddressType   AS DWORD
   dwDestAddressType     AS DWORD
#ENDIF
END TYPE

' ========================================================================================
' The LINEFORWARDLIST structure describes a list of forwarding instructions. This
' structure can contain an array of LINEFORWARD structures. The lineForward and
' TSPI_lineForward functions use the LINEFORWARDLIST structure.
' ========================================================================================

' // Size = 32 bytes
TYPE LINEFORWARDLIST DWORD
   dwTotalSize    AS DWORD
   dwNumEntries   AS DWORD
   ForwardList(0) AS tagLINEFORWARD
END TYPE

' ========================================================================================
' The LINEGENERATETONE structure contains information about a tone to be generated. This
' structure is used by the lineGenerateTone and TSPI_lineGenerateTone functions.
' ========================================================================================

' // Size = 16 bytes
TYPE tagLINEGENERATETONE DWORD
   dwFrequency  AS DWORD
   dwCadenceOn  AS DWORD
   dwCadenceOff AS DWORD
   dwVolume     AS DWORD
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The LINEINITIZALIZEEXPARAMS structure describes parameters supplied when making calls
' using LINEINITIALIZEEX.
' ========================================================================================

' // Size = 4 bytes
UNION LINEINITIALIZEEXPARAMS_HANDLES_UNION DWORD
   hEvent          AS DWORD   ' HANDLE ' // TAPI v2.0
   hCompletionPort AS DWORD   ' HANDLE ' // TAPI v2.0
END UNION

' // Size = 24 bytes
TYPE LINEINITIALIZEEXPARAMS
   dwTotalSize     AS DWORD   ' // TAPI v2.0
   dwNeededSize    AS DWORD   ' // TAPI v2.0
   dwUsedSize      AS DWORD   ' // TAPI v2.0
   dwOptions       AS DWORD   ' // TAPI v2.0
   LINEINITIALIZEEXPARAMS_HANDLES_UNION
   dwCompletionKey AS DWORD   ' // TAPI v2.0
END TYPE

#ENDIF

' ========================================================================================
' The LINELOCATIONENTRY structure describes a location used to provide an address
' translation context. The LINETRANSLATECAPS structure can contain an array of
' LINELOCATIONENTRY structures.
' ========================================================================================

' // Size = 68 bytes
TYPE LINELOCATIONENTRY DWORD
   dwPermanentLocationID          AS DWORD
   dwLocationNameSize             AS DWORD
   dwLocationNameOffset           AS DWORD
   dwCountryCode                  AS DWORD
   dwCityCodeSize                 AS DWORD
   dwCityCodeOffset               AS DWORD
   dwPreferredCardID              AS DWORD
   dwLocalAccessCodeSize          AS DWORD   ' // TAPI v1.4
   dwLocalAccessCodeOffset        AS DWORD   ' // TAPI v1.4
   dwLongDistanceAccessCodeSize   AS DWORD   ' // TAPI v1.4
   dwLongDistanceAccessCodeOffset AS DWORD   ' // TAPI v1.4
   dwTollPrefixListSize           AS DWORD   ' // TAPI v1.4
   dwTollPrefixListOffset         AS DWORD   ' // TAPI v1.4
   dwCountryID                    AS DWORD   ' // TAPI v1.4
   dwOptions                      AS DWORD   ' // TAPI v1.4
   dwCancelCallWaitingSize        AS DWORD   ' // TAPI v1.4
   dwCancelCallWaitingOffset      AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The LINEMEDIACONTROLCALLSTATE structure describes a media action to be executed when
' detecting transitions into one or more call states. The lineSetMediaControl and
' TSPI_lineSetMediaControl functions use this structure.
' ========================================================================================

' // Size = 8 bytes
TYPE LINEMEDIACONTROLCALLSTATE DWORD
   dwCallStates   AS DWORD
   dwMediaControl AS DWORD
END TYPE

' ========================================================================================
' The LINEMEDIACONTROLDIGIT structure describes a media action to be executed when
' detecting a digit. It is used as an entry in an array. The lineSetMediaControl and
' TSPI_lineSetMediaControl functions use this structure.
' ========================================================================================

' // Size = 12 bytes
TYPE LINEMEDIACONTROLDIGIT DWORD
   dwDigit        AS DWORD
   dwDigitModes   AS DWORD
   dwMediaControl AS DWORD
END TYPE

' ========================================================================================
' The LINEMEDIACONTROLMEDIA structure describes a media action to be executed when
' detecting a media type change. It is used as an entry in an array. The lineSetMediaControl
' and TSPI_lineSetMediaControl functions use this structure.
' ========================================================================================

' // Size = 12 bytes
TYPE LINEMEDIACONTROLMEDIA DWORD
   dwMediaModes   AS DWORD
   dwDuration     AS DWORD
   dwMediaControl AS DWORD
END TYPE

' ========================================================================================
' The LINEMEDIACONTROLTONE structure describes a media action to be executed when a tone
' has been detected. It is used as an entry in an array. The lineSetMediaControl and
' TSPI_lineSetMediaControl functions use this structure.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEMEDIACONTROLTONE DWORD
   dwAppSpecific  AS DWORD
   dwDuration     AS DWORD
   dwFrequency1   AS DWORD
   dwFrequency2   AS DWORD
   dwFrequency3   AS DWORD
   dwMediaControl AS DWORD
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The LINEMESSAGE structure contains parameter values specifying a change in status of the
' line the application currently has open. The lineGetMessage function returns the
' LINEMESSAGE structure.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEMESSAGE DWORD
   hDevice            AS DWORD   ' // TAPI v2.0
   dwMessageID        AS DWORD   ' // TAPI v2.0
   dwCallbackInstance AS DWORD   ' DWORD_PTR ' // TAPI v2.0
   dwParam1           AS DWORD   ' DWORD_PTR ' // TAPI v2.0
   dwParam2           AS DWORD   ' DWORD_PTR ' // TAPI v2.0
   dwParam3           AS DWORD   ' DWORD_PTR ' // TAPI v2.0
END TYPE

#ENDIF

' ========================================================================================
' The LINEMONITORTONE structure describes a tone to be monitored. This is used as an entry
' in an array. The lineMonitorTones and TSPI_lineMonitorTones functions use this structure.
' ========================================================================================

' // Size = 20 bytes
TYPE LINEMONITORTONE DWORD
   dwAppSpecific AS DWORD
   dwDuration    AS DWORD
   dwFrequency1  AS DWORD
   dwFrequency2  AS DWORD
   dwFrequency3  AS DWORD
END TYPE

' ========================================================================================
' The LINEPROVIDERENTRY structure provides the information for a single service provider
' entry. An array of these structures is returned as part of the LINEPROVIDERLIST
' structure returned by the function lineGetProviderList.
' ========================================================================================

' // Size = 12 bytes
TYPE LINEPROVIDERENTRY DWORD
   dwPermanentProviderID    AS DWORD   ' // TAPI v1.4
   dwProviderFilenameSize   AS DWORD   ' // TAPI v1.4
   dwProviderFilenameOffset AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The LINEPROVIDERLIST structure describes a list of service providers. A structure of
' this type is returned by the lineGetProviderList function. The LINEPROVIDERLIST
' structure can contain an array of LINEPROVIDERENTRY structures.
' ========================================================================================

' // Size = 24 bytes
TYPE LINEPROVIDERLIST DWORD
   dwTotalSize          AS DWORD   ' // TAPI v1.4
   dwNeededSize         AS DWORD   ' // TAPI v1.4
   dwUsedSize           AS DWORD   ' // TAPI v1.4
   dwNumProviders       AS DWORD   ' // TAPI v1.4
   dwProviderListSize   AS DWORD   ' // TAPI v1.4
   dwProviderListOffset AS DWORD   ' // TAPI v1.4
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' // Size = 28 bytes
TYPE SetAgentGroup DWORD
   dwAddressID AS DWORD
   GroupList   AS LINEAGENTGROUPLIST
END TYPE

' // Size = 12 bytes
TYPE SetAgentState DWORD
   dwAddressID      AS DWORD   ' // TAPI v2.0
   dwAgentState     AS DWORD   ' // TAPI v2.0
   dwNextAgentState AS DWORD   ' // TAPI v2.0
END TYPE

' // Size = 8 bytes
TYPE SetAgentActivity DWORD
   dwAddressID      AS DWORD   ' // TAPI v2.0
   dwActivityID     AS DWORD   ' // TAPI v2.0
END TYPE

' // Size = 76 bytes
TYPE GetAgentCaps DWORD
   dwAddressID      AS DWORD           ' // TAPI v2.0
   AgentCaps        AS LINEAGENTCAPS   ' // TAPI v2.0
END TYPE

' // Size = 60 bytes
TYPE GetAgentStatus DWORD
   dwAddressID      AS DWORD             ' // TAPI v2.0
   AgentStatus      AS LINEAGENTSTATUS   ' // TAPI v2.0
END TYPE

' // Size = 16 bytes
TYPE AgentSpecific DWORD
   dwAddressID             AS DWORD   ' // TAPI v2.0
   dwAgentExtensionIDIndex AS DWORD   ' // TAPI v2.0
   dwSize                  AS DWORD   ' // TAPI v2.0
   Params                  AS BYTE    ' // TAPI v2.0
END TYPE

' // Size = 28 bytes
TYPE GetAgentActivityList DWORD
   dwAddressID  AS DWORD                   ' // TAPI v2.0
   ActivityList AS LINEAGENTACTIVITYLIST   ' // TAPI v2.0
END TYPE

' // Size = 28 bytes
TYPE GetAgentGroupList DWORD
   dwAddressID AS DWORD                ' // TAPI v2.0
   GroupList   AS LINEAGENTGROUPLIST   ' // TAPI v2.0
END TYPE

' // Size = 20 bytes
TYPE CreateAgent DWORD
   hAgent           AS DWORD   ' HAGENT ' // TAPI v2.2
   dwAgentIDSize    AS DWORD   ' // TAPI v2.2
   dwAgentIDOffset  AS DWORD   ' // TAPI v2.2
   dwAgentPINSize   AS DWORD   ' // TAPI v2.2
   dwAgentPINOffset AS DWORD
END TYPE

' // Size = 12 bytes
TYPE SetAgentStateEx DWORD
   hAgent           AS DWORD   ' HAGENT ' // TAPI v2.2
   dwAgentState     AS DWORD   ' // TAPI v2.2
   dwNextAgentState AS DWORD   ' // TAPI v2.2
END TYPE

' // Size = 8 bytes
TYPE SetAgentMeasurementPeriod DWORD
   hAgent              AS DWORD   ' HAGENT ' // TAPI v2.2
   dwMeasurementPeriod AS DWORD   ' // TAPI v2.2
END TYPE

' // Size = 60 bytes
TYPE GetAgentInfo DWORD
   hAgent    AS DWORD           ' HAGENT ' // TAPI v2.2
   AgentInfo AS LINEAGENTINFO   ' // TAPI v2.2
END TYPE

' // Size = 36 bytes
TYPE CreateAgentSession DWORD
   hAgentSession      AS DWORD   ' HAGENTSESSION ' // TAPI v2.2
   dwAgentPINSize     AS DWORD
   dwAgentPINOffset   AS DWORD
   hAgent             AS DWORD   ' HAGENT ' // TAPI v2.2
   GroupID            AS GUID    ' // TAPI v2.2
   dwWorkingAddressID AS DWORD   ' // TAPI v2.2
END TYPE

' // Size = 28 bytes
TYPE GetAgentSessionList DWORD
   hAgent      AS DWORD                  ' HAGENT ' // TAPI v2.2
   SessionList AS LINEAGENTSESSIONLIST   ' // TAPI v2.2
END TYPE

' // Size = 28 bytes
TYPE GetAgentSessionInfo DWORD
   hAgentSession AS DWORD                  ' HAGENTSESSION ' // TAPI v2.2
   SessionInfo   AS LINEAGENTSESSIONINFO   ' // TAPI v2.2
END TYPE

' // Size = 12 bytes
TYPE SetAgentSessionState DWORD
   hAgentSession           AS DWORD   ' HAGENTSESSION ' // TAPI v2.2
   dwAgentSessionState     AS DWORD   ' // TAPI v2.2
   dwNextAgentSessionState AS DWORD   ' // TAPI v2.2
END TYPE

' // Size = 40 bytes
TYPE GetQueueList DWORD
   GroupID   AS GUID            ' // TAPI v2.2
   QueueList AS LINEQUEUELIST   ' LINEQUEUELIST ' // TAPI v2.2
END TYPE

' // Size = 8 bytes
TYPE SetQueueMeasurementPeriod DWORD
   dwQueueID           AS DWORD   ' // TAPI v2.2
   dwMeasurementPeriod AS DWORD   ' // TAPI v2.2
END TYPE

' // Size = 56 bytes
TYPE GetQueueInfo DWORD
   dwQueueID AS DWORD           ' // TAPI v2.2
   QueueInfo AS LINEQUEUEINFO   ' // TAPI v2.2
END TYPE

' // Size = 24 bytes
TYPE GetGroupList DWORD
   GroupList AS LINEAGENTGROUPLIST   ' // TAPI v2.2
END TYPE

' // Size = 80 bytes
UNION ProxyRequestType DWORD
   SetAgentGroup             AS SetAgentGroup
   SetAgentState             AS SetAgentState
   SetAgentActivity          AS SetAgentActivity
   GetAgentCaps              AS GetAgentCaps
   GetAgentStatus            AS GetAgentStatus
   AgentSpecific             AS AgentSpecific
   GetAgentActivityList      AS GetAgentActivityList
   GetAgentGroupList         AS GetAgentGroupList
#IF %TAPI_CURRENT_VERSION >= &H00020002
   CreateAgent               AS CreateAgent
   SetAgentStateEx           AS SetAgentStateEx
   SetAgentMeasurementPeriod AS SetAgentMeasurementPeriod
   GetAgentInfo              AS GetAgentInfo
   CreateAgentSession        AS CreateAgentSession
   GetAgentSessionList       AS GetAgentSessionList
   GetAgentSessionInfo       AS GetAgentSessionInfo
   SetAgentSessionState      AS SetAgentSessionState
   GetQueueList              AS GetQueueList
   SetQueueMeasurementPeriod AS SetQueueMeasurementPeriod
   GetQueueInfo              AS GetQueueInfo
   GetGroupList              AS GetGroupList
#ENDIF
END UNION

' ========================================================================================
' The LINEPROXYREQUEST structure contains parameter values of the application making the
' proxy request. Multiple TAPI call center functions generate a LINE_PROXYREQUEST message
' that references a LINEPROXYREQUEST structure.
' ========================================================================================

' // Size = 108 bytes
TYPE LINEPROXYREQUEST DWORD
   dwSize                    AS DWORD   ' // TAPI v2.0
   dwClientMachineNameSize   AS DWORD   ' // TAPI v2.0
   dwClientMachineNameOffset AS DWORD   ' // TAPI v2.0
   dwClientUserNameSize      AS DWORD   ' // TAPI v2.0
   dwClientUserNameOffset    AS DWORD   ' // TAPI v2.0
   dwClientAppAPIVersion     AS DWORD   ' // TAPI v2.0
   dwRequestType             AS DWORD   ' // TAPI v2.0
   ProxyRequestType
END TYPE

#ENDIF

' ========================================================================================
' The LINEREQMAKECALL structure describes a request initiated by a call to the
' lineGetRequest function.
' ========================================================================================

' // Size = 240 bytes
TYPE LINEREQMAKECALL DWORD
   szDestAddress AS ASCIIZ * %TAPIMAXDESTADDRESSSIZE   ' char
   szAppName     AS ASCIIZ * %TAPIMAXAPPNAMESIZE       ' char
   szCalledParty AS ASCIIZ * %TAPIMAXCALLEDPARTYSIZE   ' char
   szComment     AS ASCIIZ * %TAPIMAXCOMMENTSIZE       ' char
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' // Size = 480 bytes
TYPE LINEREQMAKECALLW DWORD
   szDestAddress AS WSTRINGZ * %TAPIMAXDESTADDRESSSIZE   ' WCHAR
   szAppName     AS WSTRINGZ * %TAPIMAXAPPNAMESIZE       ' WCHAR
   szCalledParty AS WSTRINGZ * %TAPIMAXCALLEDPARTYSIZE   ' WCHAR
   szComment     AS WSTRINGZ * %TAPIMAXCOMMENTSIZE       ' WCHAR
END TYPE
#ENDIF

' ========================================================================================
' The LINEREQMEDIACALL structure describes a request initiated by a call to the
' lineGetRequest function. This data structure is obsolete and should not be used.
' ========================================================================================
'TYPE LINEREQMEDIACALL
'   hWnd          AS DWORD                              ' HWND
'   wRequestID    AS DWORD                              ' WPARAM
'   szDeviceClass AS ASCIIZ * %TAPIMAXDEVICECLASSSIZE   ' char
'   ucDeviceID    AS ASCIIZ * %TAPIMAXDEVICECLASSSIZE   ' unsigned char
'   dwSize        AS DWORD                              ' DWORD
'   dwSecure      AS DWORD                              ' DWORD
'   szDestAddress AS ASCIIZ * %TAPIMAXDESTADDRESSSIZE   ' char
'   szAppName     AS ASCIIZ * %TAPIMAXAPPNAMESIZE       ' char
'   szCalledParty AS ASCIIZ * %TAPIMAXCALLEDPARTYSIZE   ' char
'   szComment     AS ASCIIZ * %TAPIMAXCOMMENTSIZE       ' char
'END TYPE

'#IF %TAPI_CURRENT_VERSION >= &H00020000
'TYPE LINEREQMEDIACALLW
'   hWnd          AS DWORD                                ' HWND
'   wRequestID    AS DWORD                                ' WPARAM
'   szDeviceClass AS WSTRINGZ * %TAPIMAXDEVICECLASSSIZE   ' WCHAR
'   ucDeviceID    AS WSTRINGZ * %TAPIMAXDEVICECLASSSIZE   ' unsigned char
'   dwSize        AS DWORD                                ' DWORD
'   dwSecure      AS DWORD                                ' DWORD
'   szDestAddress AS WSTRINGZ * %TAPIMAXDESTADDRESSSIZE   ' WCHAR
'   szAppName     AS WSTRINGZ * %TAPIMAXAPPNAMESIZE       ' WCHAR
'   szCalledParty AS WSTRINGZ * %TAPIMAXCALLEDPARTYSIZE   ' WCHAR
'   szComment     AS WSTRINGZ * %TAPIMAXCOMMENTSIZE       ' WCHAR
'END TYPE
'#ENDIF

' ========================================================================================
' The LINETERMCAPS structure describes the capabilities of a line's terminal device. The
' LINEDEVCAPS structure can contain an array of LINETERMCAPS structures.
' ========================================================================================

' // Size = 12 bytes
TYPE LINETERMCAPS DWORD
   dwTermDev     AS DWORD
   dwTermModes   AS DWORD
   dwTermSharing AS DWORD
END TYPE

' ========================================================================================
' The LINETRANSLATECAPS structure describes the address translation capabilities. This
' structure can contain an array of LINELOCATIONENTRY structures and an array of
' LINECARDENTRY structures. The LINETRANSLATECAPS structure is returned by the
' lineGetTranslateCaps function.
' ========================================================================================

' // Size = 44 bytes
TYPE LINETRANSLATECAPS DWORD
   dwTotalSize              AS DWORD
   dwNeededSize             AS DWORD
   dwUsedSize               AS DWORD
   dwNumLocations           AS DWORD
   dwLocationListSize       AS DWORD
   dwLocationListOffset     AS DWORD
   dwCurrentLocationID      AS DWORD
   dwNumCards               AS DWORD
   dwCardListSize           AS DWORD
   dwCardListOffset         AS DWORD
   dwCurrentPreferredCardID AS DWORD
END TYPE

' ========================================================================================
' The LINETRANSLATEOUTPUT structure describes the result of an address translation. The
' lineTranslateAddress function uses this structure.
' ========================================================================================

' // Size = 40 bytes
TYPE LINETRANSLATEOUTPUT DWORD
   dwTotalSize               AS DWORD
   dwNeededSize              AS DWORD
   dwUsedSize                AS DWORD
   dwDialableStringSize      AS DWORD
   dwDialableStringOffset    AS DWORD
   dwDisplayableStringSize   AS DWORD
   dwDisplayableStringOffset AS DWORD
   dwCurrentCountry          AS DWORD
   dwDestCountry             AS DWORD
   dwTranslateResults        AS DWORD
END TYPE

' ========================================================================================
' The PHONEBUTTONINFO structure contains information about a button on a phone device.
' This structure is used by multiple TAPI and TSPI functions.
' ========================================================================================

' // Size = 40 bytes
TYPE PHONEBUTTONINFO DWORD
   dwTotalSize         AS DWORD
   dwNeededSize        AS DWORD
   dwUsedSize          AS DWORD
   dwButtonMode        AS DWORD
   dwButtonFunction    AS DWORD
   dwButtonTextSize    AS DWORD
   dwButtonTextOffset  AS DWORD
   dwDevSpecificSize   AS DWORD
   dwDevSpecificOffset AS DWORD
   dwButtonState       AS DWORD   ' // TAPI v1.4
END TYPE

' ========================================================================================
' The PHONECAPS structure describes the capabilities of a phone device. The phoneGetDevCaps
' and TSPI_phoneGetDevCaps functions return this structure.
' ========================================================================================

' // Size = 196 bytes
TYPE PHONECAPS DWORD
   dwTotalSize                       AS DWORD
   dwNeededSize                      AS DWORD
   dwUsedSize                        AS DWORD
   dwProviderInfoSize                AS DWORD
   dwProviderInfoOffset              AS DWORD
   dwPhoneInfoSize                   AS DWORD
   dwPhoneInfoOffset                 AS DWORD
   dwPermanentPhoneID                AS DWORD
   dwPhoneNameSize                   AS DWORD
   dwPhoneNameOffset                 AS DWORD
   dwStringFormat                    AS DWORD
   dwPhoneStates                     AS DWORD
   dwHookSwitchDevs                  AS DWORD
   dwHandsetHookSwitchModes          AS DWORD
   dwSpeakerHookSwitchModes          AS DWORD
   dwHeadsetHookSwitchModes          AS DWORD
   dwVolumeFlags                     AS DWORD
   dwGainFlags                       AS DWORD
   dwDisplayNumRows                  AS DWORD
   dwDisplayNumColumns               AS DWORD
   dwNumRingModes                    AS DWORD
   dwNumButtonLamps                  AS DWORD
   dwButtonModesSize                 AS DWORD
   dwButtonModesOffset               AS DWORD
   dwButtonFunctionsSize             AS DWORD
   dwButtonFunctionsOffset           AS DWORD
   dwLampModesSize                   AS DWORD
   dwLampModesOffset                 AS DWORD
   dwNumSetData                      AS DWORD
   dwSetDataSize                     AS DWORD
   dwSetDataOffset                   AS DWORD
   dwNumGetData                      AS DWORD
   dwGetDataSize                     AS DWORD
   dwGetDataOffset                   AS DWORD
   dwDevSpecificSize                 AS DWORD
   dwDevSpecificOffset               AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwDeviceClassesSize               AS DWORD   ' // TAPI v2.0
   dwDeviceClassesOffset             AS DWORD   ' // TAPI v2.0
   dwPhoneFeatures                   AS DWORD   ' // TAPI v2.0
   dwSettableHandsetHookSwitchModes  AS DWORD   ' // TAPI v2.0
   dwSettableSpeakerHookSwitchModes  AS DWORD   ' // TAPI v2.0
   dwSettableHeadsetHookSwitchModes  AS DWORD   ' // TAPI v2.0
   dwMonitoredHandsetHookSwitchModes AS DWORD   ' // TAPI v2.0
   dwMonitoredSpeakerHookSwitchModes AS DWORD   ' // TAPI v2.0
   dwMonitoredHeadsetHookSwitchModes AS DWORD   ' // TAPI v2.0
#ENDIF
#IF %TAPI_CURRENT_VERSION >= &H00020002
   PermanentPhoneGuid                AS GUID    ' // TAPI v2.2
#ENDIF
END TYPE

' ========================================================================================
' The PHONEEXTENSIONID structure describes an extension identifier. Extension identifiers
' are used to identify service provider-specific extensions for phone device classes. The
' phoneNegotiateAPIVersion and TSPI_phoneGetExtensionID functions return this structure.
' ========================================================================================

' // Size = 16 bytes
TYPE PHONEEXTENSIONID DWORD
   dwExtensionID0 AS DWORD
   dwExtensionID1 AS DWORD
   dwExtensionID2 AS DWORD
   dwExtensionID3 AS DWORD
END TYPE

#IF %TAPI_CURRENT_VERSION >= &H00020000
' // Size = 4 bytes
UNION PHONEINITIALIZEEXPARAMS_HANDLES_UNION DWORD
   hEvent          AS DWORD   ' HANDLE ' // TAPI v2.0
   hCompletionPort AS DWORD   ' HANDLE ' // TAPI v2.0
END UNION

' ========================================================================================
' The PHONEINITIALIZEEXPARAMS structure contains parameters used to establish the
' association between an application and TAPI; for example, the application's selected
' event notification mechanism. The phoneInitializeEx function uses this structure.
' ========================================================================================

' // Size = 24 bytes
TYPE PHONEINITIALIZEEXPARAMS DWORD
   dwTotalSize  AS DWORD      ' // TAPI v2.0
   dwNeededSize AS DWORD      ' // TAPI v2.0
   dwUsedSize   AS DWORD      ' // TAPI v2.0
   dwOptions    AS DWORD      ' // TAPI v2.0
   PHONEINITIALIZEEXPARAMS_HANDLES_UNION
   dwCompletionKey AS DWORD   ' // TAPI v2.0
END TYPE

' ========================================================================================
' The PHONEMESSAGE structure contains the next message queued for delivery to the
' application. The phoneGetMessage function returns this structure.
' ========================================================================================

' // Size = 24 bytes
TYPE PHONEMESSAGE DWORD
   hDevice            AS DWORD   ' // TAPI v2.0
   dwMessageID        AS DWORD   ' // TAPI v2.0
   dwCallbackInstance AS DWORD   ' DWORD_PTR // TAPI v2.0
   dwParam1           AS DWORD   ' DWORD_PTR // TAPI v2.0
   dwParam2           AS DWORD   ' DWORD_PTR // TAPI v2.0
   dwParam3           AS DWORD   ' DWORD_PTR // TAPI v2.0
END TYPE

#ENDIF

' ========================================================================================
' The PHONESTATUS structure describes the current status of a phone device. The
' phoneGetStatus and TSPI_phoneGetStatus functions return this structure.
' ========================================================================================

' // Size = 104 bytes
TYPE PHONESTATUS DWORD
   dwTotalSize             AS DWORD
   dwNeededSize            AS DWORD
   dwUsedSize              AS DWORD
   dwStatusFlags           AS DWORD
   dwNumOwners             AS DWORD
   dwNumMonitors           AS DWORD
   dwRingMode              AS DWORD
   dwRingVolume            AS DWORD
   dwHandsetHookSwitchMode AS DWORD
   dwHandsetVolume         AS DWORD
   dwHandsetGain           AS DWORD
   dwSpeakerHookSwitchMode AS DWORD
   dwSpeakerVolume         AS DWORD
   dwSpeakerGain           AS DWORD
   dwHeadsetHookSwitchMode AS DWORD
   dwHeadsetVolume         AS DWORD
   dwHeadsetGain           AS DWORD
   dwDisplaySize           AS DWORD
   dwDisplayOffset         AS DWORD
   dwLampModesSize         AS DWORD
   dwLampModesOffset       AS DWORD
   dwOwnerNameSize         AS DWORD
   dwOwnerNameOffset       AS DWORD
   dwDevSpecificSize       AS DWORD
   dwDevSpecificOffset     AS DWORD
#IF %TAPI_CURRENT_VERSION >= &H00020000
   dwPhoneFeatures         AS DWORD   ' // TAPI v2.0
#ENDIF
END TYPE

' ========================================================================================
' The VARSTRING structure is used for returning variably sized strings. It is used both by
' the line device class and the phone device class.
' ========================================================================================

' // Size = 24 bytes
TYPE VARSTRING DWORD
   dwTotalSize    AS DWORD
   dwNeededSize   AS DWORD
   dwUsedSize     AS DWORD
   dwStringFormat AS DWORD
   dwStringSize   AS DWORD
   dwStringOffset AS DWORD
END TYPE

' ========================================================================================
' The lineAccept function accepts the specified offered call. It can optionally send the
' specified user-user information to the calling party.
' ========================================================================================
DECLARE FUNCTION LineAccept IMPORT "TAPI32.DLL" ALIAS "lineAccept" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpsUserUserInfo AS ASCIIZ _                    ' __in LPCSTR lpsUserUserInfo
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineAddProvider function installs a new telephony service provider into the
' telephony system.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION LineAddProvider IMPORT "TAPI32.DLL" ALIAS "lineAddProviderA"( _
   BYREF lpszProviderFilename AS ASCIIZ _               ' __in  LPCSTR  lpszProviderFilename
 , BYVAL hwndOwner AS DWORD _                           ' __in  HWND    hwndOwner
 , BYREF lpdwPermanentProviderID AS DWORD _             ' __out LPDWORD lpdwPermanentProviderID
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION LineAddProviderW IMPORT "TAPI32.DLL" ALIAS "lineAddProviderW"( _
   BYREF lpszProviderFilename AS WSTRINGZ _             ' __in  LPCWSTR lpszProviderFilename
 , BYVAL hwndOwner AS DWORD _                           ' __in  HWND    hwndOwner
 , BYREF lpdwPermanentProviderID AS DWORD _             ' __out LPDWORD lpdwPermanentProviderID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineAddToConference function adds the call specified by hConsultCall to the
' conference call specified by hConfCall.
' ========================================================================================
DECLARE FUNCTION LineAddToConference IMPORT "TAPI32.DLL" ALIAS "lineAddToConference" ( _
   BYVAL hConfCall AS DWORD _                           ' __in HCALL hConfCall
 , BYVAL hConsultCall AS DWORD _                        ' __in HCALL hConsultCall
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineAgentSpecific function allows the application to access proprietary
' handler-specific functions of the agent handler associated with the address. The meaning
' of the extensions are specific to the agent handler. Each set of agent-related extensions
' is identified by a universally unique 128-bit extension ID that must be obtained, along
' with the specification for the extension, from the promulgator of that extension (usually
' the author of the agent handler software on the telephony server). The list of extensions
' supported by the agent handler is obtained from the LINEAGENTCAPS structure returned by
' lineGetAgentCaps.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION LineAgentSpecific IMPORT "TAPI32.DLL" ALIAS "lineAgentSpecific" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE  hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD  dwAddressID
 , BYVAL dwAgentExtensionIDIndex AS DWORD _             ' __in DWORD  dwAgentExtensionIDIndex
 , BYREF lpParams AS ANY _                              ' __in LPVOID lpParams
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineAnswer function answers the specified offering call.
' ========================================================================================
DECLARE FUNCTION lineAnswer IMPORT "TAPI32.DLL" ALIAS "lineAnswer" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpsUserUserInfo AS ASCIIZ _                    ' __in LPCSTR lpsUserUserInfo
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineBlindTransfer function performs a blind or single-step transfer of the specified
' call to the specified destination address.
' ========================================================================================
DECLARE FUNCTION lineBlindTransfer IMPORT "TAPI32.DLL" ALIAS "lineBlindTransferA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in LPCSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in DWORD  dwCountryCode
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineBlindTransferW IMPORT "TAPI32.DLL" ALIAS "lineBlindTransferW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL   hCall
 , BYREF lpszDestAddress AS WSTRINGZ _                  ' __in LPCWSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in DWORD   dwCountryCode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineClose function closes the specified open line device.
' ========================================================================================
DECLARE FUNCTION lineClose IMPORT "TAPI32.DLL" ALIAS "lineClose" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineCompleteCall function specifies how a call that could not be connected normally
' should be completed instead. The network or switch may not be able to complete a call
' because network resources are busy or the remote station is busy or doesn't answer. The
' application can request that the call be completed in one of a number of ways.
' ========================================================================================
DECLARE FUNCTION lineCompleteCall IMPORT "TAPI32.DLL" ALIAS "lineCompleteCall" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpdwCompletionID AS DWORD _                    ' __out LPDWORD lpdwCompletionID
 , BYVAL dwCompletionMode AS DWORD _                    ' __in  DWORD dwCompletionMode
 , BYVAL dwMessageID AS DWORD _                         ' __in  DWORD dwMessageID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineCompleteTransfer function completes the transfer of the specified call to the
' party connected in the consultation call.
' ========================================================================================
DECLARE FUNCTION lineCompleteTransfer IMPORT "TAPI32.DLL" ALIAS "lineCompleteTransfer" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYVAL hConsultCall AS DWORD _                        ' __in  HCALL hConsultCall
 , BYREF lphConfCall AS DWORD _                         ' __out LPHCALL lphConfCall
 , BYVAL dwTransferMode AS DWORD _                      ' __in  DWORD dwTransferMode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineConfigDialog function causes the provider of the specified line device to
' display a dialog box (attached to hwndOwner of the application) to allow the user to
' configure parameters related to the line device.
' ========================================================================================
DECLARE FUNCTION lineConfigDialog IMPORT "TAPI32.DLL" ALIAS "lineConfigDialogA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD  dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND   hwndOwner
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineConfigDialogW IMPORT "TAPI32.DLL" ALIAS "lineConfigDialogW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD   dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND    hwndOwner
 , BYREF lpszDeviceClass AS WSTRINGZ  _                 ' __in LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineConfigDialogEdit function causes the provider of the specified line device to
' display a dialog box (attached to hwndOwner of the application) to allow the user to
' configure parameters related to the line device.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineConfigDialogEdit IMPORT "TAPI32.DLL" ALIAS "lineConfigDialogEditA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD  dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in  HWND   hwndOwner
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 , BYVAL lpDeviceConfigIn AS DWORD _                    ' __in  LPVOID const lpDeviceConfigIn
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD  dwSize
 , BYREF lpDeviceConfigOut AS VARSTRING _               ' __out LPVARSTRING lpDeviceConfigOut
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineConfigDialogEditW IMPORT "TAPI32.DLL" ALIAS "lineConfigDialogEditW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD   dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in  HWND    hwndOwner
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 , BYVAL lpDeviceConfigIn AS DWORD _                    ' __in  LPVOID  const lpDeviceConfigIn
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD   dwSize
 , BYREF lpDeviceConfigOut AS VARSTRING _               ' __out LPVARSTRING lpDeviceConfigOut
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineConfigProvider function causes a service provider to display its configuration
' dialog box.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineConfigProvider IMPORT "TAPI32.DLL" ALIAS "lineConfigProvider" ( _
   BYVAL hwndOwner AS DWORD _                           ' __in HWND  hwndOwner
 , BYVAL dwPermanentProviderID AS DWORD _               ' __in DWORD dwPermanentProviderID
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineCreateAgent function creates a new Agent object. It generates a
' LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing
' a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENT.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineCreateAgent IMPORT "TAPI32.DLL" ALIAS "lineCreateAgentA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE    hLine
 , BYREF lpszAgentID AS ASCIIZ _                        ' __in  LPSTR    lpszAgentID
 , BYREF lpszAgentPIN AS ASCIIZ _                       ' __in  LPSTR    lpszAgentPIN
 , BYREF lphAgent AS DWORD _                            ' __out LPHAGENT lphAgent
 ) AS LONG                                              ' LONG

' // TAPI v2.2
DECLARE FUNCTION lineCreateAgentW IMPORT "TAPI32.DLL" ALIAS "lineCreateAgentW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE    hLine
 , BYREF lpszAgentID AS WSTRINGZ _                      ' __in  LPWSTR   lpszAgentID
 , BYREF lpszAgentPIN AS WSTRINGZ _                     ' __in  LPWSTR   lpszAgentPIN
 , BYREF lphAgent AS DWORD _                            ' __out LPHAGENT lphAgent
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineCreateAgentSession function creates a new AgentSession object. It generates a
' LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing
' a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENTSESSION.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineCreateAgentSession IMPORT "TAPI32.DLL" ALIAS "lineCreateAgentSessionA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE  hLine
 , BYVAL hAgent AS DWORD _                              ' __in  HAGENT hAgent
 , BYREF lpszAgentPIN AS ASCIIZ _                       ' __in  LPSTR  lpszAgentPIN
 , BYVAL dwWorkingAddressID AS DWORD _                  ' __in  DWORD  dwWorkingAddressID
 , BYREF lpGroupID AS GUID _                            ' __in  LPGUID lpGroupID
 , BYREF lphAgentSession AS DWORD _                     ' __out LPHAGENTSESSION lphAgentSession
 ) AS LONG                                              ' LONG

' // TAPI v2.2
DECLARE FUNCTION lineCreateAgentSessionW IMPORT "TAPI32.DLL" ALIAS "lineCreateAgentSessionW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE  hLine
 , BYVAL hAgent AS DWORD _                              ' __in  HAGENT hAgent
 , BYREF lpszAgentPIN AS WSTRINGZ _                     ' __in  LPWSTR lpszAgentPIN
 , BYVAL dwWorkingAddressID AS DWORD _                  ' __in  DWORD  dwWorkingAddressID
 , BYREF lpGroupID AS GUID _                            ' __in  LPGUID lpGroupID
 , BYREF lphAgentSession AS DWORD _                     ' __out LPHAGENTSESSION lphAgentSession
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineDeallocateCall function deallocates the specified call handle.
' ========================================================================================
DECLARE FUNCTION lineDeallocateCall IMPORT "TAPI32.DLL" ALIAS "lineDeallocateCall" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineDevSpecific function enables service providers to provide access to features not
' offered by other TAPI functions. The meaning of the extensions are device specific, and
' taking advantage of these extensions requires the application to be fully aware of them.
' ========================================================================================
DECLARE FUNCTION lineDevSpecific IMPORT "TAPI32.DLL" ALIAS "lineDevSpecific"( _
   BYVAL hLine AS DWORD _                               ' __in HLINE  hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD  dwAddressID
 , BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpParams AS ANY _                              ' __in LPVOID lpParams
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineDevSpecificFeature function enables service providers to provide access to
' features not offered by other TAPI functions. The meaning of these extensions are device
' specific, and taking advantage of these extensions requires the application to be fully
' aware of them.
' ========================================================================================
DECLARE FUNCTION lineDevSpecificFeature IMPORT "TAPI32.DLL" ALIAS "lineDevSpecificFeature" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE  hLine
 , BYVAL dwFeature AS DWORD _                           ' __in DWORD  dwFeature
 , BYREF lpParams AS ANY _                              ' __in LPVOID lpParams
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineDial function dials the specified dialable number on the specified call.
' ========================================================================================
DECLARE FUNCTION lineDial IMPORT "TAPI32.DLL" ALIAS "lineDialA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in LPCSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in DWORD  dwCountryCode
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineDialW IMPORT "TAPI32.DLL" ALIAS "lineDialW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL   hCall
 , BYREF lpszDestAddress AS WSTRINGZ  _                 ' __in LPCWSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in DWORD   dwCountryCode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineDrop function drops or disconnects the specified call. The application has the
' option to specify user-user information to be transmitted as part of the call disconnect.
' ========================================================================================
DECLARE FUNCTION lineDrop IMPORT "TAPI32.DLL" ALIAS "lineDrop" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYREF lpsUserUserInfo AS ASCIIZ _                    ' __in LPCSTR lpsUserUserInfo
 , BYVAL dwSize AS DWORD _                              ' __in DWORD  dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineForward function forwards calls destined for the specified address on the
' specified line, according to the specified forwarding instructions. When an originating
' address (dwAddressID) is forwarded, the specified incoming calls for that address are
' deflected to the other number by the switch. This function provides a combination of
' forward and do-not-disturb features. This function can also cancel forwarding currently
' in effect.
' ========================================================================================
DECLARE FUNCTION lineForward IMPORT "TAPI32.DLL" ALIAS "lineForwardA"( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL bAllAddresses AS DWORD _                       ' __in  DWORD bAllAddresses
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpForwardList AS LINEFORWARDLIST _             ' __in  LPLINEFORWARDLIST const lpForwardList
 , BYVAL dwNumRingsNoAnswer AS DWORD _                  ' __in  DWORD dwNumRingsNoAnswer
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineForwardW IMPORT "TAPI32.DLL" ALIAS "lineForwardW"( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL bAllAddresses AS DWORD _                       ' __in  DWORD bAllAddresses
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpForwardList AS LINEFORWARDLIST _             ' __in  LPLINEFORWARDLIST const lpForwardList
 , BYVAL dwNumRingsNoAnswer AS DWORD _                  ' __in  DWORD dwNumRingsNoAnswer
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGatherDigits function initiates the buffered gathering of digits on the
' specified call. The application specifies a buffer in which to place the digits and the
' maximum number of digits to be collected.
' ========================================================================================
DECLARE FUNCTION lineGatherDigits IMPORT "TAPI32.DLL" ALIAS "lineGatherDigitsA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYVAL dwDigitModes AS DWORD _                        ' __in DWORD  dwDigitModes
 , BYREF lpsDigits AS ASCIIZ _                          ' __in LPSTR  lpsDigits
 , BYVAL dwNumDigits AS DWORD _                         ' __in DWORD  dwNumDigits
 , BYREF lpszTerminationDigits AS ASCIIZ _              ' __in LPCSTR lpszTerminationDigits
 , BYVAL dwFirstDigitTimeout AS DWORD _                 ' __in DWORD  dwFirstDigitTimeout
 , BYVAL dwInterDigitTimeout AS DWORD _                 ' __in DWORD  dwInterDigitTimeout
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGatherDigitsW IMPORT "TAPI32.DLL" ALIAS "lineGatherDigitsW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYVAL dwDigitModes AS DWORD _                        ' __in DWORD  dwDigitModes
 , BYREF lpsDigits AS WSTRINGZ _                        ' __in LPWSTR lpsDigits
 , BYVAL dwNumDigits AS DWORD _                         ' __in DWORD  dwNumDigits
 , BYREF lpszTerminationDigits AS WSTRINGZ _            ' __in LPCWSTR lpszTerminationDigits
 , BYVAL dwFirstDigitTimeout AS DWORD _                 ' __in DWORD  dwFirstDigitTimeout
 , BYVAL dwInterDigitTimeout AS DWORD _                 ' __in DWORD  dwInterDigitTimeout
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGenerateDigits function initiates the generation of the specified digits on the
' specified call as inband tones using the specified signaling mode. Calling this function
' with a NULL value for lpszDigits aborts any digit generation currently in progress.
' Invoking lineGenerateDigits or lineGenerateTone while digit generation is in progress
' aborts the current digit generation or tone generation and initiates the generation of
' the most recently specified digits or tone.
' ========================================================================================
DECLARE FUNCTION lineGenerateDigits IMPORT "TAPI32.DLL" ALIAS "lineGenerateDigitsA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYVAL dwDigitMode AS DWORD _                         ' __in DWORD  dwDigitMode
 , BYREF lpszDigits AS ASCIIZ _                         ' __in LPCSTR lpszDigits
 , BYVAL dwDuration AS DWORD _                          ' __in DWORD  dwDuration
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGenerateDigitsW IMPORT "TAPI32.DLL" ALIAS "lineGenerateDigitsW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL  hCall
 , BYVAL dwDigitMode AS DWORD _                         ' __in DWORD  dwDigitMode
 , BYREF lpszDigits AS WSTRINGZ _                       ' __in LPCWSTR lpszDigits
 , BYVAL dwDuration AS DWORD _                          ' __in DWORD  dwDuration
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGenerateTone function generates the specified inband tone over the specified
' call. Invoking this function with a zero for dwToneMode aborts the tone generation
' currently in progress on the specified call. Invoking lineGenerateTone or
' lineGenerateDigits while tone generation is in progress aborts the current tone
' generation or digit generation and initiates the generation of the newly specified tone
' or digits.
' ========================================================================================
DECLARE FUNCTION lineGenerateTone IMPORT "TAPI32.DLL" ALIAS "lineGenerateTone" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwToneMode AS DWORD _                          ' __in DWORD dwToneMode
 , BYVAL dwDuration AS DWORD _                          ' __in DWORD dwDuration
 , BYVAL dwNumTones AS DWORD _                          ' __in DWORD dwNumTones
 , BYREF lpTones AS tagLINEGENERATETONE _               ' __in LPLINEGENERATETONE const lpTones
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAddressCaps function queries the specified address on the specified line
' device to determine its telephony capabilities.
' ========================================================================================
DECLARE FUNCTION lineGetAddressCaps IMPORT "TAPI32.DLL" ALIAS "lineGetAddressCapsA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpAddressCaps AS LINEADDRESSCAPS _             ' __out LPLINEADDRESSCAPS lpAddressCaps
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetAddressCapsW IMPORT "TAPI32.DLL" ALIAS "lineGetAddressCapsW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpAddressCaps AS LINEADDRESSCAPS _             ' __out LPLINEADDRESSCAPS lpAddressCaps
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAddressID function returns the address identifier associated with an address
' in a different format on the specified line.
' ========================================================================================
DECLARE FUNCTION lineGetAddressID IMPORT "TAPI32.DLL" ALIAS "lineGetAddressIDA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE   hLine
 , BYREF lpdwAddressID AS DWORD _                       ' __out LPDWORD lpdwAddressID
 , BYVAL dwAddressMode AS DWORD _                       ' __in  DWORD   dwAddressMode
 , BYREF lpsAddress AS ASCIIZ _                         ' __in  LPCSTR  lpsAddress
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD   dwSize
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetAddressIDW IMPORT "TAPI32.DLL" ALIAS "lineGetAddressIDW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE   hLine
 , BYREF lpdwAddressID AS DWORD _                       ' __out LPDWORD lpdwAddressID
 , BYVAL dwAddressMode AS DWORD _                       ' __in  DWORD   dwAddressMode
 , BYREF lpsAddress AS WSTRINGZ _                       ' __in  LPCWSTR lpsAddress
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD   dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAddressStatus function allows an application to query the specified address
' for its current status.
' ========================================================================================
DECLARE FUNCTION lineGetAddressStatus IMPORT "TAPI32.DLL" ALIAS "lineGetAddressStatusA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAddressStatus AS LINEADDRESSSTATUS _         ' __out LPLINEADDRESSSTATUS lpAddressStatus
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetAddressStatusW IMPORT "TAPI32.DLL" ALIAS "lineGetAddressStatusW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAddressStatus AS LINEADDRESSSTATUS _         ' __out LPLINEADDRESSSTATUS lpAddressStatus
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineGetAgentActivityList function obtains the identities of activities that the
' application can select using lineSetAgentActivity to indicate what function the agent is
' actually performing at the moment.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineGetAgentActivityList IMPORT "TAPI32.DLL" ALIAS "lineGetAgentActivityListA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentActivityList AS LINEAGENTACTIVITYLIST _ ' __out LPLINEAGENTACTIVITYLIST lpAgentActivityList
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION lineGetAgentActivityListW IMPORT "TAPI32.DLL" ALIAS "lineGetAgentActivityListW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentActivityList AS LINEAGENTACTIVITYLIST _ ' __out LPLINEAGENTACTIVITYLIST lpAgentActivityList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAgentCaps function obtains the agent-related capabilities supported on the
' specified line device. If a specific agent is named, the capabilities include a listing
' of ACD groups into which the agent is permitted to log in.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineGetAgentCaps IMPORT "TAPI32.DLL" ALIAS "lineGetAgentCapsA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL dwAppAPIVersion AS DWORD _                     ' __in  DWORD dwAppAPIVersion
 , BYREF lpAgentCaps AS LINEAGENTCAPS _                 ' __out LPLINEAGENTCAPS lpAgentCaps
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION lineGetAgentCapsW IMPORT "TAPI32.DLL" ALIAS "lineGetAgentCapsW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL dwAppAPIVersion AS DWORD _                     ' __in  DWORD dwAppAPIVersion
 , BYREF lpAgentCaps AS LINEAGENTCAPS _                 ' __out LPLINEAGENTCAPS lpAgentCaps
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAgentGroupList function obtains the identities of agent groups (combination
' of queue, supervisor, skill level, and so on) into which the agent currently logged in
' on the workstation is permitted to log into on the automatic call distributor.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineGetAgentGroupList IMPORT "TAPI32.DLL" ALIAS "lineGetAgentGroupListA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentGroupList AS LINEAGENTGROUPLIST _       ' __out LPLINEAGENTGROUPLIST lpAgentGroupList
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION lineGetAgentGroupListW IMPORT "TAPI32.DLL" ALIAS "lineGetAgentGroupListW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentGroupList AS LINEAGENTGROUPLIST _       ' __out LPLINEAGENTGROUPLIST lpAgentGroupList
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineGetAgentInfo function returns a structure holding the ACD information associated
' with a particular agent handle. It generates a LINE_PROXYREQUEST message to be sent to a
' registered proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_GETAGENTINFO.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetAgentInfo IMPORT "TAPI32.DLL" ALIAS "lineGetAgentInfo" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE  hLine
 , BYVAL hAgent AS DWORD _                              ' __in HAGENT hAgent
 , BYREF lpAgentInfo AS LINEAGENTINFO _                 ' __out LPLINEAGENTINFO lpAgentInfo
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAgentSessionInfo function returns a structure that holds the ACD information
' associated with a particular agent session handle. It generates a LINE_PROXYREQUEST
' message to be sent to a registered proxy function handler, referencing a LINEPROXYREQUEST
' structure of type LINEPROXYREQUEST_GETAGENTSESSIONINFO.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetAgentSessionInfo IMPORT "TAPI32.DLL" ALIAS "lineGetAgentSessionInfo" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL hAgentSession AS DWORD _                       ' __in  HAGENTSESSION hAgentSession
 , BYREF lpAgentSessionInfo AS LINEAGENTSESSIONINFO _   ' __out LPLINEAGENTSESSIONINFO lpAgentSessionInfo
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetAgentSessionList function returns a list of agent sessions created for the
' specified agent. It generates a LINE_PROXYREQUEST message to be sent to a registered
' proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_GETAGENTSESSIONLIST.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetAgentSessionList IMPORT "TAPI32.DLL" ALIAS "lineGetAgentSessionList" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE  hLine
 , BYVAL hAgent AS DWORD _                              ' __in  HAGENT hAgent
 , BYREF lpAgentSessionList AS LINEAGENTSESSIONLIST _   ' __out LPLINEAGENTSESSIONLIST lpAgentSessionList
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineGetAgentStatus function obtains the agent-related status on the specified address.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineGetAgentStatus IMPORT "TAPI32.DLL" ALIAS "lineGetAgentStatusA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentStatus AS LINEAGENTSTATUS _             ' __out LPLINEAGENTSTATUS lpAgentStatus
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION lineGetAgentStatusW IMPORT "TAPI32.DLL" ALIAS "lineGetAgentStatusW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpAgentStatus AS LINEAGENTSTATUS _             ' __out LPLINEAGENTSTATUS lpAgentStatus
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineGetAppPriority function enables an application to determine whether or not it is
' in the handoff priority list for a particular media mode or Assisted Telephony request
' mode and, if so, its position in the priority list.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineGetAppPriority IMPORT "TAPI32.DLL" ALIAS "lineGetAppPriorityA" ( _
   BYREF lpszAppFilename AS ASCIIZ _                    ' __in  LPCSTR lpszAppFilename
 , BYVAL dwMediaMode AS DWORD _                         ' __in  DWORD dwMediaMode
 , BYREF lpExtensionID AS LINEEXTENSIONID _             ' __in  LPLINEEXTENSIONID lpExtensionID
 , BYVAL dwRequestMode AS DWORD _                       ' __in  DWORD dwRequestMode
 , BYREF lpExtensionName AS VARSTRING _                 ' __in  LPVARSTRING lpExtensionName
 , BYREF lpdwPriority AS DWORD _                        ' __out LPDWORD lpdwPriority
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineGetAppPriorityW IMPORT "TAPI32.DLL" ALIAS "lineGetAppPriorityW" ( _
   BYREF lpszAppFilename AS WSTRINGZ _                  ' __in  LPCWSTR lpszAppFilename
 , BYVAL dwMediaMode AS DWORD _                         ' __in  DWORD dwMediaMode
 , BYREF lpExtensionID AS LINEEXTENSIONID _             ' __in  LPLINEEXTENSIONID lpExtensionID
 , BYVAL dwRequestMode AS DWORD _                       ' __in  DWORD dwRequestMode
 , BYREF lpExtensionName AS VARSTRING _                 ' __in  LPVARSTRING lpExtensionName
 , BYREF lpdwPriority AS DWORD _                        ' __out LPDWORD lpdwPriority
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetCallInfo function enables an application to obtain fixed information about
' the specified call.
' ========================================================================================
DECLARE FUNCTION lineGetCallInfo IMPORT "TAPI32.DLL" ALIAS "lineGetCallInfoA" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpCallInfo AS LINECALLINFO _                   ' __out LPLINECALLINFO lpCallInfo
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetCallInfoW IMPORT "TAPI32.DLL" ALIAS "lineGetCallInfoW" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpCallInfo AS LINECALLINFO _                   ' __out LPLINECALLINFO lpCallInfo
 ) AS LONG                                              ' LONG


' ========================================================================================
' The lineGetCallStatus function returns the current status of the specified call.
' ========================================================================================
DECLARE FUNCTION lineGetCallStatus IMPORT "TAPI32.DLL" ALIAS "lineGetCallStatus" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpCallStatus AS LINECALLSTATUS _               ' __out LPLINECALLSTATUS lpCallStatus
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetConfRelatedCalls function returns a list of call handles that are part of the
' same conference call as the specified call. The specified call is either a conference
' call or a participant call in a conference call. New handles are generated for those
' calls for which the application does not already have handles, and the application is
' granted monitor privilege to those calls.
' ========================================================================================
DECLARE FUNCTION lineGetConfRelatedCalls IMPORT "TAPI32.DLL" ALIAS "lineGetConfRelatedCalls" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpCallList AS LINECALLLIST _                   ' __out LPLINECALLLIST lpCallList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetCountry function fetches the stored dialing rules and other information
' related to a specified country/region, the first country/region in the country/region
' list, or all countries/regions.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineGetCountry IMPORT "TAPI32.DLL" ALIAS "lineGetCountryA" ( _
   BYVAL dwCountryID AS DWORD _                         ' __in  DWORD dwCountryID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpLineCountryList AS LINECOUNTRYLIST _         ' __out LPLINECOUNTRYLIST lpLineCountryList
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineGetCountryW IMPORT "TAPI32.DLL" ALIAS "lineGetCountryW" ( _
   BYVAL dwCountryID AS DWORD _                         ' __in  DWORD dwCountryID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpLineCountryList AS LINECOUNTRYLIST _         ' __out LPLINECOUNTRYLIST lpLineCountryList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetDevCaps function queries a specified line device to determine its telephony
' capabilities. The returned information is valid for all addresses on the line device.
' ========================================================================================
DECLARE FUNCTION lineGetDevCaps IMPORT "TAPI32.DLL" ALIAS "lineGetDevCapsA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpLineDevCaps AS LINEDEVCAPS _                 ' __out LPLINEDEVCAPS lpLineDevCaps
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetDevCapsW IMPORT "TAPI32.DLL" ALIAS "lineGetDevCapsW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpLineDevCaps AS LINEDEVCAPS _                 ' __out LPLINEDEVCAPS lpLineDevCaps
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetDevConfig function returns an "opaque" data structure object, the contents of
' which are specific to the line (service provider) and device class. The data structure
' object stores the current configuration of a media-stream device associated with the
' line device.
' ========================================================================================
DECLARE FUNCTION lineGetDevConfig IMPORT "TAPI32.DLL" ALIAS "lineGetDevConfigA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpDeviceConfig AS VARSTRING _                  ' __out LPVARSTRING lpDeviceConfig
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetDevConfigW IMPORT "TAPI32.DLL" ALIAS "lineGetDevConfigW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpDeviceConfig AS VARSTRING _                  ' __out LPVARSTRING lpDeviceConfig
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineGetGroupList function returns a list of ACD groups available on the ACD system.
' It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function
' handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETGROUPLIST.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetGroupList IMPORT "TAPI32.DLL" ALIAS "lineGetGroupListA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpGroupList AS LINEAGENTGROUPLIST _            ' __out LPLINEAGENTGROUPLIST lpGroupList
 ) AS LONG                                              ' LONG

' // TAPI v2.2
DECLARE FUNCTION lineGetGroupListW IMPORT "TAPI32.DLL" ALIAS "lineGetGroupListW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpGroupList AS LINEAGENTGROUPLIST _            ' __out LPLINEAGENTGROUPLIST lpGroupList
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineGetIcon function allows an application to retrieve a service line device-specific
' (or provider-specific) icon for display to the user.
' ========================================================================================
DECLARE FUNCTION lineGetIcon IMPORT "TAPI32.DLL" ALIAS "lineGetIconA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 , BYREF lphIcon AS DWORD _                             ' __out LPHICON lphIcon
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetIconW IMPORT "TAPI32.DLL" ALIAS "lineGetIconW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 , BYREF lphIcon AS DWORD _                             ' __out LPHICON lphIcon
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetID function returns a device identifier for the specified device class
' associated with the selected line, address, or call.
' ========================================================================================
DECLARE FUNCTION lineGetID IMPORT "TAPI32.DLL" ALIAS "lineGetIDA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYVAL dwSelect AS DWORD _                            ' __in  DWORD dwSelect
 , BYREF lpDeviceID AS VARSTRING _                      ' __out LPVARSTRING lpDeviceID
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetIDW IMPORT "TAPI32.DLL" ALIAS "lineGetIDW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYVAL dwSelect AS DWORD _                            ' __in  DWORD dwSelect
 , BYREF lpDeviceID AS VARSTRING _                      ' __out LPVARSTRING lpDeviceID
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetLineDevStatus function enables an application to query the specified open
' line device for its current status.
' ========================================================================================
DECLARE FUNCTION lineGetLineDevStatus IMPORT "TAPI32.DLL" ALIAS "lineGetLineDevStatusA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpLineDevStatus AS LINEDEVSTATUS _             ' __out LPLINEDEVSTATUS lpLineDevStatus
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetLineDevStatusW IMPORT "TAPI32.DLL" ALIAS "lineGetLineDevStatusW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpLineDevStatus AS LINEDEVSTATUS _             ' __out LPLINEDEVSTATUS lpLineDevStatus
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineGetMessage function returns the next TAPI message that is queued for delivery
' to an application that is using the Event Handle notification mechanism (see
' lineInitializeEx for further details).
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineGetMessage IMPORT "TAPI32.DLL" ALIAS "lineGetMessage" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYREF lpMessage AS LINEMESSAGE _                     ' __out LPLINEMESSAGE lpMessage
 , BYVAL dwTimeout AS DWORD _                           ' __in  DWORD dwTimeout
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineGetNewCalls function returns call handles to calls on a specified line or
' address for which the application currently does not have handles. The application is
' granted monitor privilege to these calls.
' ========================================================================================
DECLARE FUNCTION lineGetNewCalls IMPORT "TAPI32.DLL" ALIAS "lineGetNewCalls" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYVAL dwSelect AS DWORD _                            ' __in  DWORD dwSelect
 , BYREF lpCallList AS LINECALLLIST _                   ' __out LPLINECALLLIST lpCallList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetNumRings function determines the number of rings an incoming call on the
' given address should ring prior to answering the call.
' ========================================================================================
DECLARE FUNCTION lineGetNumRings IMPORT "TAPI32.DLL" ALIAS "lineGetNumRings" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lpdwNumRings AS DWORD _                        ' __out LPDWORD lpdwNumRings
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetProviderList function returns a list of service providers currently installed
' in the telephony system.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineGetProviderList IMPORT "TAPI32.DLL" ALIAS "lineGetProviderListA" ( _
   BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpProviderList AS LINEPROVIDERLIST _           ' __out LPLINEPROVIDERLIST lpProviderList
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineGetProviderListW IMPORT "TAPI32.DLL" ALIAS "lineGetProviderListW" ( _
   BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpProviderList AS LINEPROVIDERLIST _           ' __out LPLINEPROVIDERLIST lpProviderList
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineGetProxyStatus function returns a list of proxy request types that are currently
' being serviced for the specified device.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetProxyStatus IMPORT "TAPI32.DLL" ALIAS "lineGetProxyStatus" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAppAPIVersion AS DWORD _                     ' __in  DWORD dwAppAPIVersion
 , BYREF lpLineProxyReqestList AS LINEPROXYREQUESTLIST _ ' __out LPLINEPROXYREQUESTLIST  lpLineProxyReqestList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetQueueInfo function returns a structure holding the ACD information associated
' with a particular queue. It generates a LINE_PROXYREQUEST message to be sent to a
' registered proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_GETQUEUEINFO.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetQueueInfo IMPORT "TAPI32.DLL" ALIAS "lineGetQueueInfo" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwQueueID AS DWORD _                           ' __in  DWORD dwQueueID
 , BYREF lpLineQueueInfo AS LINEQUEUEINFO _             ' __out LPLINEQUEUEINFO lpLineQueueInfo
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetQueueList function returns a list of queues associated with a particular ACD
' Group. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy
' function handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETQUEUELIST.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineGetQueueList IMPORT "TAPI32.DLL" ALIAS "lineGetQueueListA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpGroupID AS GUID _                            ' __in  LPGUID lpGroupID
 , BYREF lpQueueList AS LINEQUEUELIST _                 ' __out LPLINEQUEUELIST lpQueueList
 ) AS LONG                                              ' LONG

' // TAPI v2.2
DECLARE FUNCTION lineGetQueueListW IMPORT "TAPI32.DLL" ALIAS "lineGetQueueListW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpGroupID AS GUID _                            ' __in  LPGUID lpGroupID
 , BYREF lpQueueList AS LINEQUEUELIST _                 ' __out LPLINEQUEUELIST lpQueueList
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetRequest function retrieves the next by-proxy request for the specified
' request mode.
' ========================================================================================
DECLARE FUNCTION lineGetRequest IMPORT "TAPI32.DLL" ALIAS "lineGetRequestA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwRequestMode AS DWORD _                       ' __in  DWORD dwRequestMode
 , BYREF lpRequestBuffer AS ANY _                       ' __out LPVOID lpRequestBuffer
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetRequestW IMPORT "TAPI32.DLL" ALIAS "lineGetRequestW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwRequestMode AS DWORD _                       ' __in  DWORD dwRequestMode
 , BYREF lpRequestBuffer AS ANY _                       ' __out LPVOID lpRequestBuffer
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetStatusMessages function enables an application to query which notification
' messages the application is set up to receive for events related to status changes for
' the specified line or any of its addresses.
' ========================================================================================
DECLARE FUNCTION lineGetStatusMessages IMPORT "TAPI32.DLL" ALIAS "lineGetStatusMessages" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpdwLineStates AS DWORD _                      ' __out LPDWORD lpdwLineStates
 , BYREF lpdwAddressStates AS DWORD _                   ' __out LPDWORD lpdwAddressStates
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineGetTranslateCaps function returns address translation capabilities.
' ========================================================================================
DECLARE FUNCTION lineGetTranslateCaps IMPORT "TAPI32.DLL" ALIAS "lineGetTranslateCapsA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpTranslateCaps AS LINETRANSLATECAPS _         ' __out LPLINETRANSLATECAPS lpTranslateCaps
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineGetTranslateCapsW IMPORT "TAPI32.DLL" ALIAS "lineGetTranslateCapsW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpTranslateCaps AS LINETRANSLATECAPS _         ' __out LPLINETRANSLATECAPS lpTranslateCaps
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineHandoff function gives ownership of the specified call to another application.
' The application can be either specified directly by its file name or indirectly as the
' highest priority application that handles calls of the specified media mode.
' ========================================================================================
DECLARE FUNCTION lineHandoff IMPORT "TAPI32.DLL" ALIAS "lineHandoffA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYREF lpszFileName AS ASCIIZ _                       ' __in LPCSTR lpszFileName
 , BYVAL dwMediaMode AS DWORD _                         ' __in DWORD dwMediaMode
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineHandoffW IMPORT "TAPI32.DLL" ALIAS "lineHandoffW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYREF lpszFileName AS WSTRINGZ  _                    ' __in LPCWSTR lpszFileName
 , BYVAL dwMediaMode AS DWORD _                         ' __in DWORD dwMediaMode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineHold function places the specified call on hold.
' ========================================================================================
DECLARE FUNCTION lineHold IMPORT "TAPI32.DLL" ALIAS "lineHold" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineInitialize function is obsolete. It continues to be exported by Tapi.dll and
' Tapi32.dll for backward compatibility with applications using API versions 1.3 and 1.4.
' Applications using API version 2.0 or later must use lineInitializeEx instead.
' For TAPI Versions 1.4 and Earlier:   The lineInitialize function initializes the
' application's use of Tapi.dll for subsequent use of the line abstraction. The
' function registers the application's specified notification mechanism and returns the
' number of line devices available to the application. A line device is any device that
' provides an implementation for the line-prefixed functions in TAPI.
' ========================================================================================
DECLARE FUNCTION lineInitialize IMPORT "TAPI32.DLL" ALIAS "lineInitialize" ( _
   BYREF lphLineApp AS DWORD _                          ' __out LPHLINEAPP lphLineApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  LINECALLBACK lpfnCallback
 , BYREF lpszAppName AS ASCIIZ _                        ' __in  LPCSTR lpszAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineInitializeEx function initializes the application's use of TAPI for subsequent
' use of the line abstraction. It registers the application's specified notification
' mechanism and returns the number of line devices available to the application. A line
' device is any device that provides an implementation for the line-prefixed functions in
' the Telephony API.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineInitializeEx IMPORT "TAPI32.DLL" ALIAS "lineInitializeExA" ( _
   BYREF lphLineApp AS DWORD _                          ' __out LPHLINEAPP lphLineApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  LINECALLBACK lpfnCallback
 , BYREF lpszFriendlyAppName AS ASCIIZ _                ' __in  LPCSTR lpszFriendlyAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 , BYREF lpdwAPIVersion AS DWORD _                      ' __in_out LPDWORD lpdwAPIVersion
 , BYREF lpLineInitializeExParams AS LINEINITIALIZEEXPARAMS _ ' __in  LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION lineInitializeExW IMPORT "TAPI32.DLL" ALIAS "lineInitializeExW" ( _
   BYREF lphLineApp AS DWORD _                          ' __out LPHLINEAPP lphLineApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  LINECALLBACK lpfnCallback
 , BYREF lpszFriendlyAppName AS WSTRINGZ _              ' __in  LPCWSTR lpszFriendlyAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 , BYREF lpdwAPIVersion AS DWORD _                      ' __out LPDWORD lpdwAPIVersion
 , BYREF lpLineInitializeExParams AS LINEINITIALIZEEXPARAMS _ ' __in  LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineMakeCall function places a call on the specified line to the specified
' destination address. Optionally, call parameters can be specified if anything but
' default call setup parameters are requested.
' ========================================================================================
DECLARE FUNCTION lineMakeCall IMPORT "TAPI32.DLL" ALIAS "lineMakeCallA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in  LPCSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in  DWORD dwCountryCode
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineMakeCallW IMPORT "TAPI32.DLL" ALIAS "lineMakeCallW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS WSTRINGZ _                  ' __in  LPCWSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in  DWORD dwCountryCode
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineMonitorDigits function enables and disables the unbuffered detection of digits
' received on the call. Each time a digit of the specified digit mode is detected, a
' message is sent to the application indicating which digit has been detected.
' ========================================================================================
DECLARE FUNCTION lineMonitorDigits IMPORT "TAPI32.DLL" ALIAS "lineMonitorDigits" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwDigitModes AS DWORD _                        ' __in DWORD dwDigitModes
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineMonitorMedia function enables and disables the detection of media types (modes)
' on the specified call. When a media type is detected, a message is sent to the
' application. For more information, see ITLegacyCallMediaControl::MonitorMedia.
' ========================================================================================
DECLARE FUNCTION lineMonitorMedia IMPORT "TAPI32.DLL" ALIAS "lineMonitorMedia" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwMediaModes AS DWORD _                        ' __in DWORD dwMediaModes
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineMonitorTones function enables and disables the detection of inband tones on the
' call. Each time a specified tone is detected, a message is sent to the application.
' ========================================================================================
DECLARE FUNCTION lineMonitorTones IMPORT "TAPI32.DLL" ALIAS "lineMonitorTones" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYREF lpToneList AS LINEMONITORTONE _                ' __in LPLINEMONITORTONE const lpToneList
 , BYVAL dwNumEntries AS DWORD _                        ' __in DWORD dwNumEntries
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineNegotiateAPIVersion function allows an application to negotiate an API version
' to use.
' ========================================================================================
DECLARE FUNCTION lineNegotiateAPIVersion IMPORT "TAPI32.DLL" ALIAS "lineNegotiateAPIVersion" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPILowVersion AS DWORD _                     ' __in  DWORD dwAPILowVersion
 , BYVAL dwAPIHighVersion AS DWORD _                    ' __in  DWORD dwAPIHighVersion
 , BYREF lpdwAPIVersion AS DWORD _                      ' __out LPDWORD lpdwAPIVersion
 , BYREF lpExtensionID AS LINEEXTENSIONID _             ' __out LPLINEEXTENSIONID lpExtensionID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineNegotiateExtVersion function allows an application to negotiate an extension
' version to use with the specified line device. This operation need not be called if the
' application does not support extensions.
' ========================================================================================
DECLARE FUNCTION lineNegotiateExtVersion IMPORT "TAPI32.DLL" ALIAS "lineNegotiateExtVersion" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtLowVersion AS DWORD _                     ' __in  DWORD dwExtLowVersion
 , BYVAL dwExtHighVersion AS DWORD _                    ' __in  DWORD dwExtHighVersion
 , BYREF lpdwExtVersion AS DWORD _                      ' __out LPDWORD lpdwExtVersion
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineOpen function opens the line device specified by its device identifier and
' returns a line handle for the corresponding opened line device. This line handle is used
' in subsequent operations on the line device.
' ========================================================================================
DECLARE FUNCTION lineOpen IMPORT "TAPI32.DLL" ALIAS "lineOpenA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lphLine AS DWORD _                             ' __out LPHLINE lphLine
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYVAL dwCallbackInstance AS DWORD _                  ' __in  DWORD_PTR dwCallbackInstance
 , BYVAL dwPrivileges AS DWORD _                        ' __in  DWORD dwPrivileges
 , BYVAL dwMediaModes AS DWORD _                        ' __in  DWORD dwMediaModes
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineOpenW IMPORT "TAPI32.DLL" ALIAS "lineOpenW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lphLine AS DWORD _                             ' __out LPHLINE lphLine
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYVAL dwCallbackInstance AS DWORD _                  ' __in  DWORD_PTR dwCallbackInstance
 , BYVAL dwPrivileges AS DWORD _                        ' __in  DWORD dwPrivileges
 , BYVAL dwMediaModes AS DWORD _                        ' __in  DWORD dwMediaModes
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The linePark function parks the specified call according to the specified park mode.
' ========================================================================================
DECLARE FUNCTION linePark IMPORT "TAPI32.DLL" ALIAS "lineParkA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwParkMode AS DWORD _                          ' __in DWORD dwParkMode
 , BYREF lpszDirAddress AS ASCIIZ _                     ' __in  LPCSTR lpszDirAddress
 , BYREF lpNonDirAddress AS VARSTRING _                 ' __out LPVARSTRING lpNonDirAddress
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineParkW IMPORT "TAPI32.DLL" ALIAS "lineParkW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwParkMode AS DWORD _                          ' __in DWORD dwParkMode
 , BYREF lpszDirAddress AS WSTRINGZ _                   ' __in  LPCWSTR lpszDirAddress
 , BYREF lpNonDirAddress AS VARSTRING _                 ' __out LPVARSTRING lpNonDirAddress
 ) AS LONG                                              ' LONG

' ========================================================================================
' The linePickup function picks up a call alerting at the specified destination address
' and returns a call handle for the picked-up call. If invoked with NULL for the
' lpszDestAddress parameter, a group pickup is performed. If required by the device,
' lpszGroupID specifies the group identifier to which the alerting station belongs.
' ========================================================================================
DECLARE FUNCTION linePickup IMPORT "TAPI32.DLL" ALIAS "linePickupA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in  LPCSTR lpszDestAddress
 , BYREF lpszGroupID AS ASCIIZ _                        ' __in  LPCSTR lpszGroupID
 ) AS LONG                                              ' LONG

DECLARE FUNCTION linePickupW IMPORT "TAPI32.DLL" ALIAS "linePickupW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS WSTRINGZ _                  ' __in  LPCWSTR lpszDestAddress
 , BYREF lpszGroupID AS WSTRINGZ _                      ' __in  LPCWSTR lpszGroupID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The linePrepareAddToConference function prepares an existing conference call for the
' addition of another party.
' ========================================================================================
DECLARE FUNCTION linePrepareAddToConference IMPORT "TAPI32.DLL" ALIAS "linePrepareAddToConferenceA" ( _
   BYVAL hConfCall AS DWORD _                           ' __in  HCALL hConfCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION linePrepareAddToConferenceW IMPORT "TAPI32.DLL" ALIAS "linePrepareAddToConferenceW" ( _
   BYVAL hConfCall AS DWORD _                           ' __in  HCALL hConfCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineProxyMessage function is used by a registered proxy request handler to generate
' TAPI messages related to its role. For example, an ACD agent handler can use this
' function to generate LINE_AGENTSTATUS messages that are received by all applications
' that have the specified line open. TAPI suppresses generation of the message on the
' hLine specified in the function parameters.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineProxyMessage IMPORT "TAPI32.DLL" ALIAS "lineProxyMessage" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYVAL dwMsg AS DWORD _                               ' __in  DWORD dwMsg
 , BYVAL dwParam1 AS DWORD _                            ' __in  DWORD dwParam1
 , BYVAL dwParam2 AS DWORD _                            ' __in  DWORD dwParam2
 , BYVAL dwParam3 AS DWORD _                            ' __in  DWORD dwParam3
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineProxyResponse function indicates completion of a proxy request by a registered
' proxy handler, such as an ACD agent handler on a server.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineProxyResponse IMPORT "TAPI32.DLL" ALIAS "lineProxyResponse" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYREF lpProxyRequest AS LINEPROXYREQUEST _           ' __in_out LPLINEPROXYREQUEST lpProxyRequest
 , BYVAL dwResult AS DWORD _                            ' __in  DWORD dwResult
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineRedirect function redirects the specified offering call to the specified
' destination address.
' ========================================================================================
DECLARE FUNCTION lineRedirect IMPORT "TAPI32.DLL" ALIAS "lineRedirectA" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in  LPCSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in  DWORD dwCountryCode
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineRedirectW IMPORT "TAPI32.DLL" ALIAS "lineRedirectW" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpszDestAddress AS WSTRINGZ _                  ' __in  LPCWSTR lpszDestAddress
 , BYVAL dwCountryCode AS DWORD _                       ' __in  DWORD dwCountryCode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineRegisterRequestRecipient function registers the invoking application as a
' recipient of requests for the specified request mode.
' ========================================================================================
DECLARE FUNCTION lineRegisterRequestRecipient IMPORT "TAPI32.DLL" ALIAS "lineRegisterRequestRecipient" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwRegistrationInstance AS DWORD _              ' __in  DWORD dwRegistrationInstance
 , BYVAL dwRequestMode AS DWORD _                       ' __in  DWORD dwRequestMode
 , BYVAL bEnable AS DWORD _                             ' __in  DWORD bEnable
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineReleaseUserUserInfo function informs the service provider that the application
' has processed the user-user information contained in the LINECALLINFO structure, and
' that subsequently received user-user information can now be written into that structure.
' The service provider sends a LINE_CALLINFO message indicating LINECALLINFOSTATE_USERUSERINFO
' when new information is available.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineReleaseUserUserInfo IMPORT "TAPI32.DLL" ALIAS "lineReleaseUserUserInfo" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineRemoveFromConference function removes the specified call from the conference
' call to which it currently belongs. The remaining calls in the conference call are
' unaffected.
' ========================================================================================
DECLARE FUNCTION lineRemoveFromConference IMPORT "TAPI32.DLL" ALIAS "lineRemoveFromConference" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineRemoveProvider function removes an existing telephony service provider from the
' telephony system.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineRemoveProvider IMPORT "TAPI32.DLL" ALIAS "lineRemoveProvider" ( _
   BYVAL dwPermanentProviderID AS DWORD _               ' __in  DWORD dwPermanentProviderID
 , BYVAL hwndOwner AS DWORD _                           ' __in  HWND hwndOwner
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSecureCall function secures the call from any interruptions or interference that
' can affect the call's media stream.
' ========================================================================================
DECLARE FUNCTION lineSecureCall IMPORT "TAPI32.DLL" ALIAS "lineSecureCall" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSendUserUserInfo function sends user-user information to the remote party on
' the specified call.
' ========================================================================================
DECLARE FUNCTION lineSendUserUserInfo IMPORT "TAPI32.DLL" ALIAS "lineSendUserUserInfo" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lpsUserUserInfo AS ASCIIZ _                    ' __in  LPCSTR lpsUserUserInfo
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD dwSize
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineSetAgentActivity function sets the agent activity code associated with a
' particular address.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetAgentActivity IMPORT "TAPI32.DLL" ALIAS "lineSetAgentActivity" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYVAL dwActivityID AS DWORD _                        ' __in DWORD dwActivityID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetAgentGroup function sets the agent groups into which the agent is logged into
' on a particular address.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetAgentGroup IMPORT "TAPI32.DLL" ALIAS "lineSetAgentGroup" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYREF lpAgentGroupList AS LINEAGENTGROUPLIST _       ' __in LPLINEAGENTGROUPLIST lpAgentGroupList
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineSetAgentMeasurementPeriod function sets the measurement period associated with a
' particular agent. It generates a LINE_PROXYREQUEST message to be sent to a registered
' proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineSetAgentMeasurementPeriod IMPORT "TAPI32.DLL" ALIAS "lineSetAgentMeasurementPeriod" ( _
   BYVAL DWORD _                            ' __in HLINE  hLine
 , BYVAL DWORD _                            ' __in HAGENT hAgent
 , BYVAL DWORD _                            ' __in DWORD  dwMeasurementPeriod
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetAgentSessionState function sets the agent session state associated with a
' particular agent session handle. It generates a LINE_PROXYREQUEST message to be sent to
' a registered proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_SETAGENTSESSIONSTATE.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineSetAgentSessionState IMPORT "TAPI32.DLL" ALIAS "lineSetAgentSessionState" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL hAgentSession AS DWORD _                       ' __in HAGENTSESSION hAgentSession
 , BYVAL dwAgentSessionState AS DWORD _                 ' __in DWORD dwAgentSessionState
 , BYVAL dwNextAgentSessionState AS DWORD _             ' __in DWORD dwNextAgentSessionState
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetAgentStateEx function sets the agent state associated with a particular agent
' handle. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function
' handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_SETAGENTSTATEEX.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineSetAgentStateEx IMPORT "TAPI32.DLL" ALIAS "lineSetAgentStateEx" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL hAgent AS DWORD _                              ' __in HAGENT hAgent
 , BYVAL dwAgentState AS DWORD _                        ' __in DWORD dwAgentState
 , BYVAL dwNextAgentState AS DWORD _                    ' __in DWORD dwNextAgentState
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetAgentState function sets the agent state associated with a particular address.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetAgentState IMPORT "TAPI32.DLL" ALIAS "lineSetAgentState" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYVAL dwAgentState AS DWORD _                        ' __in DWORD dwAgentState
 , BYVAL dwNextAgentState AS DWORD _                    ' __in DWORD dwNextAgentState
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetAppPriority function enables an application to set its priority in the
' handoff priority list for a particular media type or Assisted Telephony request mode, or
' to remove itself from the priority list.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineSetAppPriority IMPORT "TAPI32.DLL" ALIAS "lineSetAppPriorityA" ( _
   BYREF lpszAppFilename AS ASCIIZ _                    ' __in LPCSTR lpszAppFilename
 , BYVAL dwMediaMode AS DWORD _                         ' __in DWORD dwMediaMode
 , BYREF lpExtensionID AS LINEEXTENSIONID _             ' __in LPLINEEXTENSIONID lpExtensionID
 , BYVAL dwRequestMode AS DWORD _                       ' __in DWORD dwRequestMode
 , BYREF lpszExtensionName AS ASCIIZ _                  ' __in LPCSTR lpszExtensionName
 , BYVAL dwPriority AS DWORD _                          ' __in DWORD dwPriority
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineSetAppPriorityW IMPORT "TAPI32.DLL" ALIAS "lineSetAppPriorityW" ( _
   BYREF lpszAppFilename AS WSTRINGZ _                  ' __in LPCWSTR lpszAppFilename
 , BYVAL dwMediaMode AS DWORD _                         ' __in DWORD dwMediaMode
 , BYREF lpExtensionID AS LINEEXTENSIONID _             ' __in LPLINEEXTENSIONID lpExtensionID
 , BYVAL dwRequestMode AS DWORD _                       ' __in DWORD dwRequestMode
 , BYREF lpszExtensionName AS WSTRINGZ  _               ' __in LPCWSTR lpszExtensionName
 , BYVAL dwPriority AS DWORD _                          ' __in DWORD dwPriority
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetAppSpecific function enables an application to set the application-specific
' field of the specified call's call-information record.
' ========================================================================================
DECLARE FUNCTION lineSetAppSpecific IMPORT "TAPI32.DLL" ALIAS "lineSetAppSpecific" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwAppSpecific AS DWORD _                       ' __in DWORD dwAppSpecific
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineSetCallData function sets the CallData member in LINECALLINFO. Depending on the
' service provider implementation, the CallData member can be propagated to all
' applications having handles to the call, including those on other machines (through the
' server), and can travel with the call when it is transferred.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetCallData IMPORT "TAPI32.DLL" ALIAS "lineSetCallData" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYREF lpCallData AS ANY _                            ' __in LPVOID lpCallData
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetCallParams function allows an application to change bearer mode and/or the
' rate parameters of an existing call.
' ========================================================================================
DECLARE FUNCTION lineSetCallParams IMPORT "TAPI32.DLL" ALIAS "lineSetCallParams" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwBearerMode AS DWORD _                        ' __in DWORD dwBearerMode
 , BYVAL dwMinRate AS DWORD _                           ' __in DWORD dwMinRate
 , BYVAL dwMaxRate AS DWORD _                           ' __in DWORD dwMaxRate
 , BYREF lpDialParams AS LINEDIALPARAMS _               ' __in LPLINEDIALPARAMS const lpDialParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetCallPrivilege function sets the application's privilege to the specified privilege.
' ========================================================================================
DECLARE FUNCTION lineSetCallPrivilege IMPORT "TAPI32.DLL" ALIAS "lineSetCallPrivilege" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwCallPrivilege AS DWORD _                     ' __in DWORD dwCallPrivilege
 ) AS LONG                                              ' LONG
' ========================================================================================

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineSetCallQualityOfService function allows the application to attempt to change the
' quality of service parameters (reserved capacity and performance guarantees) for an
' existing call. Except for basic parameter validation, this is a straight pass-through to
' a service provider.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetCallQualityOfService IMPORT "TAPI32.DLL" ALIAS "lineSetCallQualityOfService" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYREF lpSendingFlowspec AS ANY _                     ' __in LPVOID lpSendingFlowspec
 , BYVAL dwSendingFlowspecSize AS DWORD _               ' __in DWORD dwSendingFlowspecSize
 , BYREF lpReceivingFlowspec AS ANY _                   ' __in LPVOID lpReceivingFlowspec
 , BYVAL dwReceivingFlowspecSize AS DWORD _             ' __in DWORD dwReceivingFlowspecSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetCallTreatment function sets the sounds a party on a call that is unanswered
' or on hold hears. Except for basic parameter validation, it is a straight pass-through
' by TAPI to the service provider.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetCallTreatment IMPORT "TAPI32.DLL" ALIAS "lineSetCallTreatment"( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwTreatment AS DWORD _                         ' __in DWORD dwTreatment
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetCurrentLocation function sets the location used as the context for address
' translation.
' ========================================================================================
DECLARE FUNCTION lineSetCurrentLocation IMPORT "TAPI32.DLL" ALIAS "lineSetCurrentLocation" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 , BYVAL dwLocation AS DWORD _                          ' __in DWORD dwLocation
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetDevConfig function allows the application to restore the configuration of a
' media stream device on a line device to a setup previously obtained using
' lineGetDevConfig. For example, the contents of this structure could specify data rate,
' character format, modulation schemes, and error control protocol settings for a
' "datamodem" media device associated with the line.
' ========================================================================================
DECLARE FUNCTION lineSetDevConfig IMPORT "TAPI32.DLL" ALIAS "lineSetDevConfigA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYREF lpDeviceConfig AS ANY _                        ' __in LPVOID const lpDeviceConfig
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineSetDevConfigW IMPORT "TAPI32.DLL" ALIAS "lineSetDevConfigW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYREF lpDeviceConfig AS ANY _                        ' __in LPVOID const lpDeviceConfig
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The lineSetLineDevStatus function sets the line device status. Except for basic
' parameter validation, it is a straight pass-through to the service provider. The service
' provider sends a LINE_LINEDEVSTATE message to inform applications of the new state, when
' set; TAPI does not synthesize these messages.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION lineSetLineDevStatus IMPORT "TAPI32.DLL" ALIAS "lineSetLineDevStatus" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwStatusToChange AS DWORD _                    ' __in DWORD dwStatusToChange
 , BYVAL fStatus AS DWORD _                             ' __in DWORD fStatus
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetMediaControl function enables and disables control actions on the media
' stream associated with the specified line, address, or call. Media control actions can
' be triggered by the detection of specified digits, media types, custom tones, and call
' states.
' ========================================================================================
DECLARE FUNCTION lineSetMediaControl IMPORT "TAPI32.DLL" ALIAS "lineSetMediaControl" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwSelect AS DWORD _                            ' __in DWORD dwSelect
 , BYREF lpDigitList AS LINEMEDIACONTROLDIGIT _         ' __in LPLINEMEDIACONTROLDIGIT const lpDigitList
 , BYVAL dwDigitNumEntries AS DWORD _                   ' __in DWORD dwDigitNumEntries
 , BYREF lpMediaList AS LINEMEDIACONTROLMEDIA _         ' __in LPLINEMEDIACONTROLMEDIA const lpMediaList
 , BYVAL dwMediaNumEntries AS DWORD _                   ' __in DWORD dwMediaNumEntries
 , BYREF lpToneList AS LINEMEDIACONTROLTONE _           ' __in LPLINEMEDIACONTROLTONE const lpToneList
 , BYVAL dwToneNumEntries AS DWORD _                    ' __in DWORD dwToneNumEntries
 , BYREF lpCallStateList AS LINEMEDIACONTROLCALLSTATE _ ' __in LPLINEMEDIACONTROLCALLSTATE const lpCallStateList
 , BYVAL dwCallStateNumEntries AS DWORD _               ' __in DWORD dwCallStateNumEntries
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetMediaMode function sets the media type(s) of the specified call in its
' LINECALLINFO structure. For more information, see ITLegacyCallMediaControl::SetMediaType.
' ========================================================================================
DECLARE FUNCTION lineSetMediaMode IMPORT "TAPI32.DLL" ALIAS "lineSetMediaMode" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwMediaModes AS DWORD _                        ' __in DWORD dwMediaModes
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020002
' ========================================================================================
' The lineSetQueueMeasurementPeriod function sets the measurement period associated with a
' particular queue. It generates a LINE_PROXYREQUEST message to be sent to a registered
' proxy function handler, referencing a LINEPROXYREQUEST structure of type
' LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD.
' ========================================================================================
' // TAPI v2.2
DECLARE FUNCTION lineSetQueueMeasurementPeriod IMPORT "TAPI32.DLL" ALIAS "lineSetQueueMeasurementPeriod" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwQueueID AS DWORD _                           ' __in DWORD dwQueueID
 , BYVAL dwMeasurementPeriod AS DWORD _                 ' __in DWORD dwMeasurementPeriod
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The lineSetNumRings function sets the number of rings that must occur before an incoming
' call is answered. This function can be used to implement a toll-saver-style function. It
' allows multiple independent applications to each register the number of rings. The
' function lineGetNumRings returns the minimum number of rings requested. It can be used
' by the application that answers incoming calls to determine the number of rings it
' should wait before answering the call.
' ========================================================================================
DECLARE FUNCTION lineSetNumRings IMPORT "TAPI32.DLL" ALIAS "lineSetNumRings" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYVAL dwNumRings AS DWORD _                          ' __in DWORD dwNumRings
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetStatusMessages function enables an application to specify which notification
' messages to receive for events related to status changes for the specified line or any
' of its addresses.
' ========================================================================================
DECLARE FUNCTION lineSetStatusMessages IMPORT "TAPI32.DLL" ALIAS "lineSetStatusMessages" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwLineStates AS DWORD _                        ' __in DWORD dwLineStates
 , BYVAL dwAddressStates AS DWORD _                     ' __in DWORD dwAddressStates
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetTerminal function enables an application to specify which terminal
' information related to the specified line, address, or call is to be routed. The
' lineSetTerminal function can be used while calls are in progress on the line to allow
' an application to route these events to different devices as required.
' ========================================================================================
DECLARE FUNCTION lineSetTerminal IMPORT "TAPI32.DLL" ALIAS "lineSetTerminal" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in DWORD dwAddressID
 , BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL dwSelect AS DWORD _                            ' __in DWORD dwSelect
 , BYVAL dwTerminalModes AS DWORD _                     ' __in DWORD dwTerminalModes
 , BYVAL dwTerminalID AS DWORD _                        ' __in DWORD dwTerminalID
 , BYVAL bEnable AS DWORD _                             ' __in DWORD bEnable
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetTollList function manipulates the toll list.
' ========================================================================================
DECLARE FUNCTION lineSetTollList IMPORT "TAPI32.DLL" ALIAS "lineSetTollListA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYREF lpszAddressIn AS ASCIIZ _                      ' __in LPCSTR lpszAddressIn
 , BYVAL dwTollListOption AS DWORD _                    ' __in DWORD dwTollListOption
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineSetTollListW IMPORT "TAPI32.DLL" ALIAS "lineSetTollListW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYREF lpszAddressIn AS WSTRINGZ _                    ' __in LPCWSTR lpszAddressIn
 , BYVAL dwTollListOption AS DWORD _                    ' __in DWORD dwTollListOption
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetupConference function sets up a conference call for the addition of the
' third party.
' ========================================================================================
DECLARE FUNCTION lineSetupConference IMPORT "TAPI32.DLL" ALIAS "lineSetupConferenceA" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYREF lphConfCall AS DWORD _                         ' __out LPHCALL lphConfCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYVAL dwNumParties AS DWORD _                        ' __in DWORD dwNumParties
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineSetupConferenceW IMPORT "TAPI32.DLL" ALIAS "lineSetupConferenceW" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 , BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYREF lphConfCall AS DWORD _                         ' __out LPHCALL lphConfCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYVAL dwNumParties AS DWORD _                        ' __in DWORD dwNumParties
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSetupTransfer function initiates a transfer of the call specified by the hCall
' parameter. It establishes a consultation call, lphConsultCall, on which the party can be
' dialed that can become the destination of the transfer. The application acquires owner
' privilege to the lphConsultCall parameter.
' ========================================================================================
DECLARE FUNCTION lineSetupTransfer IMPORT "TAPI32.DLL" ALIAS "lineSetupTransferA" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineSetupTransferW IMPORT "TAPI32.DLL" ALIAS "lineSetupTransferW" ( _
   BYVAL hCall AS DWORD _                               ' __in  HCALL hCall
 , BYREF lphConsultCall AS DWORD _                      ' __out LPHCALL lphConsultCall
 , BYREF lpCallParams AS LINECALLPARAMS _               ' __in  LPLINECALLPARAMS const lpCallParams
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineShutdown function shuts down the application's usage of the line abstraction of
' the API.
' ========================================================================================
DECLARE FUNCTION lineShutdown IMPORT "TAPI32.DLL" ALIAS "lineShutdown" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineSwapHold function swaps the specified active call with the specified call on
' consultation hold.
' ========================================================================================
DECLARE FUNCTION lineSwapHold IMPORT "TAPI32.DLL" ALIAS "lineSwapHold" ( _
   BYVAL hActiveCall AS DWORD _                         ' __in HCALL hActiveCall
 , BYVAL hHeldCall AS DWORD _                           ' __in HCALL hHeldCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineTranslateAddress function translates the specified address into another format.
' ========================================================================================
DECLARE FUNCTION lineTranslateAddress IMPORT "TAPI32.DLL" ALIAS "lineTranslateAddressA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpszAddressIn AS ASCIIZ _                      ' __in  LPCSTR lpszAddressIn
 , BYVAL dwCard AS DWORD _                              ' __in  DWORD dwCard
 , BYVAL dwTranslateOptions AS DWORD _                  ' __in  DWORD dwTranslateOptions
 , BYREF lpTranslateOutput AS LINETRANSLATEOUTPUT _     ' __out LPLINETRANSLATEOUTPUT lpTranslateOutput
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineTranslateAddressW IMPORT "TAPI32.DLL" ALIAS "lineTranslateAddressW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in  HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYREF lpszAddressIn AS WSTRINGZ _                    ' __in  LPCWSTR lpszAddressIn
 , BYVAL dwCard AS DWORD _                              ' __in  DWORD dwCard
 , BYVAL dwTranslateOptions AS DWORD _                  ' __in  DWORD dwTranslateOptions
 , BYREF lpTranslateOutput AS LINETRANSLATEOUTPUT _     ' __out LPLINETRANSLATEOUTPUT lpTranslateOutput
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineTranslateDialog function displays an application-modal dialog box that allows
' the user to change the current location of a phone number about to be dialed, adjust
' location and calling card parameters, and see the effect.
' ========================================================================================
' // TAPI v1.4
DECLARE FUNCTION lineTranslateDialog IMPORT "TAPI32.DLL" ALIAS "lineTranslateDialogA" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in DWORD dwAPIVersion
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND hwndOwner
 , BYREF lpszAddressIn AS ASCIIZ _                      ' __in LPCSTR lpszAddressIn
 ) AS LONG                                              ' LONG

' // TAPI v1.4
DECLARE FUNCTION lineTranslateDialogW IMPORT "TAPI32.DLL" ALIAS "lineTranslateDialogW" ( _
   BYVAL hLineApp AS DWORD _                            ' __in HLINEAPP hLineApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in DWORD dwAPIVersion
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND hwndOwner
 , BYREF lpszAddressIn AS WSTRINGZ _                    ' __in LPCWSTR lpszAddressIn
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineUncompleteCall function cancels the specified call completion request on the
' specified line.
' ========================================================================================
DECLARE FUNCTION lineUncompleteCall IMPORT "TAPI32.DLL" ALIAS "lineUncompleteCall" ( _
   BYVAL hLine AS DWORD _                               ' __in HLINE hLine
 , BYVAL dwCompletionID AS DWORD _                      ' __in DWORD dwCompletionID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineUnhold function retrieves the specified held call.
' ========================================================================================
DECLARE FUNCTION lineUnhold IMPORT "TAPI32.DLL" ALIAS "lineUnhold" ( _
   BYVAL hCall AS DWORD _                               ' __in HCALL hCall
 ) AS LONG                                              ' LONG

' ========================================================================================
' The lineUnpark function retrieves the call parked at the specified address and returns a
' call handle for it.
' ========================================================================================
DECLARE FUNCTION lineUnpark IMPORT "TAPI32.DLL" ALIAS "lineUnparkA" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS ASCIIZ _                    ' __in  LPCSTR lpszDestAddress
 ) AS LONG                                              ' LONG

DECLARE FUNCTION lineUnparkW IMPORT "TAPI32.DLL" ALIAS "lineUnparkW" ( _
   BYVAL hLine AS DWORD _                               ' __in  HLINE hLine
 , BYVAL dwAddressID AS DWORD _                         ' __in  DWORD dwAddressID
 , BYREF lphCall AS DWORD _                             ' __out LPHCALL lphCall
 , BYREF lpszDestAddress AS WSTRINGZ _                  ' __in  LPCWSTR lpszDestAddress
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneClose function closes the specified open phone device.
' ========================================================================================
DECLARE FUNCTION phoneClose IMPORT "TAPI32.DLL" ALIAS "phoneClose" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneConfigDialog function causes the provider of the specified phone device to
' display a modal dialog box (attached to the application's hwndOwner parameter) that
' allows the user to configure parameters related to the phone device specified by
' dwDeviceID.
' ========================================================================================
DECLARE FUNCTION phoneConfigDialog IMPORT "TAPI32.DLL" ALIAS "phoneConfigDialogA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND hwndOwner
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneConfigDialogW IMPORT "TAPI32.DLL" ALIAS "phoneConfigDialogW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in DWORD dwDeviceID
 , BYVAL hwndOwner AS DWORD _                           ' __in HWND hwndOwner
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneDevSpecific function is used as a general extension mechanism to enable a
' Telephony API implementation to provide features not described in the other TAPI
' functions. The meanings of these extensions are device specific.
' ========================================================================================
DECLARE FUNCTION phoneDevSpecific IMPORT "TAPI32.DLL" ALIAS "phoneDevSpecific" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYREF lpParams AS ANY _                              ' __in LPVOID lpParams
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetButtonInfo function returns information about the specified button.
' ========================================================================================
DECLARE FUNCTION phoneGetButtonInfo IMPORT "TAPI32.DLL" ALIAS "phoneGetButtonInfoA" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in DWORD dwButtonLampID
 , BYREF lpButtonInfo AS PHONEBUTTONINFO _              ' __in LPPHONEBUTTONINFO lpButtonInfo
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneGetButtonInfoW IMPORT "TAPI32.DLL" ALIAS "phoneGetButtonInfoW" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in DWORD dwButtonLampID
 , BYREF lpButtonInfo AS PHONEBUTTONINFO _              ' __in LPPHONEBUTTONINFO lpButtonInfo
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetData function uploads the information from the specified location in the
' open phone device to the specified buffer.
' ========================================================================================
DECLARE FUNCTION phoneGetData IMPORT "TAPI32.DLL" ALIAS "phoneGetData" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwDataID AS DWORD _                            ' __in DWORD dwDataID
 , BYREF lpData AS ANY _                                ' __in LPVOID lpData
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetDevCaps function queries a specified phone device to determine its
' telephony capabilities.
' ========================================================================================
DECLARE FUNCTION phoneGetDevCaps IMPORT "TAPI32.DLL" ALIAS "phoneGetDevCapsA" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in  HPHONEAPP hPhoneApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpPhoneCaps AS PHONECAPS _                     ' __out LPPHONECAPS lpPhoneCaps
 ) AS LONG                                              ' LOMG

DECLARE FUNCTION phoneGetDevCapsW IMPORT "TAPI32.DLL" ALIAS "phoneGetDevCapsW" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in  HPHONEAPP hPhoneApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYREF lpPhoneCaps AS PHONECAPS _                     ' __out LPPHONECAPS lpPhoneCaps
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetDisplay function returns the current contents of the specified phone display.
' ========================================================================================
DECLARE FUNCTION phoneGetDisplay IMPORT "TAPI32.DLL" ALIAS "phoneGetDisplay" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpDisplay AS VARSTRING _                       ' __out LPVARSTRING lpDisplay
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetGain function returns the gain setting of the microphone of the specified
' phone's hookswitch device.
' ========================================================================================
DECLARE FUNCTION phoneGetGain IMPORT "TAPI32.DLL" ALIAS "phoneGetGain" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwHookSwitchDev AS DWORD _                     ' __in  DWORD dwHookSwitchDev
 , BYREF lpdwGain AS DWORD _                            ' __out LPDWORD lpdwGain
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetHookSwitch function returns the current hookswitch mode of the specified
' open phone device.
' ========================================================================================
DECLARE FUNCTION phoneGetHookSwitch IMPORT "TAPI32.DLL" ALIAS "phoneGetHookSwitch" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpdwHookSwitchDevs AS DWORD _                  ' __out LPDWORD lpdwHookSwitchDevs
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetIcon function allows an application to retrieve a service phone
' device-specific (or provider-specific) icon that can be displayed to the user.
' ========================================================================================
DECLARE FUNCTION phoneGetIcon IMPORT "TAPI32.DLL" ALIAS "phoneGetIconA" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 , BYREF lphIcon AS DWORD _                             ' __out LPHICON lphIcon
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneGetIconW IMPORT "TAPI32.DLL" ALIAS "phoneGetIconW" ( _
   BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 , BYREF lphIcon AS DWORD _                             ' __out LPHICON lphIcon
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetID function returns a device identifier for the given device class
' associated with the specified phone device.
' ========================================================================================
DECLARE FUNCTION phoneGetID IMPORT "TAPI32.DLL" ALIAS "phoneGetIDA" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpDeviceID AS VARSTRING _                      ' __out LPVARSTRING lpDeviceID
 , BYREF lpszDeviceClass AS ASCIIZ _                    ' __in  LPCSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneGetIDW IMPORT "TAPI32.DLL" ALIAS "phoneGetIDW" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpDeviceID AS VARSTRING _                      ' __out LPVARSTRING lpDeviceID
 , BYREF lpszDeviceClass AS WSTRINGZ _                  ' __in  LPCWSTR lpszDeviceClass
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetLamp function returns the current lamp mode of the specified lamp.
' ========================================================================================
DECLARE FUNCTION phoneGetLamp IMPORT "TAPI32.DLL" ALIAS "phoneGetLamp" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in  DWORD dwButtonLampID
 , BYREF lpdwLampMode AS DWORD _                        ' __out LPDWORD lpdwLampMode
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The phoneGetMessage function returns the next TAPI message that is queued for delivery
' to an application that is using the Event Handle notification mechanism (see
' phoneInitializeEx for further details).
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION phoneGetMessage IMPORT "TAPI32.DLL" ALIAS "phoneGetMessage" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in  HPHONEAPP hPhoneApp
 , BYREF lpMessage AS PHONEMESSAGE _                    ' __out LPPHONEMESSAGE lpMessage
 , BYVAL dwTimeout AS DWORD _                           ' __in  DWORD dwTimeout
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The phoneGetRing function enables an application to query the specified open phone
' device as to its current ring mode.
' ========================================================================================
DECLARE FUNCTION phoneGetRing IMPORT "TAPI32.DLL" ALIAS "phoneGetRing" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpdwRingMode AS DWORD _                        ' __out LPDWORD lpdwRingMode
 , BYREF lpdwVolume AS DWORD _                          ' __out LPDWORD lpdwVolume
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetStatus function enables an application to query the specified open phone
' device for its overall status.
' ========================================================================================
DECLARE FUNCTION phoneGetStatus IMPORT "TAPI32.DLL" ALIAS "phoneGetStatusA" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpPhoneStatus AS PHONESTATUS _                 ' __out LPPHONESTATUS lpPhoneStatus
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneGetStatusW IMPORT "TAPI32.DLL" ALIAS "phoneGetStatusW" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpPhoneStatus AS PHONESTATUS _                 ' __out LPPHONESTATUS lpPhoneStatus
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetStatusMessages function returns which phone-state changes on the specified
' phone device generate a callback to the application.
' ========================================================================================
DECLARE FUNCTION phoneGetStatusMessages IMPORT "TAPI32.DLL" ALIAS "phoneGetStatusMessages" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYREF lpdwPhoneStates AS DWORD _                     ' __out LPDWORD lpdwPhoneStates
 , BYREF lpdwButtonModes AS DWORD _                     ' __out LPDWORD lpdwButtonModes
 , BYREF lpdwButtonStates AS DWORD _                    ' __out LPDWORD lpdwButtonStates
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneGetVolume function returns the volume setting of the specified phone's
' hookswitch device.
' ========================================================================================
DECLARE FUNCTION phoneGetVolume IMPORT "TAPI32.DLL" ALIAS "phoneGetVolume" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwHookSwitchDev AS DWORD _                     ' __in  DWORD dwHookSwitchDev
 , BYREF lpdwVolume AS DWORD _                          ' __out LPDWORD lpdwVolume
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneInitialize function is obsolete. It continues to be exported by Tapi.dll and
' Tapi32.dll for backward compatibility with applications using TAPI versions 1.3 and 1.4.
' Applications using TAPI version 2.0 or later must use phoneInitializeEx instead.
' For TAPI Versions 1.4 and Earlier:  The phoneInitialize function initializes the
' application's use of TAPI for the subsequent use of the phone functions in the
' Telephony API. It registers the application's specified notification mechanism and
' returns the number of phone devices that are available to the application.
' ========================================================================================
DECLARE FUNCTION phoneInitialize IMPORT "TAPI32.DLL" ALIAS "phoneInitialize" ( _
   BYREF lphPhoneApp AS DWORD _                         ' __out LPHPHONEAPP lphPhoneApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  PHONECALLBACK lpfnCallback
 , BYREF lpszAppName AS ASCIIZ _                        ' __in  LPCSTR lpszAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 ) AS LONG                                              ' LONG

#IF %TAPI_CURRENT_VERSION >= &H00020000
' ========================================================================================
' The phoneInitializeEx function initializes the application's use of TAPI for subsequent
' use of the phone abstraction. It registers the application's specified notification
' mechanism and returns the number of phone devices available to the application. A phone
' device is any device that provides an implementation for the phone-prefixed functions in
' the Telephony API.
' ========================================================================================
' // TAPI v2.0
DECLARE FUNCTION phoneInitializeEx IMPORT "TAPI32.DLL" ALIAS "phoneInitializeExA" ( _
   BYREF lphPhoneApp AS DWORD _                         ' __out LPHPHONEAPP lphPhoneApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  PHONECALLBACK lpfnCallback
 , BYREF lpszFriendlyAppName AS ASCIIZ _                ' __in  LPCSTR lpszFriendlyAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 , BYREF lpdwAPIVersion AS DWORD _                      ' __out LPDWORD lpdwAPIVersion
 , BYREF lpPhoneInitializeExParams AS PHONEINITIALIZEEXPARAMS _ ' __in  LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams
 ) AS LONG                                              ' LONG

' // TAPI v2.0
DECLARE FUNCTION phoneInitializeExW IMPORT "TAPI32.DLL" ALIAS "phoneInitializeExW" ( _
   BYREF lphPhoneApp AS DWORD _                         ' __out LPHPHONEAPP lphPhoneApp
 , BYVAL hInstance AS DWORD _                           ' __in  HINSTANCE hInstance
 , BYVAL lpfnCallback AS DWORD _                        ' __in  PHONECALLBACK lpfnCallback
 , BYREF lpszFriendlyAppName AS WSTRINGZ _              ' __in  LPCWSTR lpszFriendlyAppName
 , BYREF lpdwNumDevs AS DWORD _                         ' __out LPDWORD lpdwNumDevs
 , BYREF lpdwAPIVersion AS DWORD _                      ' __out LPDWORD lpdwAPIVersion
 , BYREF lpPhoneInitializeExParams AS PHONEINITIALIZEEXPARAMS _ ' __in  LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams
 ) AS LONG                                              ' LONG

#ENDIF

' ========================================================================================
' The phoneNegotiateAPIVersion allows an application to negotiate an API version to use
' for the specified phone device.
' ========================================================================================
DECLARE FUNCTION phoneNegotiateAPIVersion IMPORT "TAPI32.DLL" ALIAS "phoneNegotiateAPIVersion" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __out HPHONEAPP hPhoneApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPILowVersion AS DWORD _                     ' __in  DWORD dwAPILowVersion
 , BYVAL dwAPIHighVersion AS DWORD _                    ' __in  DWORD dwAPIHighVersion
 , BYREF lpdwAPIVersion AS DWORD _                      ' __out LPDWORD lpdwAPIVersion
 , BYREF lpExtensionID AS PHONEEXTENSIONID _            ' __out LPPHONEEXTENSIONID lpExtensionID
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneNegotiateExtVersion function allows an application to negotiate an extension
' version to use with the specified phone device. This operation need not be called if the
' application does not support extensions.
' ========================================================================================
DECLARE FUNCTION phoneNegotiateExtVersion IMPORT "TAPI32.DLL" ALIAS "phoneNegotiateExtVersion" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in  HPHONEAPP hPhoneApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtLowVersion AS DWORD _                     ' __in  DWORD dwExtLowVersion
 , BYVAL dwExtHighVersion AS DWORD _                    ' __in  DWORD dwExtHighVersion
 , BYREF lpdwExtVersion AS DWORD _                      ' __out LPDWORD lpdwExtVersion
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneOpen function opens the specified phone device. A phone device can be opened
' using either owner privilege or monitor privilege. An application that opens the phone
' with owner privilege can control the phone's lamps, display, ringer, and hookswitch or
' hookswitches. An application that opens the phone device with monitor privilege is notified
' only about events that occur at the phone, such as hookswitch changes or button presses.
' Ownership of a phone device is exclusive. In other words, only one application can have
' a phone device opened with owner privilege at a time. The phone device can, however, be
' opened multiple times with monitor privilege.
' ========================================================================================
DECLARE FUNCTION phoneOpen IMPORT "TAPI32.DLL" ALIAS "phoneOpen" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in  HPHONEAPP hPhoneApp
 , BYVAL dwDeviceID AS DWORD _                          ' __in  DWORD dwDeviceID
 , BYREF lphPhone AS DWORD _                            ' __out LPHPHONE lphPhone
 , BYVAL dwAPIVersion AS DWORD _                        ' __in  DWORD dwAPIVersion
 , BYVAL dwExtVersion AS DWORD _                        ' __in  DWORD dwExtVersion
 , BYVAL dwCallbackInstance AS DWORD _                  ' __in  DWORD_PTR dwCallbackInstance
 , BYVAL dwPrivilege AS DWORD _                         ' __in  DWORD dwPrivilege
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetButtonInfo function sets information about the specified button on the
' specified phone.
' ========================================================================================
DECLARE FUNCTION phoneSetButtonInfo IMPORT "TAPI32.DLL" ALIAS "phoneSetButtonInfoA" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in  DWORD dwButtonLampID
 , BYREF lpButtonInfo AS PHONEBUTTONINFO _              ' __in  LPPHONEBUTTONINFO const lpButtonInfo
 ) AS LONG                                              ' LONG

DECLARE FUNCTION phoneSetButtonInfoW IMPORT "TAPI32.DLL" ALIAS "phoneSetButtonInfoW" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in  DWORD dwButtonLampID
 , BYREF lpButtonInfo AS PHONEBUTTONINFO _              ' __in  LPPHONEBUTTONINFO const lpButtonInfo
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetData function downloads the information in the specified buffer to the
' opened phone device at the selected data identifier.
' ========================================================================================
DECLARE FUNCTION phoneSetData IMPORT "TAPI32.DLL" ALIAS "phoneSetData" ( _
   BYVAL hPhone AS DWORD _                              ' __in  HPHONE hPhone
 , BYVAL dwDataID AS DWORD _                            ' __in  DWORD dwDataID
 , BYREF lpData AS ANY _                                ' __in  LPVOID const lpData
 , BYVAL dwSize AS DWORD _                              ' __in  DWORD dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetDisplay function causes the specified string to be displayed on the
' specified open phone device.
' ========================================================================================
DECLARE FUNCTION phoneSetDisplay IMPORT "TAPI32.DLL" ALIAS "phoneSetDisplay" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwRow AS DWORD _                               ' __in DWORD dwRow
 , BYVAL dwColumn AS DWORD _                            ' __in DWORD dwColumn
 , BYREF lpsDisplay AS ASCIIZ _                         ' __in LPCSTR lpsDisplay
 , BYVAL dwSize AS DWORD _                              ' __in DWORD dwSize
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetGain function sets the gain of the microphone of the specified hookswitch
' device to the specified gain level.
' ========================================================================================
DECLARE FUNCTION phoneSetGain IMPORT "TAPI32.DLL" ALIAS "phoneSetGain" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwHookSwitchDev AS DWORD _                     ' __in DWORD dwHookSwitchDev
 , BYVAL dwGain AS DWORD _                              ' __in DWORD dwGain
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetHookSwitch function sets the hook state of the specified open phone's
' hookswitch devices to the specified mode. Only the hookswitch state of the hookswitch
' devices listed is affected.
' ========================================================================================
DECLARE FUNCTION phoneSetHookSwitch IMPORT "TAPI32.DLL" ALIAS "phoneSetHookSwitch" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwHookSwitchDevs AS DWORD _                    ' __in DWORD dwHookSwitchDevs
 , BYVAL dwHookSwitchMode AS DWORD _                    ' __in DWORD dwHookSwitchMode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetLamp function causes the specified lamp to be lit on the specified open
' phone device in the specified lamp mode.
' ========================================================================================
DECLARE FUNCTION phoneSetLamp IMPORT "TAPI32.DLL" ALIAS "phoneSetLamp" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwButtonLampID AS DWORD _                      ' __in DWORD dwButtonLampID
 , BYVAL dwLampMode AS DWORD _                          ' __in DWORD dwLampMode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetRing function rings the specified open phone device using the specified ring
' mode and volume.
' ========================================================================================
DECLARE FUNCTION phoneSetRing IMPORT "TAPI32.DLL" ALIAS "phoneSetRing" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwRingMode AS DWORD _                          ' __in DWORD dwRingMode
 , BYVAL dwVolume AS DWORD _                            ' __in DWORD dwVolume
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetStatusMessages function enables an application to monitor the specified
' phone device for selected status events.
' ========================================================================================
DECLARE FUNCTION phoneSetStatusMessages IMPORT "TAPI32.DLL" ALIAS "phoneSetStatusMessages" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwPhoneStates AS DWORD _                       ' __in DWORD dwPhoneStates
 , BYVAL dwButtonModes AS DWORD _                       ' __in DWORD dwButtonModes
 , BYVAL dwButtonStates AS DWORD _                      ' __in DWORD dwButtonStates
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneSetVolume function sets the volume of the speaker component of the specified
' hookswitch device to the specified level.
' ========================================================================================
DECLARE FUNCTION phoneSetVolume IMPORT "TAPI32.DLL" ALIAS "phoneSetVolume" ( _
   BYVAL hPhone AS DWORD _                              ' __in HPHONE hPhone
 , BYVAL dwHookSwitchDev AS DWORD _                     ' __in DWORD dwHookSwitchDev
 , BYVAL dwVolume AS DWORD _                            ' __in DWORD dwVolume
 ) AS LONG                                              ' LONG

' ========================================================================================
' The phoneShutdown function shuts down the application's usage of TAPI's phone abstraction.
' ========================================================================================
DECLARE FUNCTION phoneShutdown IMPORT "TAPI32.DLL" ALIAS "phoneShutdown" ( _
   BYVAL hPhoneApp AS DWORD _                           ' __in HPHONEAPP hPhoneApp
 ) AS LONG                                              ' LONG

' ========================================================================================
' The tapiGetLocationInfo function returns the country code and city (area) code that the
' user has set in the current location parameters in the Telephony Control Panel. The
' application can use this information to assist the user in forming proper canonical
' telephone numbers, such as by offering these as defaults when new numbers are entered in
' a phone book entry or database record.
' ========================================================================================
DECLARE FUNCTION tapiGetLocationInfo IMPORT "TAPI32.DLL" ALIAS "tapiGetLocationInfoA" ( _
   BYREF lpszCountryCode AS ASCIIZ _                    ' __in LPSTR lpszCountryCode
 , BYREF lpszCityCode AS ASCIIZ _                       ' __in LPSTR lpszCityCode
 ) AS LONG                                              ' LONG

DECLARE FUNCTION tapiGetLocationInfoW IMPORT "TAPI32.DLL" ALIAS "tapiGetLocationInfoW" ( _
   BYREF lpszCountryCode AS WSTRINGZ _                  ' __in LPWSTR lpszCountryCode
 , BYREF lpszCityCode AS WSTRINGZ _                     ' __in LPWSTR lpszCityCode
 ) AS LONG                                              ' LONG

' ========================================================================================
' The tapiRequestDrop function is nonfunctional and obsolete for all classes of
' Windows-based applications. It should not be used. Will always return an error code.
' ========================================================================================
'DECLARE FUNCTION tapiRequestDrop IMPORT "TAPI32.DLL" ALIAS "tapiRequestDrop" ( _
'   BYVAL hwnd AS DWORD _                                ' __in HWND hwnd
' , BYVAL wRequestID AS DWORD _                          ' __in WPARAM wRequestID
' ) AS LONG                                              ' LONG

' ========================================================================================
' The tapiRequestMakeCall function requests the establishment of a voice call. A
' call-manager application is responsible for establishing the call on behalf of the
' requesting application, which is then controlled by the user's call-manager application.
' ========================================================================================
DECLARE FUNCTION tapiRequestMakeCall IMPORT "TAPI32.DLL" ALIAS "tapiRequestMakeCallA" ( _
   BYREF lpszDestAddress AS ASCIIZ _                    ' __in LPCSTR lpszDestAddress
 , BYREF lpszAppName AS ASCIIZ _                        ' __in LPCSTR lpszAppName
 , BYREF lpszCalledParty AS ASCIIZ _                    ' __in LPCSTR lpszCalledParty
 , BYREF lpszComment AS ASCIIZ _                        ' __in LPCSTR lpszComment
 ) AS LONG                                              ' LONG

DECLARE FUNCTION tapiRequestMakeCallW IMPORT "TAPI32.DLL" ALIAS "tapiRequestMakeCallW" ( _
   BYREF lpszDestAddress AS WSTRINGZ _                  ' __in LPCWSTR lpszDestAddress
 , BYREF lpszAppName AS WSTRINGZ _                      ' __in LPCWSTR lpszAppName
 , BYREF lpszCalledParty AS WSTRINGZ _                  ' __in LPCWSTR lpszCalledParty
 , BYREF lpszComment AS WSTRINGZ _                      ' __in LPCWSTR lpszComment
 ) AS LONG                                              ' LONG

' ========================================================================================
' The tapiRequestMediaCall function was never implemented in any version of TAPI. This
' function is obsolete and should not be used.
' ========================================================================================
'DECLARE FUNCTION tapiRequestMediaCall IMPORT "TAPI32.DLL" ALIAS "tapiRequestMediaCallA" ( _
'  BYVAL hwnd AS DWORD _                                 ' __in HWND hwnd
'  BYVAL wRequestID AS DWORD _                           ' __in WPARAM wRequestID
'  BYREF lpszDeviceClass AS ASCIIZ _                     ' __in LPCSTR lpszDeviceClass
'  BYREF lpDeviceID AS ASCIIZ _                          ' __in LPCSTR lpDeviceID
'  BYVAL dwSize AS DWORD _                               ' __in DWORD dwSize
'  BYVAL dwSecure AS DWORD _                             ' __in DWORD dwSecure
'  BYREF lpszDestAddress AS ASCIIZ _                     ' __in LPCSTR lpszDestAddress
'  BYREF lpszAppName AS ASCIIZ _                         ' __in LPCSTR lpszAppName
'  BYREF lpszCalledParty AS ASCIIZ _                     ' __in LPCSTR lpszCalledParty
'  BYREF lpszComment AS ASCIIZ _                         ' __in LPCSTR lpszComment
' ) AS LONG                                              ' LONG

'DECLARE FUNCTION tapiRequestMediaCallW IMPORT "TAPI32.DLL" ALIAS "tapiRequestMediaCallW" ( _
'  BYVAL hwnd AS DWORD _                                 ' __in HWND hwnd
'  BYVAL wRequestID AS DWORD _                           ' __in WPARAM wRequestID
'  BYREF lpszDeviceClass AS WSTRINGZ _                   ' __in LPCWSTR lpszDeviceClass
'  BYREF lpDeviceID AS WSTRINGZ _                        ' __in LPCWSTR lpDeviceID
'  BYVAL dwSize AS DWORD _                               ' __in DWORD dwSize
'  BYVAL dwSecure AS DWORD _                             ' __in DWORD dwSecure
'  BYREF lpszDestAddress AS WSTRINGZ _                   ' __in LPCWSTR lpszDestAddress
'  BYREF lpszAppName AS WSTRINGZ _                       ' __in LPCWSTR lpszAppName
'  BYREF lpszCalledParty AS WSTRINGZ _                   ' __in LPCWSTR lpszCalledParty
'  BYREF lpszComment AS WSTRINGZ _                       ' __in LPCWSTR lpszComment
' ) AS LONG                                              ' LONG

'/*

'TAPIERROR_FORMATMESSAGE - macro to convert a TAPI error constant
'    into a constant that FormatMessage will accept

'        TAPIERR : Negative numbers and 0
'            Map to : strip off high WORD
'            Example: &HFFFFFFFF (-1) becomes &H0000FFFF
'        LINEERR : Start at &H80000000
'            Map to : strip off &H80000000 and add &HE000
'            Example: &H80000004 becomes &H0000E004
'        PHONEERR: Start at &H90000000
'            Map to : strip off &H90000000 and add &HF000
'            Example: &H9000000A becomes &H0000F00A

'        pseudocode:

'        if (__ErrCode__ is a TAPIERR)
'            strip off high word

'            else if (__ErrCode__ is a PHONEERR)
'                strip off &H90000000
'                add &HE000

'                else
'                    strip off &H80000000
'                    add &HF000

'*/

'#define TAPIERROR_FORMATMESSAGE(__ErrCode__)                                                   \
'                                                                                               \
'                    ( ( (__ErrCode__) > &HFFFF0000 ) ?                                         \
'                                                                                               \
'                            ( (__ErrCode__) & &H0000FFFF ) :                                   \
'                                                                                               \
'                            ( ( (__ErrCode__) & &H10000000 ) ?                                 \
'                                                                                               \
'                              ( (__ErrCode__) - &H90000000 + &HF000 ) :                        \
'                                                                                               \
'                              ( (__ErrCode__) - &H80000000 + &HE000 ) ) )

FUNCTION TAPIERROR_FORMATMESSAGE (BYVAL dwErrCode AS DWORD) AS DWORD
   IF dwErrCode > &HFFFF0000??? THEN
      dwErrCode = dwErrCode AND &H0000FFFF???
   ELSEIF (dwErrCode AND &H10000000???) THEN
      dwErrCode = dwErrCode - &H90000000??? + &HF000??
   ELSE
      dwErrCode = dwErrCode - &H80000000??? + &HE000??
   END IF
   FUNCTION = dwErrCode
END FUNCTION

'#pragma pack()
